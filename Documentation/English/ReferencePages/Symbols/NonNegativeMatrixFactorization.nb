(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    764644,      15251]
NotebookOptionsPosition[    744403,      14838]
NotebookOutlinePosition[    745418,      14870]
CellTagsIndexPosition[    745307,      14864]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["NonNegativeMatrixFactorization", "ObjectName",
 CellID->541242335,ExpressionUUID->"d781e8bb-212c-462d-8275-60ad547863c4"],

Cell[TextData[{
 Cell["   ", "ModInfo",ExpressionUUID->"ed92164e-4e4f-4bc1-a4f0-277608bcfcd2"],
 Cell[BoxData[
  RowBox[{"NonNegativeMatrixFactorization", "[", 
   RowBox[{
    StyleBox["mat", "TI"], ",", 
    StyleBox["k", "TI"]}], "]"}]], "InlineFormula",ExpressionUUID->
  "76d2edc9-096e-41a1-9d7c-1bacd8da52ea"],
 "\[LineSeparator]finds non-negative matrix factors for the matrix ",
 StyleBox["mat", "TI"],
 " using ",
 Cell[BoxData[
  StyleBox["k", "TI"]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "6a1f62e6-d041-46b5-90b5-778e5211e064"],
 " dimensions."
}], "Usage",
 CellChangeTimes->{
  3.893524244182428*^9, {3.8935373192257967`*^9, 3.893537337740967*^9}},
 CellID->2066679300,ExpressionUUID->"5dd83c5d-32f7-4ccb-9aaf-872a94a80322"],

Cell["\<\
Non-negative matrix factorization (NNMF) is a matrix factorization method \
that reduces the dimensionality of a given matrix.\
\>", "Notes",
 CellTags->"TabNext",
 CellID->862193358,ExpressionUUID->"a8cdb857-7913-4413-8841-52d0cde6d1d3"],

Cell["\<\
NNMF has two factors: the left one is the reduced dimensionality \
representation matrix and the right one is the corresponding new-basis matrix.\
\>", "Notes",
 CellID->683651850,ExpressionUUID->"69d3fa52-e489-4f80-bbf7-8af3fc53ff15"],

Cell["The argument matrix need not be square.", "Notes",
 CellID->337801479,ExpressionUUID->"84d149b8-57b9-4569-be48-28050d17546d"],

Cell["\<\
NNMF allows easier interpretation of extracted topics in the framework of \
latent semantic analysis.\
\>", "Notes",
 CellID->653278578,ExpressionUUID->"77074ba0-f028-479b-adc2-32c82e034b54"],

Cell["\<\
When using NNMF over collections of images and documents, often more than one \
execution is required in order to build confidence in the topics \
interpretation.\
\>", "Notes",
 CellID->226064937,ExpressionUUID->"ebf1dbca-353d-4ab4-b520-338e305bb012"],

Cell["\<\
In comparison with the thin singular value decomposition, NNMF provides a \
non-orthogonal basis with vectors that have non-negative coordinates.\
\>", "Notes",
 CellID->54481016,ExpressionUUID->"2fc6abba-bb2c-4eee-add8-6ec2f33af21a"],

Cell["The following options can be given: ", "Notes",
 CellID->1278488522,ExpressionUUID->"0c6cc42f-4b56-4c3f-95ab-2cc8569b586e"],

Cell[BoxData[GridBox[{
   {Cell["      ", "ModInfo",ExpressionUUID->
     "c64be3ef-b1a4-437d-a5e3-e7b053f1b2c3"], "\"\<Epsilon\>\"", "1.*^-6", 
    Cell["denominator (regularization) offset", "TableText",ExpressionUUID->
     "d21f45e4-7797-4b7a-9b62-ccd8f30e0e21"]},
   {Cell["      ", "ModInfo",ExpressionUUID->
     "c804a089-ce8a-4791-b76b-44423176a300"], 
    ButtonBox["MaxSteps",
     BaseStyle->"Link"], "200", Cell[
    "maximum iteration steps", "TableText",ExpressionUUID->
     "3cd8b0a5-5329-45b4-9aa3-72749f38c4a5"]},
   {Cell["      ", "ModInfo",ExpressionUUID->
     "46606aee-6f66-4103-9244-f615c329069f"], "\"\<NonNegative\>\"", 
    ButtonBox["True",
     BaseStyle->"Link"], Cell[
    "should the non-negativity be enforced at each step", "TableText",
     ExpressionUUID->"9c37ae26-1ba8-4744-9d94-75905bca7a32"]},
   {Cell["      ", "ModInfo",ExpressionUUID->
     "3d98c7fb-9266-480c-a958-0f6f63649ff5"], "\"\<Normalization\>\"", 
    ButtonBox["Left",
     BaseStyle->"Link"], Cell[
    "which normalization is applied to the factors", "TableText",
     ExpressionUUID->"5f24f373-5358-4555-bfbc-3bdee9646b8e"]},
   {Cell["      ", "ModInfo",ExpressionUUID->
     "6b44977d-eedb-44f2-b2de-883eee15ef3f"], 
    ButtonBox["PrecisionGoal",
     BaseStyle->"Link"], 
    ButtonBox["Automatic",
     BaseStyle->"Link"], Cell[
    "precision goal", "TableText",ExpressionUUID->
     "ae416541-7fdf-402f-899f-93909c778aff"]},
   {Cell["      ", "ModInfo",ExpressionUUID->
     "250e3753-cc79-4ab4-a5e2-b23ba624f275"], "\"\<ProfilingPrints\>\"", 
    ButtonBox["False",
     BaseStyle->"Link"], Cell[
    "should profiling times be printed out during execution", "TableText",
     ExpressionUUID->"0ada848e-0652-4ac2-98ce-631e94bbbec7"]},
   {Cell["      ", "ModInfo",ExpressionUUID->
     "e63f0756-5fed-4c04-974f-c68e0d7ac041"], 
    "\"\<RegularizationParameter\>\"", "0.01", Cell[
    "regularization (multiplier) parameter", "TableText",ExpressionUUID->
     "9f136382-88a0-4746-91ca-d91df93e7f3d"]}
  }]], "3ColumnTableMod",
 CellID->229782499,ExpressionUUID->"1a754613-c59e-49f9-a81c-db1f1bc3cbdf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Tech Notes",
 Cell[BoxData[
  TemplateBox[{"TechNotes", 
    Cell[
     BoxData[
      FrameBox[
       Cell["Insert links to related tech notes.", "MoreInfoText"], BaseStyle -> 
       "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "d8fdbd5b-494f-41f7-8d5d-66e681e0e59d"]
}], "TechNotesSection",
 CellID->752275834,ExpressionUUID->"6c594320-3c82-4d5b-ae04-d65bf0bea572"],

Cell["XXXX", "Tutorials",
 CellID->1263712149,ExpressionUUID->"89fa44bb-e12a-47a5-959c-6b5ee1c0eb76"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Related Links",
 Cell[BoxData[
  TemplateBox[{"RelatedLinks", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Insert links to any related page, including web pages.", 
        "MoreInfoText"], BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "3156be2f-4c2c-4123-a743-ef434fe0c8c5"]
}], "RelatedLinksSection",
 CellID->596819413,ExpressionUUID->"20b2e9ba-5b1a-49fd-9c5c-82e0cc49d328"],

Cell["XXXX", "RelatedLinks",
 CellID->1995242801,ExpressionUUID->"a11de47f-c357-4fc4-b750-d6f1e288e00c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "See Also",
 Cell[BoxData[
  TemplateBox[{"SeeAlso", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Insert links to any related reference (function) pages.", 
        "MoreInfoText"], BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "0ba64ba9-633c-478c-80f8-fea3415bd3f2"]
}], "SeeAlsoSection",
 CellID->1088608502,ExpressionUUID->"9ca7ce0b-e230-44cb-8688-ebd9bc5a10e1"],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["SingularValueDecomposition",
   BaseStyle->"Link"]], "InlineSeeAlsoFunction",
  TaggingRules->{"PageType" -> "Function"},ExpressionUUID->
  "0baa9ee1-232e-4238-b318-1267590a84eb"],
 StyleBox[" \[FilledVerySmallSquare] ", "InlineSeparator"],
 Cell[BoxData[
  ButtonBox["IndependentComponentAnalysis",
   BaseStyle->"Link",
   ButtonData->
    "paclet:AntonAntonov/DimensionReducers/ref/IndependentComponentAnalysis"]]\
, "InlineSeeAlsoFunction",
  TaggingRules->{"PageType" -> "Function"},
  CellTags->"a7f67433-7d07-4632-a97c-5f2e6cb976b9",ExpressionUUID->
  "be439179-924e-4c5c-a6f1-efb90c29ea37"],
 StyleBox[" \[FilledVerySmallSquare] ", "InlineSeparator"],
 Cell[BoxData[
  ButtonBox["DimensionReduction",
   BaseStyle->"Link"]], "InlineSeeAlsoFunction",
  TaggingRules->{"PageType" -> "Function"},
  CellTags->"f8178be1-2277-4154-9a06-fb38aacda7ce",ExpressionUUID->
  "a4214916-9b75-4e12-b02b-5d8e517aba2b"],
 Cell[BoxData[
  RowBox[{
  Cell[TextData[StyleBox[
   " \[FilledVerySmallSquare] ", "InlineSeparator"]],ExpressionUUID->
    "f7865621-5918-4c34-b49e-457046a9648e"], 
   DynamicModuleBox[{$CellContext`nbobj$$ = NotebookObject[
    "805251ce-571a-4865-a88d-969ebbded11f", 
     "306d07bc-401e-4b35-a32f-8796e2c4abbe"], $CellContext`cellobj$$ = 
    CellObject[
    "e57ecc8d-79b6-492b-9412-bdc305c068a2", 
     "8f346c28-3c31-4da4-a8ad-e3b071bd6c7d"]}, 
    TemplateBox[{
      GraphicsBox[{{
         Thickness[0.06], 
         StrokeForm[
          Hue[0.4167, 0.406, 0.502]], 
         CircleBox[{0, 0}]}, {
         Thickness[0.06], 
         StrokeForm[
          Hue[0.4167, 0.406, 0.502]], 
         LineBox[{{0, 0.62}, {0, -0.62}}]}, {
         Thickness[0.06], 
         StrokeForm[
          Hue[0.4167, 0.406, 0.502]], 
         LineBox[{{-0.62, 0}, {0.62, 0}}]}}, 
       ImagePadding -> {{1., 1.}, {2.4, 1.}}, ImageSize -> 16, 
       PlotRange -> {{-1.06, 1.06}, {-1.06, 1.06}}, 
       BaselinePosition -> (Center -> 
        Center)], $CellContext`nbobj$$, $CellContext`cellobj$$},
     "InlineListingAddButton"],
    Initialization:>($CellContext`nbobj$$ = 
      EvaluationNotebook[]; $CellContext`cellobj$$ = EvaluationCell[])]}]], 
  "InlineListingAddButton",ExpressionUUID->
  "e57ecc8d-79b6-492b-9412-bdc305c068a2"]
}], "SeeAlso",
 CellChangeTimes->{{3.8935250861546583`*^9, 3.893525175653509*^9}, {
  3.893525245379438*^9, 3.893525257730566*^9}},
 CellID->1829904321,ExpressionUUID->"6efedd2b-aa3f-4af7-94aa-6a7b06775f29"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Related Guides", "MoreAboutSection",
 CellChangeTimes->{{3.843042374232973*^9, 3.843042375545676*^9}},
 CellID->1088614360,ExpressionUUID->"2965c4e6-40da-4489-ae8d-7547865a59f1"],

Cell[TextData[ButtonBox["Dimension reduction functions",
 BaseStyle->"Link",
 ButtonData->
  "paclet:AntonAntonov/DimensionReducers/guide/Dimensionreductionfunctions"]],\
 "MoreAbout",
 CellChangeTimes->{{3.893525261923285*^9, 3.893525274987629*^9}},
 CellID->1928359727,ExpressionUUID->"c486ab48-16ac-4046-8f7e-38bb868b6e77"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Examples Initialization",
 Cell[BoxData[
  TemplateBox[{"ExamplesInitialization", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Input that is to be evaluated before any examples are run, e.g. \
Needs[\[Ellipsis]].", "MoreInfoText"], BaseStyle -> "IFrameBox"]], 
     "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "6cbf154c-305b-4cdf-bc21-6730da4bcf6b"]
}], "ExamplesInitializationSection",
 CellID->118731165,ExpressionUUID->"e4ada36f-973d-4586-ac2b-2be2ac19583c"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<AntonAntonov`DimensionReducers`\>\"", 
  "]"}]], "ExampleInitialization",
 CellID->502382092,ExpressionUUID->"c28e3f0c-88f5-43e8-8f40-635e2f87dfaa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     StyleBox[
      RowBox[{"Basic", " ", "Examples"}], "PrimaryExamplesSection"], 
     ButtonBox[
      RowBox[{
       RowBox[{"More", " ", "Examples"}], " ", "\[RightTriangle]"}],
      BaseStyle->"ExtendedExamplesLink",
      ButtonData:>"ExtendedExamples"]}
   }],
  $Line = 0; Null]], "PrimaryExamplesSection",
 CellID->1777603887,ExpressionUUID->"9d9f9cee-f9d1-4088-b1ca-559d46324ebd"],

Cell["Create a random integer matrix:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785586797434739*^9, 3.785586798515562*^9}, {
  3.7856948817844753`*^9, 3.78569488574296*^9}},
 CellID->13078159,ExpressionUUID->"e5d31287-c44b-4a47-8e2e-049c9772db07"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "7", "]"}], "\n", 
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"10", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"MatrixForm", "[", "mat", "]"}]}], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.7855861057975397`*^9, 3.78558611347972*^9}, 
   3.785586216812552*^9},
 CellLabel->"In[1]:=",
 CellID->443871870,ExpressionUUID->"9bd5f083-68b1-40ce-a664-ce5dc6493b13"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["RandomGeneratorState",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"ExtendedCA\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"State hash: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"-", "1757226858037071779"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"ExtendedCA\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"State hash: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"-", "1757226858037071779"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  RandomGeneratorState[{
   "ExtendedCA", {80, 4, 0}}, {{
    RawArray["UnsignedInteger64",{5905510103747254975, 15751419414484552228, 
      11815647618050439058, 5354387362196346447, 9204347816993618499, 
      15470859531473038484, 949886539, 3552071512994955637, 
      16276287078396130143, 11318122253206976979, 13330711104037525103, 
      5256388267122284951, 3468688022786055690, 14611907655743599249, 
      7181421383665139153, 11556732114911998497, 14414737974372106939, 
      9976094494034360738, 16403418935773237946, 15642966947664504804}], 0, 
     20, 20}, {CompressedData["
1:eJw9lbmOXUUQhi1EQAr4BXiAkbr2qpBwJAJkxAMYMbacGMljCfH2fH1OXyd3
6aWWf6n+5a9/3n347s2bN68/8PHu/b+/fvny/r8/fuTPn59fP338/PL38+ev
Lx9fvqR/+H2f+56P3z69fn3+iR+uPSbjETprTYU//8yySPInRdmM6pWp93oX
P6163CtyIur5LetP1zEClZjbVGfFvZFLU11zycpJ6xY7N1xXhreVp7SOttwb
ZSmeoeldZSvmsZErXcTEY3WO9Vp9im0vqdCaJFlH5LX+1O2qrfRmRjv8vAOF
LjcltC/TjHKZs+Fp2eUxahHiax6pY4oITY5qLZLcKUyFpfSyovlWnROJ3lZT
ybDhq9yl7gu2VNaqqgW8oSS8a6VyWTRCUQ5Q0X4yizr1zBi5FvitPPiVr5Wd
RHG2Zc1NEbgaBQq4s19JH9c61SyBbjCn/RZQuc83hwt6AjjYFDk9QyYH3Xsg
DS5CDqVmu1ta80nipOe6IpX3PjxufE3SSdzrkFuNxGilZrWUnMykMG2Hy1Gh
//u8mmyBUdBQLxLxI7JKOgNOSFizKtDDKTVMnf5MOgYhdvY3pnXCoFRFgR1i
7w2fBrBpBztAWmE3P9HciCLDrhiNz0Fvdu0qKBPZiSKfex0yl+2KjJsh6PJa
9yYkWkdzs4ugu8tvsIZ67SoR/PyhF7EoGyLUFr6th7afKBu1uZBUtg4e9Atq
0dhpFmBwuR+G46jDp6VS/FD0HLRpF5SuJG0bx2sdP29PmS5Bx5hqTiDdioN5
nCVUsIxadwu4uCqKUdBb5MB33JYoDyS3gbB8PsgxFLIlYJsG4NJvLaTRLDbv
wjgMFluHnC1SF3gp9LWo6dzAqvyDaeA2ztfpQQbsxF0Hz0Kh5t1zEBd1VfLJ
IqPgTIbYo6q2RZU2Uo93ZrkYTsOBK427JicOesczoOxMNtC91zGObtMWBJOT
yzf7aIfTdM30c4Lk8SCHgJjeYLtKA3zvxpoFSJRAwCA6S24rMAsiiSp7WDIh
VNfFASX3BP4Z2/M1zjjifqEKjLOcaQXRhwMS0dQepai1tuuOfBlcqrb1Qwws
HQ9HOQ/CBkMwOIAiqsOmYj0K3HpQYJTzMlDggMYgiz2Kh6lwyGTsIHfjBpZI
5TF4kAnDxoBB7jVbR2cg1dYoqUmD8oJX4Oo5tguu2e/bz7RxIBJrRhI6Z37p
budRqV1DeFPfa3N/xlFvKyVK4qliMsPyFf+JrMbkxa/MRBR8H2fQ4pZdyWCe
Qk33E8lw58kCYXPQY3VOw8iVXtEJHt5zjeftNDzMCSItrBecsQMdVILwXmCO
cxvH/Q9MEWfe
     "], 4, 0}}, RawArray["UnsignedInteger64",{16689517215672479837, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.785586242889971*^9, 3.7855863244730597`*^9, {3.7855865856171227`*^9, 
   3.785586611019477*^9}, 3.785664586800777*^9, 3.785666380529335*^9, 
   3.785667950644095*^9, 3.785673940495186*^9, 3.785711128528801*^9, 
   3.787313844990593*^9, 3.893537649912016*^9},
 CellLabel->"Out[1]=",
 CellID->1283838566,ExpressionUUID->"33669560-97ff-4403-a351-1aa18bc139bb"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"4", "7", "4"},
     {"10", "8", "8"},
     {"5", "3", "4"},
     {"5", "4", "5"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.785586242889971*^9, 3.7855863244730597`*^9, {3.7855865856171227`*^9, 
   3.785586611019477*^9}, 3.785664586800777*^9, 3.785666380529335*^9, 
   3.785667950644095*^9, 3.785673940495186*^9, 3.785711128528801*^9, 
   3.787313844990593*^9, 3.8935376499148483`*^9},
 CellLabel->"Out[3]//MatrixForm=",
 CellID->1706577353,ExpressionUUID->"6a6bcaf7-4dcd-472c-aa58-91d94e5d069d"]
}, Open  ]],

Cell["Compute the NNMF factors:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.7855865507279577`*^9, 3.7855865802950573`*^9}, {
   3.785677350894515*^9, 3.7856773512872753`*^9}, {3.785694888736307*^9, 
   3.78569489303227*^9}, 3.7857110993769417`*^9},
 CellID->140624930,ExpressionUUID->"a0d66d3b-f5be-4d2f-a8cb-2327ea6fff7d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"W", ",", "H"}], "}"}], "=", 
   RowBox[{"NonNegativeMatrixFactorization", "[", 
    RowBox[{"mat", ",", "2"}], "]"}]}], ";"}], "\n", 
 RowBox[{"Row", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"MatrixForm", "[", "W", "]"}], ",", 
    RowBox[{"MatrixForm", "[", "H", "]"}]}], "}"}], "]"}]}], "Input", \
"ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785586224380581*^9, 3.785586249798358*^9}, {
   3.7855866290444727`*^9, 3.785586629650071*^9}, 3.785711019361004*^9},
 CellLabel->"In[4]:=",
 CellID->2122564449,ExpressionUUID->"d8ebb24d-794a-456e-89db-b85e49df10df"],

Cell[BoxData[
 TemplateBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{"0.6885393580062861`", "0.035431626400897684`"}, {
        "0.6253134484753372`", "0.7660989658558218`"}, {
        "0.19662765595541692`", "0.46682102049884944`"}, {
        "0.31021638987270106`", "0.440357933033618`"}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], 
   TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
        "5.426066441237734`", "10.043701254088834`", "5.452247466672739`"}, {
        "8.3643185932699`", "2.1947510688286553`", "6.348057900843477`"}}, 
       RowSpacings -> 1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
       ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]},
  "RowDefault"]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.7855862411275682`*^9, 3.785586250237199*^9}, 
   3.785586324496263*^9, 3.785586522112134*^9, {3.785586586821579*^9, 
   3.785586629911872*^9}, 3.785664586859379*^9, 3.7856663823173037`*^9, 
   3.785667950694471*^9, 3.7856739405463247`*^9, 3.785711128601568*^9, 
   3.787313845151661*^9, 3.893537649942032*^9},
 CellLabel->"Out[5]=",
 CellID->653982539,ExpressionUUID->"5a0ece85-ca39-4950-ba78-16339fe0ad2a"]
}, Open  ]],

Cell["Here is the matrix product of the obtained factors:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{3.785586544237479*^9},
 CellID->1795349161,ExpressionUUID->"d90dfa5c-b943-44d4-aa8f-669e05148eea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"W", ".", "H"}], "]"}]], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.7855865313763313`*^9, 3.7855865353393497`*^9}},
 CellLabel->"In[6]:=",
 CellID->500433151,ExpressionUUID->"0416c90d-67fe-483b-b092-b4afd0ff9b05"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"4.032421715444104`", "6.993247213410964`", "3.9790089863082003`"},
     {"9.80088814241936`", "7.961857990790951`", "8.27260425835512`"},
     {"4.971554466886682`", "2.9994253683995025`", "4.035469506518257`"},
     {"5.366548789577177`", "4.082196788196068`", "4.4867941817969585`"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.785586535840887*^9, {3.7855865882359953`*^9, 3.785586631487097*^9}, 
   3.785664586868231*^9, 3.785666383753912*^9, 3.785667950704363*^9, 
   3.78567394055616*^9, 3.785711128611641*^9, 3.7873138451609163`*^9, 
   3.893537649959337*^9},
 CellLabel->"Out[6]//MatrixForm=",
 CellID->663227627,ExpressionUUID->"26d57678-a359-429a-b693-8ed159e1639e"]
}, Open  ]],

Cell["\<\
Note that elementwise relative errors between the original matrix and \
reconstructed matrix are small:\
\>", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.7855867525910997`*^9, 3.7855867779916058`*^9}, {
   3.7856773832936163`*^9, 3.785677402531492*^9}, {3.7856949226726637`*^9, 
   3.7856949228246593`*^9}, 3.785846595152379*^9},
 CellID->870453125,ExpressionUUID->"067330c8-3131-4a9b-ac8c-28ec579bfb79"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"Round", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"W", ".", "H"}], "-", "mat"}], ")"}], "/", "mat"}], ",", 
    "0.001"}], "]"}], "]"}]], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.7855865313763313`*^9, 3.7855865353393497`*^9}, {
  3.785586649451166*^9, 3.785586729539407*^9}},
 CellLabel->"In[7]:=",
 CellID->211435835,ExpressionUUID->"eb2f3bbd-5f5a-432e-9fa1-791d4f20986d"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0.008`", 
      RowBox[{"-", "0.001`"}], 
      RowBox[{"-", "0.005`"}]},
     {
      RowBox[{"-", "0.02`"}], 
      RowBox[{"-", "0.005`"}], "0.034`"},
     {
      RowBox[{"-", "0.006`"}], "0.`", "0.009000000000000001`"},
     {"0.073`", "0.021`", 
      RowBox[{"-", "0.10300000000000001`"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.7855867299124317`*^9, 3.785664586913581*^9, 
  3.78566638615939*^9, 3.785667950733736*^9, 3.785673940600503*^9, 
  3.785711128644693*^9, 3.78731384518711*^9, 3.893537649975079*^9},
 CellLabel->"Out[7]//MatrixForm=",
 CellID->1426599059,ExpressionUUID->"2524b657-cc1b-45f4-aa1b-e3acad0d934c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "More Examples",
 Cell[BoxData[
  TemplateBox[{"MoreExamples", 
    Cell[
     BoxData[
      FrameBox[
       Cell["Extended examples in standardized sections.", "MoreInfoText"], 
       BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "544f90d2-3dd7-4897-a215-509a28569f97"]
}], "ExtendedExamplesSection",
 CellTags->"ExtendedExamples",
 CellID->396031745,ExpressionUUID->"a9ad61dd-857d-40c1-97e7-4dbaeb8fde1d"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "Scope", "ExampleSection",ExpressionUUID->
   "e68889d9-0344-4e60-82e7-acf4c025937e"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1053716162,ExpressionUUID->"415ffd9c-dae4-4cf8-99ac-b9088baa969a"],

Cell["\<\
Here is a random matrix with its first two columns having much larger \
magnitudes than the rest:\
\>", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.78566732480122*^9, 3.785667326167515*^9}},
 CellID->649685796,ExpressionUUID->"522965f8-4655-40a3-b937-b254ef8e03be"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "278", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"20", ",", "100"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "2"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mat2", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "30"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "7"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{
    RowBox[{"ArrayPad", "[", 
     RowBox[{"mat", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "5"}], "}"}]}], "}"}]}], "]"}], "+", "mat2"}]}], 
  ";"}], "\n", 
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", "mat", "]"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Medium"}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}]}], "]"}]}], "Input", \
"ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785667208622253*^9, 3.7856672086246347`*^9}, {
  3.78566733469622*^9, 3.7856673368993998`*^9}, {3.785677580073867*^9, 
  3.785677592225054*^9}, {3.7856776504811907`*^9, 3.785677658080433*^9}, {
  3.7856779432627907`*^9, 3.785677945173986*^9}, {3.785678002315586*^9, 
  3.785678006993884*^9}},
 CellLabel->"In[1]:=",
 CellID->1611850593,ExpressionUUID->"ab5ada2e-73ad-477a-920d-96e3e90f73ed"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 60], 0.016666666666666666`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 91.44816502742285}, {2., 50.32785678790853}, {3., 
      93.07221668038858}, {4., 39.39503924773813}, {5., 77.10024230804325}, {
      6., 57.27116939006366}, {7., 77.04257019408254}, {8., 
      127.71939014780529`}, {9., 116.61943595772385`}, {10., 
      39.69310799136762}}]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
      NCache[
       Rational[1, 60], 0.016666666666666666`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 37.02766224189401}, {2., 66.80062635926755}, {3., 
      48.15293726419132}, {4., 100.40288442232844`}, {5., 
      106.42200370078747`}, {6., 66.14555752051466}, {7., 
      56.34245944155578}, {8., 76.453761240659}, {9., 118.177447625864}, {10.,
       71.75837224823579}}]}, 
    {RGBColor[0.560181, 0.691569, 0.194885], PointSize[
      NCache[
       Rational[1, 60], 0.016666666666666666`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 17.57899146741486}, {2., 27.72093195542893}, {3., 
      29.811588070911114`}, {4., 27.025633558615084`}, {5., 
      24.003113379103127`}, {6., 24.61602700751458}, {7., 
      23.456328784538357`}, {8., 27.451711368866427`}, {9., 
      15.985859448596834`}, {10., 20.592114165389983`}}]}, 
    {RGBColor[0.922526, 0.385626, 0.209179], PointSize[
      NCache[
       Rational[1, 60], 0.016666666666666666`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 10.698186274572492`}, {2., 14.909875881799959`}, {3., 
      24.732487854084106`}, {4., 28.164303324257467`}, {5., 
      22.3797935914504}, {6., 24.164775954697397`}, {7., 
      28.964616965222476`}, {8., 19.418580688425948`}, {9., 
      21.513579397118328`}, {10., 26.708172170245994`}}]}, 
    {RGBColor[0.528488, 0.470624, 0.701351], PointSize[
      NCache[
       Rational[1, 60], 0.016666666666666666`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 26.5389023126168}, {2., 19.298043708592296`}, {3., 
      29.07660556048566}, {4., 27.29292163850311}, {5., 29.25457286604272}, {
      6., 21.177804759083706`}, {7., 27.461323770823576`}, {8., 
      19.714869384085063`}, {9., 23.22332684665389}, {10., 
      23.383834987735362`}}]}, 
    {RGBColor[0.772079, 0.431554, 0.102387], PointSize[
      NCache[
       Rational[1, 60], 0.016666666666666666`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 10.290234181159562`}, {2., 10.67923752817891}, {3., 
      29.737699971689366`}, {4., 20.763750822104786`}, {5., 
      10.109754257456167`}, {6., 10.347413455633433`}, {7., 
      20.83144781329882}, {8., 22.10709036475515}, {9., 
      12.498107336443937`}, {10., 18.96433265843354}}]}, 
    {RGBColor[0.363898, 0.618501, 0.782349], PointSize[
      NCache[
       Rational[1, 60], 0.016666666666666666`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 21.9043621971425}, {2., 19.922958437700615`}, {3., 
      25.649531135120526`}, {4., 25.478354870940606`}, {5., 
      14.896479523296119`}, {6., 25.18520882261292}, {7., 
      19.85754023764063}, {8., 23.61857513797007}, {9., 
      12.631090126657256`}, {10., 10.65536858102481}}]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0.8125000000000021, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameStyle->Automatic,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.4, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImageSize->Medium,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
    "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0.8125000000000021, 10.}, {0, 127.71939014780529`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.785667210279531*^9, 3.785667337424528*^9, 3.78566795085708*^9, 
   3.785669933295953*^9, 3.785673940755375*^9, {3.7856775728549013`*^9, 
   3.785677592680746*^9}, {3.785677651955392*^9, 3.7856776590082083`*^9}, 
   3.785677945642149*^9, {3.785678004214713*^9, 3.785678011323202*^9}, 
   3.785711128872731*^9, 3.7873138455083*^9, 3.893537650016292*^9},
 CellLabel->"Out[5]=",
 CellID->195465858,ExpressionUUID->"077adb24-03c8-47da-8c27-c2fa2f8cb9bc"]
}, Open  ]],

Cell["Here we compute NNMF factors:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785667296612021*^9, 3.7856673018983793`*^9}, {
   3.785677429623384*^9, 3.78567743007479*^9}, 3.785711099412642*^9},
 CellID->1913315032,ExpressionUUID->"a1571ef8-fc8e-40df-ae88-38e59ca9db5a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "32", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"W", ",", "H"}], "}"}], "=", 
   RowBox[{"NonNegativeMatrixFactorization", "[", 
    RowBox[{"mat", ",", "3", ",", 
     RowBox[{"MaxSteps", "\[Rule]", "100"}], ",", 
     RowBox[{"PrecisionGoal", "\[Rule]", "8"}]}], "]"}]}], ";"}]}], "Input", \
"ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785667215941367*^9, 3.785667226637752*^9}, {
   3.785667344336719*^9, 3.785667344414402*^9}, {3.7856775869126873`*^9, 
   3.785677596847221*^9}, 3.7857110193705597`*^9},
 CellLabel->"In[6]:=",
 CellID->1189226501,ExpressionUUID->"57d06b15-6afc-419e-9940-b9c27287cef2"],

Cell["\<\
Find the relative error of the approximation by the matrix factorization:\
\>", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785667293220333*^9, 3.7856672946101313`*^9}, {
  3.7856949601538754`*^9, 3.7856949725533657`*^9}},
 CellID->2088764746,ExpressionUUID->"d9d66be8-656a-403f-9fb7-1fabe7733fc0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Norm", "[", 
   RowBox[{"mat", "-", 
    RowBox[{"W", ".", "H"}]}], "]"}], "/", 
  RowBox[{"Norm", "[", "mat", "]"}]}]], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.7856672396022053`*^9, 3.785667243938826*^9}},
 CellLabel->"In[8]:=",
 CellID->1727024597,ExpressionUUID->"e1f06157-cb88-4970-9bcf-5702c9b302a3"],

Cell[BoxData["0.0524666583516535`"], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.785667244395186*^9, 3.7856673464803963`*^9, 
  3.785667950894514*^9, 3.7856739408116302`*^9, 3.785677598237434*^9, 
  3.785677664675231*^9, 3.7856779496175537`*^9, 3.78567801138841*^9, 
  3.7857111289261627`*^9, 3.7873138455526133`*^9, 3.893537650046177*^9},
 CellLabel->"Out[8]=",
 CellID->1692179143,ExpressionUUID->"66852875-586e-403c-9dff-41acb63007ed"]
}, Open  ]],

Cell["Here is the relative error for the first three columns:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{3.78566728161115*^9},
 CellID->465474160,ExpressionUUID->"18aadcc2-3809-44e6-a130-b4fcd285441d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Norm", "[", 
   RowBox[{
    RowBox[{"mat", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", 
       RowBox[{"1", ";;", "3"}]}], "]"}], "]"}], "-", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"W", ".", "H"}], ")"}], "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", 
       RowBox[{"1", ";;", "3"}]}], "]"}], "]"}]}], "]"}], "/", 
  RowBox[{"Norm", "[", 
   RowBox[{"mat", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"1", ";;", "3"}]}], "]"}], "]"}], "]"}]}]], "Input", \
"ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785667250491529*^9, 3.785667254738741*^9}},
 CellLabel->"In[9]:=",
 CellID->1987455777,ExpressionUUID->"23065be5-8290-4e3e-ac76-a4ad08025bb8"],

Cell[BoxData["0.024975430857487282`"], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.785667255128512*^9, 3.785667347766839*^9, 
  3.785667950923737*^9, 3.785673940857292*^9, 3.785677599178256*^9, 
  3.785677666050066*^9, 3.7856779506359797`*^9, 3.78567801144064*^9, 
  3.7857111289634247`*^9, 3.7873138455608377`*^9, 3.89353765006273*^9},
 CellLabel->"Out[9]=",
 CellID->1328919180,ExpressionUUID->"79be2059-dc71-4584-874b-c35a80eeb593"]
}, Open  ]],

Cell["Here are comparison plots:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{3.785667275455212*^9},
 CellID->806276390,ExpressionUUID->"b6d4b342-bf96-409e-8a39-6a1991f60226"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"opts", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "250"}], ",", 
       RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}]}], "}"}]}], "}"}],
    ",", 
   RowBox[{"Row", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListLinePlot", "[", 
       RowBox[{
        RowBox[{"Transpose", "[", "mat", "]"}], ",", "opts", ",", 
        RowBox[{"PlotLabel", "\[Rule]", "\"\<Orginal\>\""}]}], "]"}], ",", 
      RowBox[{"ListLinePlot", "[", 
       RowBox[{
        RowBox[{"Transpose", "[", 
         RowBox[{"W", ".", "H"}], "]"}], ",", "opts", ",", 
        RowBox[{"PlotLabel", "\[Rule]", "\"\<Reconstructed\>\""}]}], "]"}]}], 
     "}"}], "]"}]}], "]"}]], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785667260197383*^9, 3.785667266057241*^9}},
 CellLabel->"In[10]:=",
 CellID->1412543245,ExpressionUUID->"23b1b59c-5e62-4365-a6d1-d1b84d64561e"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 60], 0.016666666666666666`]], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 91.44816502742285}, {2., 50.32785678790853}, {3., 
         93.07221668038858}, {4., 39.39503924773813}, {5., 
         77.10024230804325}, {6., 57.27116939006366}, {7., 
         77.04257019408254}, {8., 127.71939014780529`}, {9., 
         116.61943595772385`}, {10., 39.69310799136762}}]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 60], 0.016666666666666666`]], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 37.02766224189401}, {2., 66.80062635926755}, {3., 
         48.15293726419132}, {4., 100.40288442232844`}, {5., 
         106.42200370078747`}, {6., 66.14555752051466}, {7., 
         56.34245944155578}, {8., 76.453761240659}, {9., 118.177447625864}, {
         10., 71.75837224823579}}]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 60], 0.016666666666666666`]], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 17.57899146741486}, {2., 27.72093195542893}, {3., 
         29.811588070911114`}, {4., 27.025633558615084`}, {5., 
         24.003113379103127`}, {6., 24.61602700751458}, {7., 
         23.456328784538357`}, {8., 27.451711368866427`}, {9., 
         15.985859448596834`}, {10., 20.592114165389983`}}]}, {
        Hue[0.37820393249936934`, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 60], 0.016666666666666666`]], 
         RGBColor[0.922526, 0.385626, 0.209179], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 10.698186274572492`}, {2., 14.909875881799959`}, {3., 
         24.732487854084106`}, {4., 28.164303324257467`}, {5., 
         22.3797935914504}, {6., 24.164775954697397`}, {7., 
         28.964616965222476`}, {8., 19.418580688425948`}, {9., 
         21.513579397118328`}, {10., 26.708172170245994`}}]}, {
        Hue[0.6142719099991583, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 60], 0.016666666666666666`]], 
         RGBColor[0.528488, 0.470624, 0.701351], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 26.5389023126168}, {2., 19.298043708592296`}, {3., 
         29.07660556048566}, {4., 27.29292163850311}, {5., 
         29.25457286604272}, {6., 21.177804759083706`}, {7., 
         27.461323770823576`}, {8., 19.714869384085063`}, {9., 
         23.22332684665389}, {10., 23.383834987735362`}}]}, {
        Hue[0.8503398874989481, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 60], 0.016666666666666666`]], 
         RGBColor[0.772079, 0.431554, 0.102387], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 10.290234181159562`}, {2., 10.67923752817891}, {3., 
         29.737699971689366`}, {4., 20.763750822104786`}, {5., 
         10.109754257456167`}, {6., 10.347413455633433`}, {7., 
         20.83144781329882}, {8., 22.10709036475515}, {9., 
         12.498107336443937`}, {10., 18.96433265843354}}]}, {
        Hue[0.08640786499873876, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 60], 0.016666666666666666`]], 
         RGBColor[0.363898, 0.618501, 0.782349], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 21.9043621971425}, {2., 19.922958437700615`}, {3., 
         25.649531135120526`}, {4., 25.478354870940606`}, {5., 
         14.896479523296119`}, {6., 25.18520882261292}, {7., 
         19.85754023764063}, {8., 23.61857513797007}, {9., 
         12.631090126657256`}, {10., 10.65536858102481}}]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0.8125000000000021, 0}, 
     DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
       GrayLevel[0.4, 0.5], 
       AbsoluteThickness[1], 
       AbsoluteDashing[{1, 2}]], ImageSize -> 250, 
     Method -> {
      "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
         Directive[
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.363898, 0.618501, 0.782349], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[1, 0.75, 0], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.647624, 0.37816, 0.614037], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.571589, 0.586483, 0.], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.915, 0.3325, 0.2125], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[
          0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
          AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
       "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
       "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, PlotLabel -> 
     FormBox["\"Orginal\"", TraditionalForm], 
     PlotRange -> {{0.8125000000000021, 10.}, {0, 127.71939014780529`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 60], 0.016666666666666666`]], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 91.8325395363257}, {2., 49.4475537368588}, {3., 
         95.41673428852248}, {4., 39.772940786998795`}, {5., 
         77.54320008225505}, {6., 57.59147504837403}, {7., 
         77.29612993459324}, {8., 125.69892351627536`}, {9., 
         116.2965946831634}, {10., 39.437856953220894`}}]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 60], 0.016666666666666666`]], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 37.95420668692236}, {2., 64.24468453130105}, {3., 
         52.429730027353195`}, {4., 99.72006999221763}, {5., 
         106.2457673334676}, {6., 67.9568494431484}, {7., 
         58.43616075940152}, {8., 71.25981171623584}, {9., 
         118.83484024511405`}, {10., 72.14953511119106}}]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 60], 0.016666666666666666`]], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 18.575554942069765`}, {2., 23.613887408334215`}, {3., 
         26.82036108771667}, {4., 29.513748352945886`}, {5., 
         22.177380044306233`}, {6., 22.35890903364395}, {7., 
         25.651206742037175`}, {8., 29.67363185765982}, {9., 
         16.363051789842647`}, {10., 22.707672036549685`}}]}, {
        Hue[0.37820393249936934`, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 60], 0.016666666666666666`]], 
         RGBColor[0.922526, 0.385626, 0.209179], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 13.806273217112606`}, {2., 22.000760670280116`}, {3., 
         21.211643742110596`}, {4., 30.449066630634892`}, {5., 
         24.221685954730823`}, {6., 21.139859658845687`}, {7., 
         21.73415649938974}, {8., 24.037520314741634`}, {9., 
         19.705464373532624`}, {10., 22.58232119026818}}]}, {
        Hue[0.6142719099991583, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 60], 0.016666666666666666`]], 
         RGBColor[0.528488, 0.470624, 0.701351], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 18.9529962676652}, {2., 22.230756869563645`}, {3., 
         25.56339220670399}, {4., 28.15343677366993}, {5., 
         25.414709452380936`}, {6., 22.01541782258914}, {7., 
         24.405438868956438`}, {8., 30.083962283268193`}, {9., 
         24.144286675262233`}, {10., 21.735126504715062`}}]}, {
        Hue[0.8503398874989481, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 60], 0.016666666666666666`]], 
         RGBColor[0.772079, 0.431554, 0.102387], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 15.58047214477072}, {2., 16.4619251226491}, {3., 
         21.34102702040763}, {4., 18.603032125653062`}, {5., 
         13.71146229296518}, {6., 15.52360863139564}, {7., 
         19.4094253558301}, {8., 23.496922970098346`}, {9., 
         9.684958000414213}, {10., 14.905157901676887`}}]}, {
        Hue[0.08640786499873876, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 60], 0.016666666666666666`]], 
         RGBColor[0.363898, 0.618501, 0.782349], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 17.97989922792116}, {2., 19.314102279802682`}, {3., 
         24.669590315452233`}, {4., 22.136451276109604`}, {5., 
         16.607421805354715`}, {6., 18.278760701547114`}, {7., 
         22.563531436649832`}, {8., 27.28139653008172}, {9., 
         12.124108190463591`}, {10., 17.643918643137713`}}]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0.8125000000000021, 0}, 
     DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
       GrayLevel[0.4, 0.5], 
       AbsoluteThickness[1], 
       AbsoluteDashing[{1, 2}]], ImageSize -> 250, 
     Method -> {
      "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
         Directive[
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.363898, 0.618501, 0.782349], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[1, 0.75, 0], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.647624, 0.37816, 0.614037], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.571589, 0.586483, 0.], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.915, 0.3325, 0.2125], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[
          0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
          AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
       "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
       "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, PlotLabel -> 
     FormBox["\"Reconstructed\"", TraditionalForm], 
     PlotRange -> {{0.8125000000000021, 10.}, {0, 125.69892351627536`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}]},
  "RowDefault"]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.78566726645603*^9, 3.785667349061391*^9, 
  3.785667951045887*^9, 3.7856739409968967`*^9, 3.7856776008648853`*^9, 
  3.785677668834652*^9, 3.785677952171762*^9, 3.785678011728156*^9, 
  3.785711129110607*^9, 3.787313845686205*^9, 3.893537650098115*^9},
 CellLabel->"Out[10]=",
 CellID->1314729460,ExpressionUUID->"b6167b9b-7d90-41c8-b7f0-22cb91dbf2cc"]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 InterpretationBox[Cell[
  "Generalizations & Extensions", "ExampleSection",ExpressionUUID->
   "2c389d0b-78ac-4c29-99c3-040442c3414f"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1657381572,ExpressionUUID->"93a9d81c-30da-40bd-b767-db72cc493e48"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "Options", "ExampleSection",ExpressionUUID->
   "b4a9151c-cff8-44ef-ab1d-a0512fbf18d4"],
  $Line = 0; Null]], "ExampleSection",
 CellID->449541550,ExpressionUUID->"04fbd262-c5c3-4c6c-843e-ea7b6662bd5d"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\"Normalization\"", "ExampleSubsection",ExpressionUUID->
   "89fcc8e4-4048-4720-848e-07bba120774c"],
  $Line = 0; Null]], "ExampleSubsection",
 CellID->456494623,ExpressionUUID->"bc55b132-9fb1-410f-a9fe-555e96e26fbf"],

Cell[TextData[{
 "NNMF factors can be normalized in two ways: (i) the Euclidean norms of the \
columns of the left factor are all equal to ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]],ExpressionUUID->
  "12ae166a-da92-470e-89d7-e67ea82429d1"],
 "; or (ii) the Euclidean norms of the rows of the right factor are all equal \
to ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]],ExpressionUUID->
  "2c2133af-7270-4380-98d8-55300f466700"],
 ". Here is a table that shows NNMF factors for different normalization \
specifications:"
}], "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785666196534772*^9, 3.785666316063375*^9}, {
  3.785695009154702*^9, 3.785695009442773*^9}, {3.785695111743532*^9, 
  3.785695115484721*^9}, {3.785711099449452*^9, 3.7857110994858637`*^9}, {
  3.7858483161824217`*^9, 3.785848316645729*^9}},
 CellID->770586524,ExpressionUUID->"2dbdf6e2-c39a-4cb2-bea4-a99ae67383bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "mat", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SeedRandom", "[", "7", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"mat", "=", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"10", ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "3"}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Multicolumn", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"SeedRandom", "[", "121", "]"}], ";", "\[IndentingNewLine]", 
         
         RowBox[{
          RowBox[{"{", 
           RowBox[{"W", ",", "H"}], "}"}], "=", 
          RowBox[{"NonNegativeMatrixFactorization", "[", 
           RowBox[{"mat", ",", "2", ",", 
            RowBox[{"\"\<Normalization\>\"", "\[Rule]", "nspec"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"Grid", "[", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Style", "[", 
                RowBox[{"nspec", ",", "Bold", ",", "Blue"}], "]"}], ",", 
               "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Labeled", "[", 
                RowBox[{
                 RowBox[{"MatrixForm", "[", "W", "]"}], ",", "\"\<W\>\"", ",",
                  "Top"}], "]"}], ",", 
               RowBox[{"Labeled", "[", 
                RowBox[{
                 RowBox[{"MatrixForm", "[", "H", "]"}], ",", "\"\<H\>\"", ",",
                  "Top"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"\"\<Norm/@Transpose[W]:\>\"", ",", 
               RowBox[{"Norm", "/@", 
                RowBox[{"Transpose", "[", "W", "]"}]}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"\"\<Norm/@H:\>\"", ",", 
               RowBox[{"Norm", "/@", "H"}]}], "}"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Dividers", "\[Rule]", "All"}], ",", 
           RowBox[{"FrameStyle", "\[Rule]", 
            RowBox[{"GrayLevel", "[", "0.8", "]"}]}], ",", 
           RowBox[{"Alignment", "\[Rule]", "Left"}]}], "\[IndentingNewLine]", 
          "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"nspec", ",", 
          RowBox[{"{", 
           RowBox[{
           "Automatic", ",", "Left", ",", "Right", ",", "True", ",", "False", 
            ",", "None"}], "}"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "2", ",", 
      RowBox[{"Dividers", "\[Rule]", "All"}]}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785664322399908*^9, 3.7856645177712584`*^9}, {
   3.785664555651314*^9, 3.78566455920547*^9}, {3.785666327062461*^9, 
   3.785666623829341*^9}, {3.7856666634185543`*^9, 3.785666681407844*^9}, {
   3.785667974191176*^9, 3.785667980342513*^9}, {3.785669895341577*^9, 
   3.7856699089073277`*^9}, 3.785711019394114*^9},
 CellLabel->"In[1]:=",
 CellID->1769929472,ExpressionUUID->"4716273a-b279-4223-a39b-1cba9e849f11"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox["Automatic",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]], "\[SpanFromLeft]"},
        {
         TemplateBox[{
           TagBox[
            RowBox[{"(", "\[NoBreak]", 
              
              GridBox[{{"0.016344237151199675`", "0.7653981963977003`"}, {
                "0.7644636626797545`", "0.5668385929000604`"}, {
                "0.47025144526345475`", "0.1396852015928201`"}, {
                "0.44067193305432095`", "0.2708277220045993`"}}, RowSpacings -> 
               1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
               ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
            Function[BoxForm`e$, 
             MatrixForm[BoxForm`e$]]], "\"W\""},
          "Labeled",
          DisplayFunction->(GridBox[{{
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {2, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2, ",", "Top", ",", 
               RowBox[{"{", "}"}]}], "]"}]& )], 
         TemplateBox[{
           TagBox[
            RowBox[{"(", "\[NoBreak]", 
              
              GridBox[{{
                "9.064268072242836`", "3.6909817907933453`", 
                 "7.082224365211055`"}, {
                "5.069043145299343`", "9.063084833332168`", 
                 "5.044216991798512`"}}, RowSpacings -> 1, ColumnSpacings -> 
               1, RowAlignments -> Baseline, ColumnAlignments -> Center], 
              "\[NoBreak]", ")"}], 
            Function[BoxForm`e$, 
             MatrixForm[BoxForm`e$]]], "\"H\""},
          "Labeled",
          DisplayFunction->(GridBox[{{
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {2, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2, ",", "Top", ",", 
               RowBox[{"{", "}"}]}], "]"}]& )]},
        {"\<\"Norm/@Transpose[W]:\"\>", 
         RowBox[{"{", 
          RowBox[{"1.`", ",", "1.0000000000000002`"}], "}"}]},
        {"\<\"Norm/@H:\"\>", 
         RowBox[{"{", 
          RowBox[{"12.080654130660228`", ",", "11.544645086161404`"}], "}"}]}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[0.8],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"], 
     TagBox[GridBox[{
        {
         StyleBox["True",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]], "\[SpanFromLeft]"},
        {
         TemplateBox[{
           TagBox[
            RowBox[{"(", "\[NoBreak]", 
              
              GridBox[{{"0.016344237151199675`", "0.7653981963977003`"}, {
                "0.7644636626797545`", "0.5668385929000604`"}, {
                "0.47025144526345475`", "0.1396852015928201`"}, {
                "0.44067193305432095`", "0.2708277220045993`"}}, RowSpacings -> 
               1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
               ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
            Function[BoxForm`e$, 
             MatrixForm[BoxForm`e$]]], "\"W\""},
          "Labeled",
          DisplayFunction->(GridBox[{{
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {2, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2, ",", "Top", ",", 
               RowBox[{"{", "}"}]}], "]"}]& )], 
         TemplateBox[{
           TagBox[
            RowBox[{"(", "\[NoBreak]", 
              
              GridBox[{{
                "9.064268072242836`", "3.6909817907933453`", 
                 "7.082224365211055`"}, {
                "5.069043145299343`", "9.063084833332168`", 
                 "5.044216991798512`"}}, RowSpacings -> 1, ColumnSpacings -> 
               1, RowAlignments -> Baseline, ColumnAlignments -> Center], 
              "\[NoBreak]", ")"}], 
            Function[BoxForm`e$, 
             MatrixForm[BoxForm`e$]]], "\"H\""},
          "Labeled",
          DisplayFunction->(GridBox[{{
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {2, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2, ",", "Top", ",", 
               RowBox[{"{", "}"}]}], "]"}]& )]},
        {"\<\"Norm/@Transpose[W]:\"\>", 
         RowBox[{"{", 
          RowBox[{"1.`", ",", "1.0000000000000002`"}], "}"}]},
        {"\<\"Norm/@H:\"\>", 
         RowBox[{"{", 
          RowBox[{"12.080654130660228`", ",", "11.544645086161404`"}], "}"}]}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[0.8],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]},
    {
     TagBox[GridBox[{
        {
         StyleBox["Left",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]], "\[SpanFromLeft]"},
        {
         TemplateBox[{
           TagBox[
            RowBox[{"(", "\[NoBreak]", 
              
              GridBox[{{"0.016344237151199675`", "0.7653981963977003`"}, {
                "0.7644636626797545`", "0.5668385929000604`"}, {
                "0.47025144526345475`", "0.1396852015928201`"}, {
                "0.44067193305432095`", "0.2708277220045993`"}}, RowSpacings -> 
               1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
               ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
            Function[BoxForm`e$, 
             MatrixForm[BoxForm`e$]]], "\"W\""},
          "Labeled",
          DisplayFunction->(GridBox[{{
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {2, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2, ",", "Top", ",", 
               RowBox[{"{", "}"}]}], "]"}]& )], 
         TemplateBox[{
           TagBox[
            RowBox[{"(", "\[NoBreak]", 
              
              GridBox[{{
                "9.064268072242836`", "3.6909817907933453`", 
                 "7.082224365211055`"}, {
                "5.069043145299343`", "9.063084833332168`", 
                 "5.044216991798512`"}}, RowSpacings -> 1, ColumnSpacings -> 
               1, RowAlignments -> Baseline, ColumnAlignments -> Center], 
              "\[NoBreak]", ")"}], 
            Function[BoxForm`e$, 
             MatrixForm[BoxForm`e$]]], "\"H\""},
          "Labeled",
          DisplayFunction->(GridBox[{{
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {2, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2, ",", "Top", ",", 
               RowBox[{"{", "}"}]}], "]"}]& )]},
        {"\<\"Norm/@Transpose[W]:\"\>", 
         RowBox[{"{", 
          RowBox[{"1.`", ",", "1.0000000000000002`"}], "}"}]},
        {"\<\"Norm/@H:\"\>", 
         RowBox[{"{", 
          RowBox[{"12.080654130660228`", ",", "11.544645086161404`"}], "}"}]}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[0.8],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"], 
     TagBox[GridBox[{
        {
         StyleBox["False",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]], "\[SpanFromLeft]"},
        {
         TemplateBox[{
           TagBox[
            RowBox[{"(", "\[NoBreak]", 
              
              GridBox[{{"0.03424439149422252`", "1.5537115573174674`"}, {
                "1.60170173167068`", "1.1506476982404357`"}, {
                "0.9852692691224011`", "0.28355242163154515`"}, {
                "0.9232943732048291`", "0.5497637225968415`"}}, RowSpacings -> 
               1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
               ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
            Function[BoxForm`e$, 
             MatrixForm[
             SparseArray[
              Automatic, {4, 2}, 0., {
               1, {{0, 2, 4, 6, 8}, {{1}, {2}, {1}, {2}, {1}, {2}, {1}, {
                 2}}}, {0.03424439149422252, 1.5537115573174674`, 
                1.60170173167068, 1.1506476982404357`, 0.9852692691224011, 
                0.28355242163154515`, 0.9232943732048291, 
                0.5497637225968415}}]]]], "\"W\""},
          "Labeled",
          DisplayFunction->(GridBox[{{
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {2, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2, ",", "Top", ",", 
               RowBox[{"{", "}"}]}], "]"}]& )], 
         TemplateBox[{
           TagBox[
            RowBox[{"(", "\[NoBreak]", 
              
              GridBox[{{
                "4.326213447237893`", "1.7616397628109097`", 
                 "3.380219344897491`"}, {
                "2.497140774039748`", "4.4647082352972385`", 
                 "2.4849107735460687`"}}, RowSpacings -> 1, ColumnSpacings -> 
               1, RowAlignments -> Baseline, ColumnAlignments -> Center], 
              "\[NoBreak]", ")"}], 
            Function[BoxForm`e$, 
             MatrixForm[
             SparseArray[
              Automatic, {2, 3}, 0., {
               1, {{0, 3, 6}, {{1}, {2}, {3}, {1}, {2}, {3}}}, {
                4.326213447237893, 1.7616397628109097`, 3.380219344897491, 
                2.497140774039748, 4.4647082352972385`, 
                2.4849107735460687`}}]]]], "\"H\""},
          "Labeled",
          DisplayFunction->(GridBox[{{
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {2, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2, ",", "Top", ",", 
               RowBox[{"{", "}"}]}], "]"}]& )]},
        {"\<\"Norm/@Transpose[W]:\"\>", 
         RowBox[{"{", 
          RowBox[{"2.09519668476598`", ",", "2.0299388796967586`"}], "}"}]},
        {"\<\"Norm/@H:\"\>", 
         RowBox[{"{", 
          RowBox[{"5.765880701557887`", ",", "5.687188516673958`"}], "}"}]}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[0.8],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]},
    {
     TagBox[GridBox[{
        {
         StyleBox["Right",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]], "\[SpanFromLeft]"},
        {
         TemplateBox[{
           TagBox[
            RowBox[{"(", "\[NoBreak]", 
              
              GridBox[{{"0.1974490760531307`", "8.836250526999512`"}, {
                "9.235221104291822`", "6.5439503761703275`"}, {
                "5.6809450646708965`", "1.612616076178016`"}, {
                "5.3236052083187095`", "3.126609930036684`"}}, RowSpacings -> 
               1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
               ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
            Function[BoxForm`e$, 
             MatrixForm[BoxForm`e$]]], "\"W\""},
          "Labeled",
          DisplayFunction->(GridBox[{{
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {2, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2, ",", "Top", ",", 
               RowBox[{"{", "}"}]}], "]"}]& )], 
         TemplateBox[{
           TagBox[
            RowBox[{"(", "\[NoBreak]", 
              GridBox[{{
                "0.7503126878898121`", "0.30552830590735797`", 
                 "0.5862451063172687`"}, {
                "0.4390817653957693`", "0.7850466398656215`", 
                 "0.43693131786658634`"}}, RowSpacings -> 1, ColumnSpacings -> 
               1, RowAlignments -> Baseline, ColumnAlignments -> Center], 
              "\[NoBreak]", ")"}], 
            Function[BoxForm`e$, 
             MatrixForm[BoxForm`e$]]], "\"H\""},
          "Labeled",
          DisplayFunction->(GridBox[{{
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {2, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2, ",", "Top", ",", 
               RowBox[{"{", "}"}]}], "]"}]& )]},
        {"\<\"Norm/@Transpose[W]:\"\>", 
         RowBox[{"{", 
          RowBox[{"12.080654130660227`", ",", "11.544645086161408`"}], 
          "}"}]},
        {"\<\"Norm/@H:\"\>", 
         RowBox[{"{", 
          RowBox[{"1.`", ",", "1.`"}], "}"}]}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[0.8],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"], 
     TagBox[GridBox[{
        {
         StyleBox["None",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]], "\[SpanFromLeft]"},
        {
         TemplateBox[{
           TagBox[
            RowBox[{"(", "\[NoBreak]", 
              
              GridBox[{{"0.03424439149422252`", "1.5537115573174674`"}, {
                "1.60170173167068`", "1.1506476982404357`"}, {
                "0.9852692691224011`", "0.28355242163154515`"}, {
                "0.9232943732048291`", "0.5497637225968415`"}}, RowSpacings -> 
               1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
               ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
            Function[BoxForm`e$, 
             MatrixForm[
             SparseArray[
              Automatic, {4, 2}, 0., {
               1, {{0, 2, 4, 6, 8}, {{1}, {2}, {1}, {2}, {1}, {2}, {1}, {
                 2}}}, {0.03424439149422252, 1.5537115573174674`, 
                1.60170173167068, 1.1506476982404357`, 0.9852692691224011, 
                0.28355242163154515`, 0.9232943732048291, 
                0.5497637225968415}}]]]], "\"W\""},
          "Labeled",
          DisplayFunction->(GridBox[{{
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {2, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2, ",", "Top", ",", 
               RowBox[{"{", "}"}]}], "]"}]& )], 
         TemplateBox[{
           TagBox[
            RowBox[{"(", "\[NoBreak]", 
              
              GridBox[{{
                "4.326213447237893`", "1.7616397628109097`", 
                 "3.380219344897491`"}, {
                "2.497140774039748`", "4.4647082352972385`", 
                 "2.4849107735460687`"}}, RowSpacings -> 1, ColumnSpacings -> 
               1, RowAlignments -> Baseline, ColumnAlignments -> Center], 
              "\[NoBreak]", ")"}], 
            Function[BoxForm`e$, 
             MatrixForm[
             SparseArray[
              Automatic, {2, 3}, 0., {
               1, {{0, 3, 6}, {{1}, {2}, {3}, {1}, {2}, {3}}}, {
                4.326213447237893, 1.7616397628109097`, 3.380219344897491, 
                2.497140774039748, 4.4647082352972385`, 
                2.4849107735460687`}}]]]], "\"H\""},
          "Labeled",
          DisplayFunction->(GridBox[{{
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {2, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2, ",", "Top", ",", 
               RowBox[{"{", "}"}]}], "]"}]& )]},
        {"\<\"Norm/@Transpose[W]:\"\>", 
         RowBox[{"{", 
          RowBox[{"2.09519668476598`", ",", "2.0299388796967586`"}], "}"}]},
        {"\<\"Norm/@H:\"\>", 
         RowBox[{"{", 
          RowBox[{"5.765880701557887`", ",", "5.687188516673958`"}], "}"}]}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[0.8],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.7856643988140373`*^9, 3.7856645183881063`*^9}, {
   3.785664559805027*^9, 3.7856645872702913`*^9}, {3.7856663761158733`*^9, 
   3.7856663883218403`*^9}, {3.7856664338536243`*^9, 3.785666459554775*^9}, {
   3.785666542079516*^9, 3.785666610997426*^9}, {3.785666665883465*^9, 
   3.785666681795916*^9}, 3.7856679514406776`*^9, 3.785668034855126*^9, 
   3.785669911224827*^9, 3.785673941311749*^9, 3.7856776024461*^9, 
   3.785677673133099*^9, 3.7856779551554737`*^9, 3.785678014921954*^9, 
   3.785711129436689*^9, 3.787313845966156*^9, 3.8935376501976967`*^9},
 CellLabel->"Out[1]=",
 CellID->1198790237,ExpressionUUID->"e217586b-1322-425b-9f7d-32f8f1d7fef8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\"RegularizationParameter\"", "ExampleSubsection",ExpressionUUID->
   "b4429635-50a0-4639-87f9-367bbe961b48"],
  $Line = 0; Null]], "ExampleSubsection",
 CellID->1486520877,ExpressionUUID->"e2180ac4-4ac4-4a0e-9095-03c9530bad3c"],

Cell["\<\
The implemented NNMF algorithm uses the gradient descent algorithm. The \
regularization parameter controls the \[OpenCurlyDoubleQuote]learning rate\
\[CloseCurlyDoubleQuote] and can have dramatic influence on the number of \
iteration steps and approximation precision. Compute NNMF with different \
regularization multiplier parameters:\
\>", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.7856675806335917`*^9, 3.785667622136239*^9}, {
  3.7856778239301167`*^9, 3.785677883027018*^9}, {3.785695076514876*^9, 
  3.785695091547132*^9}, {3.785695145491943*^9, 3.785695148444275*^9}, {
  3.78571109952209*^9, 3.785711099571961*^9}, {3.7858466253703833`*^9, 
  3.785846638440763*^9}},
 CellID->1623621730,ExpressionUUID->"f183d3b3-a73f-4ab2-84c7-caa506dc7e7b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"res", "=", 
   RowBox[{"Association", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "\[Rule]", 
       RowBox[{"BlockRandom", "[", 
        RowBox[{
         RowBox[{"SeedRandom", "[", "22", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"NonNegativeMatrixFactorization", "[", 
          RowBox[{"mat", ",", "3", ",", 
           RowBox[{"\"\<RegularizationParameter\>\"", "\[Rule]", "#"}], ",", 
           RowBox[{"MaxSteps", "\[Rule]", "10"}], ",", 
           RowBox[{"PrecisionGoal", "\[Rule]", "3"}]}], "]"}]}], "]"}]}], 
      "&"}], "/@", 
     RowBox[{"{", 
      RowBox[{"0.01", ",", "2"}], "}"}]}], "]"}]}], ";"}]], "Input", \
"ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785667434746285*^9, 3.78566748209452*^9}, 
   3.785667524791098*^9, {3.785667626086967*^9, 3.785667651365439*^9}, {
   3.785667763205141*^9, 3.7856678282625103`*^9}, {3.78566786666157*^9, 
   3.7856678694719267`*^9}, {3.7856699469575253`*^9, 3.785669948190926*^9}, {
   3.785677502717441*^9, 3.785677560519589*^9}, {3.785677695795801*^9, 
   3.785677739747004*^9}, {3.785677790261525*^9, 3.785677807943562*^9}, {
   3.785677898803278*^9, 3.785677920491028*^9}, {3.785677972031027*^9, 
   3.7856779861582603`*^9}, {3.7856780231508207`*^9, 3.7856780584293327`*^9}, 
   3.785711019410749*^9},
 CellLabel->"In[1]:=",
 CellID->627374914,ExpressionUUID->"bc7aa2d9-5798-44d5-82d2-154ed9353cf1"],

Cell["Plot the results:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.7856675450667152`*^9, 3.7856675457137337`*^9}, {
  3.7856676524454393`*^9, 3.78566765314159*^9}},
 CellID->1322204138,ExpressionUUID->"6e752d4a-d6a8-446b-acee-0a58676c3e12"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"KeyValueMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"#1", ",", 
        RowBox[{"ListLinePlot", "[", 
         RowBox[{
          RowBox[{"Transpose", "[", 
           RowBox[{"#2", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
          RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "250"}], ",", 
          RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}]}], "]"}]}], 
       "}"}], "&"}], ",", "res"}], "]"}], ",", 
   RowBox[{"Alignment", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Center", ",", "Left"}], "}"}]}]}], "]"}]], "Input", \
"ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785667494602779*^9, 3.785667509702546*^9}},
 CellLabel->"In[2]:=",
 CellID->1212020367,ExpressionUUID->"2fc2f2c1-badf-4ff4-b8d2-3b8a69d3f921"],

Cell[BoxData[
 TagBox[GridBox[{
    {"0.01`", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[{{1., 0.0051871543600923034`}, {2., 0.3322634282072139}, {3.,
           0.06755756655347474}, {4., 0.4526956022896542}, {5., 
          0.4488281750013979}, {6., 0.27063774432404536`}, {7., 
          0.18442705849023647`}, {8., 0.10126042455312562`}, {9., 
          0.45561078653139586`}, {10., 0.3918380442975442}}]}, 
        {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[{{1., 0.12577725703809975`}, {2., 0.36778041091683955`}, {3.,
           0.44185089767077784`}, {4., 0.5112405423594077}, {5., 
          0.19114781026412858`}, {6., 0.3674220009128615}, {7., 
          0.18030914534386383`}, {8., 0.11523678593319783`}, {9., 
          0.0016934154888735848`}, {10., 0.418316098813984}}]}, 
        {RGBColor[0.560181, 0.691569, 0.194885], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[{{1., 0.4085559622303136}, {2., 0.09833482466550808}, {3., 
          0.38965073449490784`}, {4., 0.10489629164674254`}, {5., 
          0.24497399321704366`}, {6., 0.17922206558138692`}, {7., 
          0.30561650903632487`}, {8., 0.5610707688537346}, {9., 
          0.39869464595305026`}, {10., 0.035906489345865024`}}]}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.8125000000000021, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameStyle->Automatic,
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{Automatic, Automatic},
      GridLinesStyle->Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1], 
        AbsoluteDashing[{1, 2}]],
      ImageSize->250,
      Method->{
       "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
        "DefaultGraphicsInteraction" -> {
         "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
          "Effects" -> {
           "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
            "Droplines" -> {
             "freeformCursorMode" -> True, 
              "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
        "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
          Directive[
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.560181, 0.691569, 0.194885], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.922526, 0.385626, 0.209179], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.528488, 0.470624, 0.701351], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.772079, 0.431554, 0.102387], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.363898, 0.618501, 0.782349], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[1, 0.75, 0], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.647624, 0.37816, 0.614037], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.571589, 0.586483, 0.], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.915, 0.3325, 0.2125], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[
           0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
           AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
        "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
        "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& )}},
      PlotRange->{{0.8125000000000021, 10.}, {0, 0.5610707688537346}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}]},
    {"2", 
     GraphicsBox[{{}, {{}, {}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[{{1., 0.004467087496357266}, {2., 0.29952680803560056`}, {3.,
           0.03781338789867311}, {4., 0.367308540264437}, {5., 
          0.4205077435767335}, {6., 0.2715824682507193}, {7., 
          0.26466886083407304`}, {8., 0.09152071484574804}, {9., 
          0.5703719949441559}, {10., 0.3458101518390253}}]}, 
        {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[{{1., 0.13260528630357235`}, {2., 0.39687236343719307`}, {3.,
           0.4429340013519694}, {4., 0.4960064359374827}, {5., 
          0.3326934318905088}, {6., 0.29037795985905795`}, {7., 
          0.012351013241219143`}, {8., 0.17091372769039137`}, {9., 
          0.00667808822078656}, {10., 0.39784711289723546`}}]}, 
        {RGBColor[0.560181, 0.691569, 0.194885], PointSize[
          NCache[
           Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
         LineBox[{{1., 0.41558859997444425`}, {2., 0.048601184821446146`}, {
          3., 0.33173742589863264`}, {4., 0.08719512017917443}, {5., 
          0.2275388506463708}, {6., 0.15814160249806258`}, {7., 
          0.32818005656007054`}, {8., 0.5808690699781415}, {9., 
          0.4303384463246341}, {10., 0.013654022119978338`}}]}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.8125000000000021, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameStyle->Automatic,
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{Automatic, Automatic},
      GridLinesStyle->Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1], 
        AbsoluteDashing[{1, 2}]],
      ImageSize->250,
      Method->{
       "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
        "DefaultGraphicsInteraction" -> {
         "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
          "Effects" -> {
           "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
            "Droplines" -> {
             "freeformCursorMode" -> True, 
              "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
        "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
          Directive[
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.560181, 0.691569, 0.194885], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.922526, 0.385626, 0.209179], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.528488, 0.470624, 0.701351], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.772079, 0.431554, 0.102387], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.363898, 0.618501, 0.782349], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[1, 0.75, 0], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.647624, 0.37816, 0.614037], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.571589, 0.586483, 0.], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.915, 0.3325, 0.2125], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[
           0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
           AbsoluteThickness[1.6]], 
          Directive[
           RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
           AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
        "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
        "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& )}},
      PlotRange->{{0.8125000000000021, 10.}, {0, 0.5808690699781415}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.785667502391385*^9, 3.7856675271314907`*^9}, {
   3.785667628648822*^9, 3.785667654740451*^9}, {3.785667765091097*^9, 
   3.785667829974391*^9}, 3.785668023314742*^9, {3.7856699250106688`*^9, 
   3.785669950521199*^9}, 3.785673941522965*^9, 3.7856775627355013`*^9, 
   3.7856776231826363`*^9, 3.785677682734023*^9, {3.785677734180147*^9, 
   3.785677741475595*^9}, {3.7856777921732483`*^9, 3.785677809915319*^9}, {
   3.785677900842868*^9, 3.785677922488586*^9}, {3.7856779586151876`*^9, 
   3.785678060121814*^9}, 3.78571112962743*^9, 3.787313846184607*^9, 
   3.893537650253892*^9},
 CellLabel->"Out[2]=",
 CellID->375937105,ExpressionUUID->"0a919244-4b69-41da-860a-ac73f5e5bd3c"]
}, Open  ]],

Cell["Here are the corresponding norms:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.7856678534065237`*^9, 3.7856678602351007`*^9}},
 CellID->891070526,ExpressionUUID->"ac79f906-364b-4d63-8696-8914869f1356"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Norm", "[", 
      RowBox[{"#", "-", "mat"}], "]"}], "/", 
     RowBox[{"Norm", "[", "mat", "]"}]}], "&"}], ",", 
   RowBox[{"Dot", "@@@", "res"}]}], "]"}]], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.7856676752422523`*^9, 3.78566775464119*^9}},
 CellLabel->"In[3]:=",
 CellID->266721192,ExpressionUUID->"addd4726-2d13-469f-9c31-a03db587736e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"0.01`", "\[Rule]", "0.05460855505506354`"}], ",", 
   RowBox[{"2", "\[Rule]", "0.08755178062275853`"}]}], 
  "\[RightAssociation]"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.785667675773066*^9, 3.785667832431798*^9}, 
   3.785669953247593*^9, 3.7856739415839567`*^9, 3.785677746934099*^9, {
   3.785677796593194*^9, 3.785677812102324*^9}, {3.785677902630419*^9, 
   3.785677928019713*^9}, {3.7856779638816147`*^9, 3.7856780618153152`*^9}, 
   3.785711129642202*^9, 3.787313846205668*^9, 3.893537650273305*^9},
 CellLabel->"Out[3]=",
 CellID->478034261,ExpressionUUID->"d692b3f1-41e0-414b-bd04-40e39074b1b1"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "Applications", "ExampleSection",ExpressionUUID->
   "b65e1fcc-024e-4575-a557-01ed430f70fc"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1385757804,ExpressionUUID->"3ad2d85e-6e3f-4887-b0f7-19186bf3b6fb"],

Cell["\<\
One of the main motivations for developing NNMF algorithms is the easier \
interpretation of extracted topics in the framework of latent semantic \
analysis. The following code illustrates the extraction of topics over a \
dataset of movie reviews.\
\>", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785672655381892*^9, 3.785672726932308*^9}, {
   3.785672907373509*^9, 3.785672909431726*^9}, 3.785677218817123*^9, 
   3.7857110996081676`*^9, {3.78584665112881*^9, 3.7858466574004173`*^9}},
 CellID->1225356771,ExpressionUUID->"03ee4c75-dea0-454e-9977-c0a15fd0dc1e"],

Cell["Start with a movie reviews dataset:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785660626751655*^9, 3.7856606392391*^9}, {
  3.7856729304811907`*^9, 3.785672930604643*^9}, {3.7856952235888557`*^9, 
  3.785695225597563*^9}},
 CellID->804840354,ExpressionUUID->"92b45b8e-ac1e-4c6c-8f1c-b7768aa6113d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"movieReviews", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<MovieReview\>\""}], "}"}], 
     ",", "\"\<Data\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "[", "movieReviews", "]"}]}], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.7852452397088757`*^9, 3.7852452431977453`*^9}, {
  3.785245358176107*^9, 3.785245389530786*^9}, {3.78524553676087*^9, 
  3.7852455469849873`*^9}, {3.785245608020293*^9, 3.78524562788797*^9}, {
  3.785595442552814*^9, 3.785595443883464*^9}},
 CellLabel->"In[1]:=",
 CellID->1502290288,ExpressionUUID->"83c58ede-4a23-4d62-a722-d6a0d02aeb37"],

Cell[BoxData[
 RowBox[{"{", "10662", "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.785595406294289*^9, 3.78559555869774*^9, 3.785597349772854*^9, {
   3.785597729960862*^9, 3.785597748741289*^9}, {3.7855978011176653`*^9, 
   3.785597829277995*^9}, 3.7855986026700478`*^9, 3.7856607501080923`*^9, 
   3.785664587727928*^9, 3.78566795197189*^9, 3.785669967761723*^9, 
   3.78567394204468*^9, 3.785676125362938*^9, 3.785711131535802*^9, 
   3.787313846775248*^9, 3.8935376523607607`*^9},
 CellLabel->"Out[2]=",
 CellID->585501200,ExpressionUUID->"712011ee-4f90-4238-af62-dadcfbe0f144"]
}, Open  ]],

Cell["\<\
Change the labels \[OpenCurlyDoubleQuote]positive\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]negative\[CloseCurlyDoubleQuote] to have the prefix \
\[OpenCurlyDoubleQuote]tag:\[CloseCurlyDoubleQuote]:\
\>", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785660644888629*^9, 3.785660705480215*^9}, {
   3.785678434648733*^9, 3.78567844304073*^9}, 3.785859745595611*^9},
 CellID->2113275814,ExpressionUUID->"f7fbe81c-5807-45d0-9da2-17aae6cfb7a7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"movieReviews", "\[LeftDoubleBracket]", 
    RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"\"\<tag:\>\"", "<>", "#"}], "&"}], "/@", 
    RowBox[{"movieReviews", "\[LeftDoubleBracket]", 
     RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}]}]}], ";"}]], "Input",\
 "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785597620243944*^9, 3.785597639040452*^9}},
 CellLabel->"In[3]:=",
 CellID->1166177100,ExpressionUUID->"651acfcb-1228-4977-8985-473b01a2983d"],

Cell[TextData[{
 "Concatenate to each review the corresponding label and create an ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Association", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Association",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "Text", "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "08172670-4152-4b62-8f28-f025b9a34d40"],
 ":"
}], "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.78566071083517*^9, 3.7856607372168303`*^9}, {
  3.785660768053651*^9, 3.785660823967106*^9}, {3.7856952386699333`*^9, 
  3.785695246286139*^9}},
 CellID->470174977,ExpressionUUID->"be8beb92-1ac7-4241-a526-a6e703cc16b7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"aMovieReviews", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"Length", "[", "movieReviews", "]"}], "]"}], "\[Rule]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"StringRiffle", "[", 
         RowBox[{
          RowBox[{"List", "@@", "#"}], ",", "\"\< \>\""}], "]"}], "&"}], ",", 
       "movieReviews"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"aMovieReviews", ",", "2"}], "]"}]}], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785595460844582*^9, 3.785595482603747*^9}, {
  3.785597603750988*^9, 3.78559766776442*^9}, {3.785597708762352*^9, 
  3.785597713949771*^9}, {3.7855977440862722`*^9, 3.7855977455459642`*^9}, {
  3.785660741144562*^9, 3.785660745845913*^9}},
 CellLabel->"In[4]:=",
 CellID->1283147187,ExpressionUUID->"783d46c8-3ebf-4604-8b0f-21990ea75418"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
   "4280", "\[Rule]", "\<\"the importance of being earnest , so thick with \
wit it plays like a reading from bartlett's familiar quotations \
tag:positive\"\>"}], ",", 
   RowBox[{
   "1777", "\[Rule]", "\<\"leguizamo and jones are both excellent and the \
rest of the cast is uniformly superb .  tag:positive\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.7856607522896843`*^9, 3.785664587918936*^9, 
  3.785667952122755*^9, 3.785669967971312*^9, 3.785673942232912*^9, 
  3.785676125582129*^9, 3.785711131795807*^9, 3.787313846922743*^9, 
  3.893537652480598*^9},
 CellLabel->"Out[5]=",
 CellID->748597846,ExpressionUUID->"c957e447-6e88-4be7-8df6-a8f70e47a893"]
}, Open  ]],

Cell["Select movie reviews that are nontrivial:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.7856608321006203`*^9, 3.785660844474959*^9}, 
   3.7858467730898314`*^9},
 CellID->1430442702,ExpressionUUID->"0aa39b1a-592a-4b45-8f52-02b2efd652dd"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"aMovieReviews", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"aMovieReviews", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"StringQ", "[", "#", "]"}], "&&", 
       RowBox[{
        RowBox[{"StringLength", "[", "#", "]"}], ">", "10"}]}], "&"}]}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"aMovieReviews", ",", "2"}], "]"}]}], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785596094591289*^9, 3.78559612514648*^9}, 
   3.785660849553393*^9},
 CellLabel->"In[6]:=",
 CellID->931105148,ExpressionUUID->"507683fc-272c-40a6-a11c-27e912bdc408"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
   "4904", "\[Rule]", "\<\"miller has crafted an intriguing story of maternal \
instincts and misguided acts of affection .  tag:positive\"\>"}], ",", 
   RowBox[{
   "10139", "\[Rule]", "\<\"a reworking of die hard and cliffhanger but it's \
nowhere near as exciting as either .  tag:negative\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.785597696422073*^9, 3.7855977489751062`*^9}, {
   3.785597801361651*^9, 3.785597829509417*^9}, 3.785598602860065*^9, 
   3.785660850928535*^9, 3.785664587964426*^9, 3.7856679521776543`*^9, 
   3.785669968033784*^9, 3.7856739422981577`*^9, 3.785676125650062*^9, 
   3.785711131839175*^9, 3.787313846964072*^9, 3.8935376524994307`*^9},
 CellLabel->"Out[7]=",
 CellID->1724793596,ExpressionUUID->"b13c9601-6dd6-44f2-bd60-2db700c42484"]
}, Open  ]],

Cell["Split each review into words and delete stopwords:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785660857807086*^9, 3.785660873905662*^9}, 
   3.785846780497834*^9},
 CellID->327190803,ExpressionUUID->"e5830fbb-4112-467d-9fed-75636059daec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"aMovieReviews2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"DeleteStopwords", "[", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"StringSplit", "[", "#", "]"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"StringLength", "[", "#", "]"}], ">", "0"}], "&"}]}], "]"}],
       "]"}], "&"}], "/@", "aMovieReviews"}]}], ";"}]], "Input", \
"ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785595405823574*^9, 3.78559542995477*^9}, {
  3.785595491463497*^9, 3.785595541273325*^9}, {3.7855955907860823`*^9, 
  3.785595598831731*^9}, {3.7855962128550873`*^9, 3.785596214158166*^9}},
 CellLabel->"In[8]:=",
 CellID->1671851718,ExpressionUUID->"ba234a65-f6cd-4daa-befe-7f36aafe1a53"],

Cell["\<\
Convert the movie reviews association into a list of ID-word pairs (\
\[OpenCurlyDoubleQuote]long form\[CloseCurlyDoubleQuote]):\
\>", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.7856608815225267`*^9, 3.785660923609879*^9}, {
  3.7858597854053583`*^9, 3.785859787627619*^9}},
 CellID->54083485,ExpressionUUID->"62b92c4c-960e-406b-8776-7e4cd0441ecc"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"lsLongForm", "=", 
   RowBox[{"Join", "@@", 
    RowBox[{"MapThread", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Thread", "[", 
        RowBox[{"{", "##", "}"}], "]"}], "&"}], ",", 
      RowBox[{"Transpose", "[", 
       RowBox[{"List", "@@@", 
        RowBox[{"Normal", "[", "aMovieReviews2", "]"}]}], "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"lsLongForm", ",", "4"}], "]"}]}], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785596615814163*^9, 3.785596623560504*^9}, {
  3.7856609287069883`*^9, 3.7856609365591707`*^9}},
 CellLabel->"In[9]:=",
 CellID->997263385,ExpressionUUID->"4352ec80-578f-4fea-b60f-c7ede2a00988"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"6805", ",", "\<\"film\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3775", ",", "\<\"dignity\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1536", ",", "\<\".\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3723", ",", "\<\"enjoyed\"\>"}], "}"}]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.785660932419375*^9, 3.7856609368980217`*^9}, 
   3.785664589970113*^9, 3.785667954249359*^9, 3.7856699700152197`*^9, 
   3.785673944356091*^9, 3.7856759786910048`*^9, 3.785676127794276*^9, 
   3.7857111341118917`*^9, 3.787313848884141*^9, 3.893537653596137*^9},
 CellLabel->"Out[10]=",
 CellID->1871700766,ExpressionUUID->"45b15616-48b7-47e8-bf1e-7faca11f0d7a"]
}, Open  ]],

Cell["Replace each word with its Porter stem:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.78567440093797*^9, 3.7856744337309427`*^9}},
 CellID->1930105902,ExpressionUUID->"e08072ec-5c66-459a-978b-304e2c31642f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"aStemRules", "=", 
    RowBox[{"Dispatch", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Thread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"#", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"WordData", "[", 
             RowBox[{"#", ",", "\"\<PorterStem\>\""}], "]"}], "&"}], "/@", 
           "#"}]}], "]"}], "]"}], "&"}], "@", 
      RowBox[{"Union", "[", 
       RowBox[{"lsLongForm", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}]}], 
     "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lsLongForm", "\[LeftDoubleBracket]", 
     RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "=", 
    RowBox[{
     RowBox[{"lsLongForm", "\[LeftDoubleBracket]", 
      RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "/.", 
     "aStemRules"}]}], ";"}], "\[IndentingNewLine]", "]"}]], "Input", \
"ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.7856744354433613`*^9, 3.785674610787018*^9}, {
  3.785675943461871*^9, 3.785675949021546*^9}, {3.785676115769747*^9, 
  3.7856761202005*^9}},
 CellLabel->"In[11]:=",
 CellID->1623420469,ExpressionUUID->"1cee4445-9f16-42da-8256-c466e2bf16ae"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.972655`", ",", "Null"}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.785676130893379*^9, 3.7857111407768717`*^9, 
  3.787313854468231*^9, 3.893537656577153*^9},
 CellLabel->"Out[11]=",
 CellID->530688487,ExpressionUUID->"e8a4f95f-311a-4ec7-a3c3-457a1e7de944"]
}, Open  ]],

Cell[TextData[{
 "Find the frequency of appearance of all unique word stems and pick words \
that appear in more than ",
 Cell[BoxData[
  FormBox["30", TraditionalForm]],ExpressionUUID->
  "3d82e23c-9ac6-46b7-ba02-1e8716204e1e"],
 " reviews:"
}], "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.7856609450977287`*^9, 3.785660989783679*^9}, {
  3.785674134127427*^9, 3.7856741345450373`*^9}, {3.785674619517325*^9, 
  3.785674620753495*^9}, {3.7856953108464813`*^9, 3.785695316734454*^9}},
 CellID->1888711604,ExpressionUUID->"f179d5bd-8e42-44d1-ba86-43963f6b23f1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"aTallies", "=", 
   RowBox[{"Association", "[", 
    RowBox[{"Rule", "@@@", 
     RowBox[{"Tally", "[", 
      RowBox[{"lsLongForm", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}]}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"aTallies", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"aTallies", ",", 
     RowBox[{
      RowBox[{"#", ">", "20"}], "&"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "aTallies", "]"}]}], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.78559663435375*^9, 3.7855967213106127`*^9}, {
  3.7855977922470512`*^9, 3.785597793910042*^9}, {3.785597824682659*^9, 
  3.785597825805086*^9}, {3.785673932268095*^9, 3.785673935055588*^9}, {
  3.785674130349924*^9, 3.7856741304372272`*^9}, {3.785675973928862*^9, 
  3.785675974194964*^9}},
 CellLabel->"In[12]:=",
 CellID->943257372,ExpressionUUID->"3b3cfd1b-6621-4342-9217-4410223d30f6"],

Cell[BoxData["981"], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.785596645128961*^9, 3.785596653114983*^9}, {
   3.785596710339841*^9, 3.785596722305129*^9}, 3.785597319280776*^9, 
   3.785597351893972*^9, 3.7855977584234753`*^9, {3.785597803467252*^9, 
   3.7855978317041893`*^9}, 3.7855986050508137`*^9, 3.785660991485339*^9, 
   3.7856645900988207`*^9, 3.7856679544113693`*^9, 3.785669970156973*^9, 
   3.785673944518757*^9, {3.785674130977374*^9, 3.785674142800407*^9}, {
   3.785674612800791*^9, 3.785674624299253*^9}, {3.7856759745003977`*^9, 
   3.785675981712384*^9}, 3.7856761310494823`*^9, 3.785711140950086*^9, 
   3.787313854599928*^9, 3.8935376566613197`*^9},
 CellLabel->"Out[14]=",
 CellID->781815018,ExpressionUUID->"83a88ab2-4424-4566-83d8-22eb5d8be9b6"]
}, Open  ]],

Cell["\<\
Filter the ID-word pairs list to contain only words that are sufficiently \
popular:\
\>", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.7856609964998407`*^9, 3.785661042760707*^9}, {
  3.785695324519809*^9, 3.785695336843808*^9}, {3.785859801324168*^9, 
  3.78585980188384*^9}},
 CellID->251185901,ExpressionUUID->"4b2dda61-91c6-481c-a4ee-e5efe53db23b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lsLongForm", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"lsLongForm", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"KeyExistsQ", "[", 
        RowBox[{"aTallies", ",", 
         RowBox[{
         "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], "]"}],
        "&&", 
       RowBox[{
        RowBox[{"StringLength", "[", 
         RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "]"}], ">", "2"}]}], "&"}]}], "]"}]}], ";"}]], "Input", \
"ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.7855967249526567`*^9, 3.785596727561926*^9}, {
   3.7855967705934553`*^9, 3.785596803870709*^9}, {3.785597304473031*^9, 
   3.785597313515656*^9}, 3.785597344386421*^9, {3.785598598965315*^9, 
   3.7855985994134607`*^9}},
 CellLabel->"In[15]:=",
 CellID->985271493,ExpressionUUID->"06546a3b-2963-4a02-8a70-fd372a0cb0ef"],

Cell["Compute an ID-word contingency matrix:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.78566104795823*^9, 3.785661071684894*^9}, 
   3.7858468329630938`*^9, {3.785859812372232*^9, 3.7858598129399023`*^9}},
 CellID->1477660171,ExpressionUUID->"c30e8c57-ff59-48f8-b767-1bfce3b0a5fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ctObj", "=", 
   RowBox[{
    RowBox[{"ResourceFunction", "[", "\"\<CrossTabulate\>\"", "]"}], "[", 
    RowBox[{"lsLongForm", ",", 
     RowBox[{"\"\<Sparse\>\"", "\[Rule]", "True"}]}], "]"}]}], ";"}]], "Input",\
 "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785595605359294*^9, 3.785595703367155*^9}, {
   3.785595748733841*^9, 3.785595765772644*^9}, 3.785596217209046*^9, {
   3.7855966137728786`*^9, 3.785596630600382*^9}, {3.7855968400303392`*^9, 
   3.7855968432687883`*^9}, {3.785669793089232*^9, 3.785669794212097*^9}},
 CellLabel->"In[16]:=",
 CellID->1833359859,ExpressionUUID->"0ea8ebe0-935c-4152-9e81-d96b5bbd731f"],

Cell["Here is a sample of the contingency matrix as a dataset:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785673234505121*^9, 3.785673261336884*^9}, {
  3.785695358199655*^9, 3.785695358487184*^9}, {3.785846859498535*^9, 
  3.7858468597620153`*^9}},
 CellID->1281284094,ExpressionUUID->"dd7b86b1-18dc-472d-9c9e-ee62ef4d96dd"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "9938", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<CrossTabulate\>\"", "]"}], "[", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"lsLongForm", ",", "12"}], "]"}], "]"}]}], "Input", "ExampleInput",
 
 TaggingRules->{},
 CellChangeTimes->{{3.785595605359294*^9, 3.785595703367155*^9}, {
   3.785595748733841*^9, 3.785595765772644*^9}, 3.785596217209046*^9, {
   3.7855966137728786`*^9, 3.785596630600382*^9}, {3.7855968400303392`*^9, 
   3.7855968432687883`*^9}, {3.785669793089232*^9, 3.785669794212097*^9}, {
   3.785673191083125*^9, 3.785673286694831*^9}},
 CellLabel->"In[17]:=",
 CellID->1469924403,ExpressionUUID->"45e57e56-bcbe-4423-9850-9465f6d82614"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      2241 -> <|"apart" -> 0, "charm" -> 1, "depict" -> 0, "develop" -> 0, 
         "effort" -> 0, "film" -> 0, "lack" -> 0, "need" -> 0, "new" -> 0, 
         "nice" -> 0, "purpos" -> 0, "time" -> 0|>, 
       2913 -> <|
        "apart" -> 0, "charm" -> 0, "depict" -> 0, "develop" -> 0, "effort" -> 
         0, "film" -> 0, "lack" -> 0, "need" -> 0, "new" -> 0, "nice" -> 0, 
         "purpos" -> 0, "time" -> 1|>, 
       3613 -> <|
        "apart" -> 0, "charm" -> 0, "depict" -> 0, "develop" -> 0, "effort" -> 
         1, "film" -> 0, "lack" -> 0, "need" -> 0, "new" -> 0, "nice" -> 0, 
         "purpos" -> 0, "time" -> 0|>, 
       3720 -> <|
        "apart" -> 0, "charm" -> 0, "depict" -> 0, "develop" -> 1, "effort" -> 
         0, "film" -> 0, "lack" -> 0, "need" -> 0, "new" -> 0, "nice" -> 0, 
         "purpos" -> 0, "time" -> 0|>, 
       4650 -> <|
        "apart" -> 0, "charm" -> 0, "depict" -> 0, "develop" -> 0, "effort" -> 
         0, "film" -> 1, "lack" -> 0, "need" -> 0, "new" -> 0, "nice" -> 0, 
         "purpos" -> 0, "time" -> 0|>, 
       6867 -> <|
        "apart" -> 1, "charm" -> 0, "depict" -> 0, "develop" -> 0, "effort" -> 
         0, "film" -> 0, "lack" -> 0, "need" -> 0, "new" -> 0, "nice" -> 0, 
         "purpos" -> 0, "time" -> 0|>, 
       6951 -> <|
        "apart" -> 0, "charm" -> 0, "depict" -> 1, "develop" -> 0, "effort" -> 
         0, "film" -> 0, "lack" -> 0, "need" -> 0, "new" -> 0, "nice" -> 0, 
         "purpos" -> 0, "time" -> 0|>, 
       8631 -> <|
        "apart" -> 0, "charm" -> 0, "depict" -> 0, "develop" -> 0, "effort" -> 
         0, "film" -> 0, "lack" -> 1, "need" -> 0, "new" -> 0, "nice" -> 0, 
         "purpos" -> 0, "time" -> 0|>, 
       8731 -> <|
        "apart" -> 0, "charm" -> 0, "depict" -> 0, "develop" -> 0, "effort" -> 
         0, "film" -> 0, "lack" -> 0, "need" -> 0, "new" -> 1, "nice" -> 0, 
         "purpos" -> 0, "time" -> 0|>, 
       10142 -> <|
        "apart" -> 0, "charm" -> 0, "depict" -> 0, "develop" -> 0, "effort" -> 
         0, "film" -> 0, "lack" -> 0, "need" -> 0, "new" -> 0, "nice" -> 1, 
         "purpos" -> 0, "time" -> 0|>, 
       10632 -> <|
        "apart" -> 0, "charm" -> 0, "depict" -> 0, "develop" -> 0, "effort" -> 
         0, "film" -> 0, "lack" -> 0, "need" -> 1, "new" -> 0, "nice" -> 0, 
         "purpos" -> 0, "time" -> 0|>, 
       10645 -> <|
        "apart" -> 0, "charm" -> 0, "depict" -> 0, "develop" -> 0, "effort" -> 
         0, "film" -> 0, "lack" -> 0, "need" -> 0, "new" -> 0, "nice" -> 0, 
         "purpos" -> 1, "time" -> 0|>|>, "AllowEmbedding" -> True, 
     "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[0]} -> 1, {All, "apart"} -> 
        1, {All, "charm"} -> 1, {All, "depict"} -> 1, {All, "develop"} -> 
        1, {All, "effort"} -> 1, {All, "film"} -> 1, {All, "lack"} -> 
        1, {All, "need"} -> 1, {All, "new"} -> 1, {All, "nice"} -> 
        1, {All, "purpos"} -> 1, {All, "time"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[34], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "apart" -> TypeSystem`PackageScope`AtomShape[34], "charm" -> 
             TypeSystem`PackageScope`AtomShape[34], "depict" -> 
             TypeSystem`PackageScope`AtomShape[34], "develop" -> 
             TypeSystem`PackageScope`AtomShape[34], "effort" -> 
             TypeSystem`PackageScope`AtomShape[34], "film" -> 
             TypeSystem`PackageScope`AtomShape[34], "lack" -> 
             TypeSystem`PackageScope`AtomShape[34], "need" -> 
             TypeSystem`PackageScope`AtomShape[34], "new" -> 
             TypeSystem`PackageScope`AtomShape[34], "nice" -> 
             TypeSystem`PackageScope`AtomShape[34], "purpos" -> 
             TypeSystem`PackageScope`AtomShape[34], "time" -> 
             TypeSystem`PackageScope`AtomShape[34]|>], 
           DirectedInfinity[1], 10, {All}]]], 12, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[Integer], 
       TypeSystem`Struct[{
        "apart", "charm", "depict", "develop", "effort", "film", "lack", 
         "need", "new", "nice", "purpos", "time"}, {
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer]}], 12], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[0]} -> 1, {All, "apart"} -> 
        1, {All, "charm"} -> 1, {All, "depict"} -> 1, {All, "develop"} -> 
        1, {All, "effort"} -> 1, {All, "film"} -> 1, {All, "lack"} -> 
        1, {All, "need"} -> 1, {All, "new"} -> 1, {All, "nice"} -> 
        1, {All, "purpos"} -> 1, {All, "time"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[34], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "apart" -> TypeSystem`PackageScope`AtomShape[34], "charm" -> 
             TypeSystem`PackageScope`AtomShape[34], "depict" -> 
             TypeSystem`PackageScope`AtomShape[34], "develop" -> 
             TypeSystem`PackageScope`AtomShape[34], "effort" -> 
             TypeSystem`PackageScope`AtomShape[34], "film" -> 
             TypeSystem`PackageScope`AtomShape[34], "lack" -> 
             TypeSystem`PackageScope`AtomShape[34], "need" -> 
             TypeSystem`PackageScope`AtomShape[34], "new" -> 
             TypeSystem`PackageScope`AtomShape[34], "nice" -> 
             TypeSystem`PackageScope`AtomShape[34], "purpos" -> 
             TypeSystem`PackageScope`AtomShape[34], "time" -> 
             TypeSystem`PackageScope`AtomShape[34]|>], 
           DirectedInfinity[1], 10, {All}]]], 12, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[Integer], 
       TypeSystem`Struct[{
        "apart", "charm", "depict", "develop", "effort", "film", "lack", 
         "need", "new", "nice", "purpos", "time"}, {
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer]}], 12], "Path" -> {}, "DisplayedRowCount" -> 
     12, "DisplayedColumnCount" -> 10, "DataRowCount" -> 12, 
     "DataColumnCount" -> 12, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["apart", 
                  Style[
                  "apart", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "apart"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "apart"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["charm", 
                  Style[
                  "charm", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "charm"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "charm"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["depict", 
                  Style[
                  "depict", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "depict"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "depict"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["develop", 
                  Style[
                  "develop", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "develop"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "develop"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["effort", 
                  Style[
                  "effort", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "effort"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "effort"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["film", 
                  Style[
                  "film", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "film"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "film"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["lack", 
                  Style[
                  "lack", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "lack"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "lack"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["need", 
                  Style[
                  "need", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "need"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "need"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["new", 
                  Style[
                  "new", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "new"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "new"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["nice", 
                  Style[
                  "nice", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "nice"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "nice"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["2241"], 
                  Style[
                   RawBoxes["2241"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[2241]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2241]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2241], 
                 Key["apart"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2241], 
                 Key["charm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2241], 
                 Key["depict"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2241], 
                 Key["develop"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2241], 
                 Key["effort"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2241], 
                 Key["film"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2241], 
                 Key["lack"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2241], 
                 Key["need"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2241], 
                 Key["new"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2241], 
                 Key["nice"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["2913"], 
                  Style[
                   RawBoxes["2913"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[2913]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2913]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2913], 
                 Key["apart"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2913], 
                 Key["charm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2913], 
                 Key["depict"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2913], 
                 Key["develop"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2913], 
                 Key["effort"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2913], 
                 Key["film"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2913], 
                 Key["lack"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2913], 
                 Key["need"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2913], 
                 Key["new"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2913], 
                 Key["nice"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["3613"], 
                  Style[
                   RawBoxes["3613"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[3613]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3613]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3613], 
                 Key["apart"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3613], 
                 Key["charm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3613], 
                 Key["depict"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3613], 
                 Key["develop"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3613], 
                 Key["effort"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3613], 
                 Key["film"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3613], 
                 Key["lack"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3613], 
                 Key["need"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3613], 
                 Key["new"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3613], 
                 Key["nice"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["3720"], 
                  Style[
                   RawBoxes["3720"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[3720]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3720]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3720], 
                 Key["apart"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3720], 
                 Key["charm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3720], 
                 Key["depict"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3720], 
                 Key["develop"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3720], 
                 Key["effort"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3720], 
                 Key["film"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3720], 
                 Key["lack"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3720], 
                 Key["need"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3720], 
                 Key["new"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3720], 
                 Key["nice"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["4650"], 
                  Style[
                   RawBoxes["4650"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[4650]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4650]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4650], 
                 Key["apart"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4650], 
                 Key["charm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4650], 
                 Key["depict"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4650], 
                 Key["develop"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4650], 
                 Key["effort"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4650], 
                 Key["film"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4650], 
                 Key["lack"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4650], 
                 Key["need"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4650], 
                 Key["new"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4650], 
                 Key["nice"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["6867"], 
                  Style[
                   RawBoxes["6867"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[6867]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6867]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6867], 
                 Key["apart"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6867], 
                 Key["charm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6867], 
                 Key["depict"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6867], 
                 Key["develop"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6867], 
                 Key["effort"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6867], 
                 Key["film"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6867], 
                 Key["lack"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6867], 
                 Key["need"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6867], 
                 Key["new"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6867], 
                 Key["nice"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["6951"], 
                  Style[
                   RawBoxes["6951"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[6951]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6951]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6951], 
                 Key["apart"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6951], 
                 Key["charm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6951], 
                 Key["depict"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6951], 
                 Key["develop"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6951], 
                 Key["effort"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6951], 
                 Key["film"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6951], 
                 Key["lack"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6951], 
                 Key["need"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6951], 
                 Key["new"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6951], 
                 Key["nice"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["8631"], 
                  Style[
                   RawBoxes["8631"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[8631]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8631]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8631], 
                 Key["apart"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8631], 
                 Key["charm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8631], 
                 Key["depict"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8631], 
                 Key["develop"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8631], 
                 Key["effort"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8631], 
                 Key["film"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8631], 
                 Key["lack"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8631], 
                 Key["need"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8631], 
                 Key["new"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8631], 
                 Key["nice"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["8731"], 
                  Style[
                   RawBoxes["8731"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[8731]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8731]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8731], 
                 Key["apart"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8731], 
                 Key["charm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8731], 
                 Key["depict"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8731], 
                 Key["develop"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8731], 
                 Key["effort"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8731], 
                 Key["film"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8731], 
                 Key["lack"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8731], 
                 Key["need"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8731], 
                 Key["new"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8731], 
                 Key["nice"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["10142"], 
                  Style[
                   RawBoxes["10142"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[10142]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10142]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10142], 
                 Key["apart"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10142], 
                 Key["charm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10142], 
                 Key["depict"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10142], 
                 Key["develop"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10142], 
                 Key["effort"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10142], 
                 Key["film"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10142], 
                 Key["lack"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10142], 
                 Key["need"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10142], 
                 Key["new"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10142], 
                 Key["nice"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["10632"], 
                  Style[
                   RawBoxes["10632"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[10632]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10632]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10632], 
                 Key["apart"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10632], 
                 Key["charm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10632], 
                 Key["depict"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10632], 
                 Key["develop"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10632], 
                 Key["effort"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10632], 
                 Key["film"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10632], 
                 Key["lack"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10632], 
                 Key["need"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10632], 
                 Key["new"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10632], 
                 Key["nice"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["10645"], 
                  Style[
                   RawBoxes["10645"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[10645]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10645]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10645], 
                 Key["apart"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10645], 
                 Key["charm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10645], 
                 Key["depict"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10645], 
                 Key["develop"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10645], 
                 Key["effort"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10645], 
                 Key["film"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10645], 
                 Key["lack"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10645], 
                 Key["need"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10645], 
                 Key["new"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10645], 
                 Key["nice"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 12, 1], {1, 12 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 12, 1], {1, 12 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[12, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[12, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 12, 1], {1, 12 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 12, 1], {1, 12 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{578., {255.193115234375, 261.806884765625}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{578., {255.193115234375, 261.806884765625}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.785673209600404*^9, 3.785673287338978*^9}, 
   3.785673945203374*^9, 3.785674143430685*^9, 3.7856746279907312`*^9, 
   3.7856759886840687`*^9, 3.785676131753536*^9, 3.785711144319425*^9, 
   3.7873138554608727`*^9, 3.89353765746719*^9},
 CellLabel->"Out[18]=",
 CellID->439868436,ExpressionUUID->"ab3780fb-54c9-4608-8e43-eb94854dd871"]
}, Open  ]],

Cell["Visualize the contingency matrix:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785661080820005*^9, 3.785661095175288*^9}, {
  3.785673298630917*^9, 3.7856733051118927`*^9}},
 CellID->1410481053,ExpressionUUID->"07fdc012-dd53-40c2-b7f1-d7797723acad"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"CTMatrixPlot", "[", 
    RowBox[{
     RowBox[{"x_Association", "/;", 
      RowBox[{"KeyExistsQ", "[", 
       RowBox[{"x", ",", "\"\<SparseMatrix\>\""}], "]"}]}], ",", "opts___"}], 
    "]"}], ":=", 
   RowBox[{"MatrixPlot", "[", 
    RowBox[{
     RowBox[{"x", "[", "\"\<SparseMatrix\>\"", "]"}], ",", 
     RowBox[{"Append", "[", 
      RowBox[{
       RowBox[{"{", "opts", "}"}], ",", 
       RowBox[{"FrameLabel", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"Keys", "[", "x", "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", "None"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"Keys", "[", "x", "]"}], "[", 
             RowBox[{"[", "3", "]"}], "]"}], ",", "None"}], "}"}]}], 
         "}"}]}]}], "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"CTMatrixPlot", "[", "ctObj", "]"}]}], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785595801739019*^9, 3.785595801740864*^9}, 
   3.78566107780961*^9, {3.785661473476013*^9, 3.7856616453681507`*^9}, {
   3.785661702263098*^9, 3.785661726749612*^9}, 3.7856698010673018`*^9},
 CellLabel->"In[19]:=",
 CellID->280650785,ExpressionUUID->"3eeef7f7-fda3-4013-9894-f0d034fabf95"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJzVnXnQldW15nGe+zomoBiDqCgGQUNuHMB9AwHHixhsQcUJh6QiSmKMxOh1
AOKASrBt0ahRr0KCQwxXjUMJAnKNMUjUEIzKEEU+xnMOgaASE+2mre6/up6u
+lX9dn1pqyjk1Kn3vO9+917Ds571rC4jRn3jgi06dOhw/qY/Z2/687/+/7S7
rlvw+oWtMmDQ4906zmqWJad81HnciNWFfn7ewAenX7VVq8xcvfDfBw9ulA+O
mb/0/SnLS4d9pt3c7/pmWfro9K9NGLW6XHvQ8Pnnz3mvDLx/5fwNf2qW1X0f
ev3qF9eUfc76r0M2+0pbvE7jxUtmrD62VZqXnvuve5/ULKf0n3zMlD6rymt7
/eoPI7q2yud/feBVJ8xulKtPO+DZF+euiJ+n69D7Sd+/vBz1wrBbWmXPvy3f
uOpfW+Wpo7//2IXz12ifW+8r3X9at/R9ep30OX1eep+fjh16zXZbN8v8u797
/g0jV5a9Hr//52d86Z14/Q6f/ffn/+vv2u8lfU73bfp+ei56nfgeb1lz/f6T
G+XXk4Z2+O6s5WWfSSfPfvCu+fh50/Xp+ry6+viBHx/ULKvWHXnzk9ttev4J
n9x006RF5fbjfvq94d9qlvGvj/rm7Z+uKh9+frtPf/TTd/H7Td+/6Z6rbpn2
SrP8U+9+zdMvWVPe3a/H4QecvizaE3od+r6sfUjfS9pv6TrU/tP7tPyF9Xm6
/xf69h9wy5i1ZfNf7DrhR+8sLK8PnN79tb8dG/dJuv7IDS8+dODkZjnihu06
3/Tu6rL9Ub+c2n/VUmy3qT2h7zddJ/2dnmvOKSN/fPJXW2XqL7Y+76c7Nsvi
f3rynsd+vLK8eO6lCw5Z0CzHHP3znV/5yZrypSPvvWzvucvKN456d8HTpVWG
j2+uO/VLzdJ7wGFXHrp0ZZnz8JuNFZe0yr8dcOfAR5Y0y2F3dblh2ydWx+8v
fXXVCz/auVX6tPr/dIsfNsrh6/uNOn3XFWX9yGcPW3twq2w/5b/Mueu9Rnln
m8G/f3mffP30+RPbbXvF1UNa5fFRr35xj9HNcuuY3fe7Z/KqcunPhs7c6cpW
+caR46++bcdW+donb33/koPWxO+P+XT2Xi/8fdN73/aCSwb0bJQlT53z6z+f
tDx+Pz1X+n56X2MGHvDl0ZNa5YvrTpl8wGWtsmzX5W8t/OdGXE/6vPF3w/Om
303vi65nWre0DvFzev2bx25+3VnNcsaSiz8a8vaqsstvB13zUJ934/PS303r
sG+vu3/w4cpmuavr9eWGZWvK9aOv3vuGW9vi+6LPRd8L3c/JPqT7vPvAH77/
iy80yx2PbfXy8W+tLJ9/4tRTe/9hYfx+uv/0+eYv7fvj+3/RLA9+b9UTJ265
pvxg5h/3PX7g+3n9Z5xx9nPHN8v2f53wmzsmrCrf7/T2Y9/bsCQ+F7Uz6fvp
/tM60N+l7916rnQukp1J65zeI11P+n3q16h9TuednseH7hv3yJgprXJ4l2+v
fuS2xeXph9/Y0OtfzsX2+cEPP17zx580y8kTth834bnV5QtjPrji3bFL8f4Z
cfvxh31zdrNsGPab97Y/aU15/e/PzX1y22XRjqX1TPuBrk86Rwe+0u2Du//S
LIO7vHruCzs2ypBhw6d0+bANn8f0XHTdlp726JRjL22WX8w58YBd91tdRm5z
6IE7/Y93q8dF6Trpd6n9j+8lnBfLf1F/nX43Xgfa53Teqf2hz5ue69JZ79xy
+9Gbvtd2z8THz1lVTj7p26/9fKsleB3o/VtxDl0f+r6s+/nyVwb/esydjfLf
F+65dc+blpfnN3xxwYkzfx+vQ+M6GqeluIu+d5o3pfdO4710P9Rf03NUO5+i
+XJaH+pn6brR9aR+IT3XtKN6XHldWVsuvK/bk8+cvaj0/uZWO7/XfQi28ynO
p/40xTk0Dkz7Ie2fdD8pTu67+bi2qZ1a5c0Fix4ef2+jzBl0zMSDRq7A7zHd
D7Xz6XdT/JnWM+1zasfSe7TsTPS/8JzS56X5MvWbaR1ovhbzKfi7aR0u6rdu
8fszGuWRjn1HbHXoirLTjes3jhyyIO4rei7SPrdwTprvWHl9ykdi/BbiSbpP
aLyRzu+KQ9pO6biwUfb4+sTl06etKCPnP3/HrOP+iM8j9bPUnlC7YeF16bmS
nbdwLetc0PiTfk7xGeov0ucX777Fy5t1Wlv2LBuv7f3YotJn6ciBX+swNMcz
4T7TPrTeF/VHNA6kcQVdZ2oH6POm+6Q4gIXH0vOV9g/93fQ5jW/p53QfpvdL
91XtOkt71S/oPrfwOnp+MY4X6n0p/txv/7MnPrGqUea+/dzUu/68oux1xRfP
X/31tzQ7QOPhhC9ZdXnqd+j5SnaG1n8tv0ZxHvre6frQPC7iihCXsPCi9Fzd
m2/tOmZ9q/zuT78Z9B8bF5Wvn/mHq/59wen4ff23U7/0g0uubpYxfyxn/fXk
1eWqkSs/973L38N1Byt+G35Yh6m77dwsf/rcoi1H3bWyfGvH9Tds//Y7ON+n
+S+9jhVvU3tLcST6vDgfD3muxSOy6jj0edN7p7wIq55Orx/xQImfQ+Mrym+h
+8R6v+n7aT3T9xN+op27sP4pHnj48Is6Xf1qo5z9+IX7vfedFWV6j6EvTxr0
Jo5vab5g4du0zkXjHAtnpvdP84Vkf6i9wvVfyQ5Qu5fwHBovRTsA6yMWP4fG
59S/z1u4rq3XuFZpdOl6c8eerTLvtMWT+o79f6wDjHMsnox1Lmi8QZ+X1isp
XkH9Pq2bW3wkK8+i60PtVfJ3ND+i/C6Ld2rxVeh+o/4l5Y+0Xk/PY/rcqltZ
8QCNcyy7YeHeVh5H7QPFzy0eKb1OOi90n5wz+vQPN79mk7+efeSz3ZYsLn0+
4+ech/GElKdY+5/GJ8k+WDzw2jxkeu5ovkbrgxb/xOKb0XzBwm0sHrLFK7Cu
Q+1kqqdYPMb0uxZeUXud6T5Pz5t4UFb/ET3vKc6pncel9bfsBsWjKM+E2hOL
N0LjNLofrLoSxZ2o/U9xjsUvqs0XtfA9ipMkHrK1rygvmvKQaRxLcWNq3yxc
V8PBIA5J14GuJ93PlI9E8xdaF6bracWT9Hlp3E7rIOn8Rv+119tzT9zYKNeO
ev/bl/VaWX77hR8dtvu/vK3xheg+TPEtvT6Nx1IcQuuYlIdg1VnofrN4+zSv
oe+R3j+9DsW9k92z6lYJP6H1LNonldaH9hnR/fPMg3d8sO9ZrXLBxbv2P/H+
Zjn9vPWPfmUnD4ek5yitW218kn6fxmMW39jiAVLcgOZ9lCdj4Qz0PpP/tfII
invQOFDrr4f948lOpu8nPIfaAbpuab+l/i9qZ2g8RuuYFs+f+il6Hqlfo3ww
qt9CcdTaeh3W+U14Dq43QR6phQdafbsUx054DtX3sOIEmtdY9TJLX4LGObVx
VKu+T+syFJ+k90/r9en+Ez/Hiuep7gS1nxRn0PxF6FOLzwvjyYQXYT0uqJtk
6RRZ/dEUT7N4sJa9tXQ+6e/S+BDzNuH9W3Hs8pceP2vzV1tl3LU/6XzIgMXl
/LeOenKzR8/ifOkQ59D1tOITS28kxQ8Jz6HxjMXDsXgyVn8f5QdS/jnFLSkf
CfPbqZ6wpG9c+3yl/U/jUgsfs+oFVtxF41jqZ5Mun8W/outG+RIWr9vS6bJ4
FFQnx9Lls3RZ6X6wcGkrL6b7f+/BvfqNHdYqD4zY4frJ3ZeUWfsdcfBte1yg
9U3TeMnaPzS/o8+V4hxLF4jeT9qH1C7RdW6vvgb6Hqm/ozizpXdt4QkUx0j2
IdVZEh/Vqu9b+va19Zlp/JPiw/S8n17QuveaQY2yzdrjj1p2XFu59ztD7v7o
8bkaX4jGw32Gf+utTmc2yoxxl30y86a28rfnO3/1hCnzNL6N1S9m5ZVWfE55
aBa/BeN1cD9YfQc0z6K/u2HE0J6bXbi2PPHJqW1H7raoDP4MzxmE6y+aXqjU
n2XxPdL1U7+V1cdE74d+TnmhVtxi6VlZ/FLLnrSXHi/1vzEuCno4aT2Tv6N5
irX+Vj2O1rPoeU/rnOxVqltZPGdqZ1K9Mq2z1Q9l6SFbfXAWb5bmcXT/Ux0P
qw+O1t1qzy9L/ByaV1LcoDYfNeqOwnVO75HWrSgfm+ah6XzV1hGy4lXLztTu
K7d4jPR3qR2gcRfV0R17xcf7n3Boo9w756Onv/TbZWXJ27POGfziyxg3o/iD
pYtI6610Pi/1L+n7A8Zeu3ravo2yrMfvNgwev6xcPuGjOX+f+5KmF0HPdcLx
as9Zo7olFEey8hG6Py2eQ8xfJPtg6WPQfIeug8XPof0gNF6l8TDtt6LrmeK3
FOe0V5xA9egsv2z1QVt8YIpT1dYppXGp5a+t/vr0u4k3YtWDqD239Ogs/Suq
+x3PV+AtU74KtgPheT84+s3xK2/c9O8B6/oPOW552fGk6Vt3/c83cB5H/YLF
P0/rQOsXlr5Be/EBLH6FxWem90njxjSvHPOgIA/Z6sen+FLt+ZVWfdbiX1l6
VhQXtfTf2kuPFMdXEJegend0/a18sPY8R0un17LPlDdO49gUt9TWQ7Z4EcnO
4zlfkr4HPXeWP7J4v7Xr5paul+UvLF0ymqekOIeupzUnl9bj0vepvqVVz7L0
3Kzr19YxtnBUS5/T4r3Q+JP2F1s6J1Y9nf4u1UOmeYEVr1q4mdUPSPm3aW5m
wqst3bD0edLzqT2v3OKH1+4PoviDpXdh8SG1Pl/oTy1eYvp+muNJ4xOKi1o4
mNXXTHmMqW6F80SoJ4B59RBno37EwsFq8/kt/rlVz6W4AcV/avdLJj1kS0fF
6p+l92Ph5xbfleYL1vNG/CTwHukcIqqPR/WirT4LCzeuHadRv0P5IZZ9tuww
jRunHdXjyuvK2nLhfd2efObsRaX3ZzzkIZjfZeV3ND6k/dR0n1P9HGsehzUv
hl6H2kMLl6N1RmoHKP+NxlHW3G2Ld0fjT6wjB+sX1txMiptRO0PnbFJ/R3WD
KQ/K0gmk/CKL703tCe0bsvAcGh9ifj70d7SuYeHeVh+rVTdJ65biHGr/6fmy
cAD6OfV3dO6DFZ9bPBnKe7H2oVWvwXVPiM9jvnFlPhW9DrVjFOekdTrKB6jd
j1lbD8fqG6J8HtpfaeldzB512bltpVFOPq3LFdtu31aO3n/8Jw89+wrmM9B4
OPGUaF5p9aVSv0/jHEsPltp/nM/C+pRV56X5fuq3wv4r4JnUDlj4tsX/T/dD
53hSO0/tv4X/0Pya8hit82jh0laea/VhWbiNhUelz3ucOPrB4365yZ6N2e2B
g9YtL8OW3tq9/7A/VO8HsfT/qZ4DxXPS/k/+msY/NM+15obT+enUj1g8zNp6
2hbfz+LhWPxtK06z+A9xHhzMN5N+Dt2HFn5IcV2ql2XZ/4TnUB6Ftc8prmvx
piieYOWhdB/S/ZnOEeWNU3yD1tPpubDmQaR6iqXLZNVDrTjQwtUpPpPWOb13
2p9F+zHje7fq7NI8Mhov0ToIzUcsfpfFZ7PmSFr683T/0PuxeMiWXqjVf5fs
idVPl/SQrXNdu5+Rxv/UX9NzROPS2nkE1fOkfpzGw2mdadxl+ffEQ6b5oMX7
rV3vpvcf+UWBNxvrg/D7Fr4aedHhfuh5p3Uii3dE45zaup2Up035FVbcbvWb
19appn3lGN+G/DS8D2E8QHnI6fOEA9C6FdWRoOeL4iR0f9JzmnB4avcoLmHl
IzRexXUTSc/c4r/Rz2O/FYwDaVxk6QXROhGOk5Mdg/X91Fdu7XPqH2lfuZWn
WPED7Wuz4luLB0jtD40PaT3X6lNL59Hyp1Q/J+03a44trVtRXMLiR1lxjqWf
Sfc53Se15z5TO0PxFssvUDzE4tvX5nHRvIn6a1pXxX1A0vzr2vUFyqdNcU5t
PCrthzTfytLxsN67xT+k/bBWPEP5vbXr4NZchtp9cOl5aZwT7Viwe1Y+TuNb
eu6o/011K0tvivpB2g9r1U9p/E91L6180Jorkb6f/Be121a/GOUz0Pg8Pa/F
h6E4oeX3LTyT8pqS30m4mdXXQHHXS2e9c8vtR296nrZ7Jj5+zqpy8knffu3n
W3E+AP0+7de2+hPp+62th2PxrGr3TVh1f4vHsvfgXv3GDmuVB0bscP3k7kvK
rP2OOPi2PS6I1091Q9qngOfLwPiW4s/0vSc8h55fqpdF4wqtfi31qVl1K4un
Z+UpmI8K6wUWv8jiZSW9rNp9gtY+sfhL9PspPow8NzjfyuqjiflpiHMsf2TN
e6XrQHEhq+/Psj+0L9viT9buS6X3T/VzcN0/8HNoHGvpxdG4wvJr1P6k+6Hn
gvIM28tOWjxDixdX+zxSf11bR8Lit9NzavXRU/ts6QNTHIDqDqV1TnUiq6+c
1lVpv5WFr9I43JpHbM1Zo3wAuj8tXpBlPy1/Ef0azOMsHnKqW1E/Uj2/hvXW
tP/nLVzX1mtcqzS6dL25Y89WmXfa4kl9x2b7YOEPdD2pX7Dww9p6O9RfW/Vi
K761+p4sXi7VFU95Dd1vUR9DiictvpPF/6F8y8TPobwLqz8rzW+1eFNUD40+
F8XTrDiZxjm0bkJxLUuP2uovpvaH+qOkE0jPO9V5oPE2zTtS3EXXOa0b7fuz
cFpq35I/qj03yuoHtPIgq76M96FkHyx9M+t+kr+z6kcU96itT2XFt7TPi86F
p/Eb5ctZc+qt/hQaX1l9fNTu1eYh0/2p7XOpP4vG2xQnSXUrGm9TPhvNo+n+
tPAuax66pctn9ctYeEWK9yy9PprvpL8tvrTFH7N0FC3eO51rTHVd2ovfXltX
Ac8vDvwW2m9F9Zbp89I+u/S7lj485edY+RrFVWrrVll97pa+sTUHx6o7p/uh
eshpHajOm1XPxfU1GD9T+0brR/S5LJ485T9bdVXLX1s4D42jLH0wmrdac8ow
Tzisc+oDsvrIrHNh9f3VnoMZ7zPERRbuR9ef1t2sfiLaD0vtOeY5QL4ovY7V
V157Hoel62X58XQ/SQ+Zxs8WnkPjnGSXKG5A38uZH0//1YtPN0ufM8bMnH/A
mrJl50X9Oz2Q+ecUB7DwRhpfUX4FjX9o3G7x6Kz5MhZPkuLw1P9a+amlC4rr
htD+WDoetB5B4wo6byjFkxFng3pE9HnpXE7Ln9LzRfETep/4/Urz+Cw9EPpc
1nunfRY0TqY8ZKvfyuIzWLxKut/S+tN55VacQ/mceK6T1AdN7TnlG1t8dauu
UduPUz9L7T/FJ1NeQ3n+lMdi8eot/B/30wV8hta5rL4D6h8TD5P6zfR+6Xux
9AmteNXiiVk6b5aftfg2tfUD0/1fvPsWL2/WaW3Zs2y8tvdji0qfpSMHfq3D
UBwnWO/d4mda9S/ab2XFLbQOZekkWPGDxRu08BmLn2DVC6x5OtY+p3kc1Qm0
+srpvqLrRt8v7l8OejhpnVNcYfEf6PM+c+zwkwZt+veB016+bvR2y8vwh4ce
/tffvK7pWlv2mcYnWJ9KmpNF8Rnq92l+l/Beq2/a0nOg9ejUb0XfC8WxKZ6A
+8GDPaH+Ma1/0gmk/CVqh2m/kjX/wuK1pv1Z229afA/6Xqy6iVXHtHRr6Xmn
/AEat9O+J4v/T/Hz9FyxbwLO16B6bnT//PAbS3d76qJN9nLP+2be80pbOX2b
5fPvu+c1Tb/L0j2gz2vxizBuBuNkC3ey5udq/FKKA0N+lDWvPPkpK26n+8SK
29O+Svwcuh8snX+qQ2LpBGo8efi7lr5Qur6lG0BxY2pnKN8AxzNwjqcV71m8
gtp6DvS8x3pfmv8V+tqofqOVvyQdbEsvy9KPonGUZU+seJvan/aap0B/1+JH
UT9u9VulfWvpD+B5NJAvZPHzqT2kfdC0Pkt5yFadhdoxep8Uf7PmJlh9oJbe
TnUdIcifseaq0M+teqUV56T9T+dzUZ0iS1c8fZ/2j1OcgfIPrTkgVl8Pjaut
/qP20k2leVnyd8l/4fnCcF453SdUt0HTMYZ4jsWbonG+xRPAuLc0X4yuj8Xb
pOfU6peneVNtnSLrOpZ/T7ou/2g8RgsnxPYqxWlw3nGKWyh/ydJF7HHi6AeP
++Wm/T5mtwcOWre8DFt6a/f+w/6g4Y00XrXmrdB9kuwA7RvC/emSzic9Xxb+
QO/HwifTHE96n7T/wsqLaZ2arnOKl1K/Fe1bqa3jTev7NE6w7tOqj1vnjuI8
NO+w4hwLx6DfpziDxS+ifsTSA6F+kNrtZAcSH8bibdJ8Ks3bSvEVtefWfDer
PkXjdooLWXxjq0+W4qgUt7dwIcpLSXgOtgPBn9bWrbJ4jzRewv3jUn8N5b3U
nvtj8a6tOkVtHVRrjoClz0PzRKp/FfNHqe/A0v2z+OFWXEr1RdP7TfgJxXWx
birkC1nzpyzcz9I3sPhylBdB/a+Ft1t1cNrPlX6X9vGlzxOeQ/cbxZcsXDpd
h/IHrH43mtfT9UnnJT0vjdMw3zjcj6WDV7vOSO2/1Xdp5TtWPYWuT+ovtvo4
cD4L8X9at7X0GFMfaFpniptZOhs0zrFwM+pf0n1SXNriIVhxC8W7rDkU1hwH
a34ljT/T99N8K5pvWn3TVt3Hmj+V9CtS3Yr6EUuPJcUJNN6z6keUJ2D1x1l8
J0uXhu5Pq6/T6idKn6f6RW282qpb1caHqX5Ceq7U10b1Ia05Yhf1W7f4/RmN
8kjHviO2OnRF2enG9RtHDlmg5ZVx/QN+WHueTm1erhX/WHrCVp+I1c9l5blJ
P4fWo9N5pDiAtf6pjoZ5p+0Ut1C+HMWra+M5dC6k1RdA+zG1/kpYl7T0MK06
DsXhqZ6ttc+pHdD2uaTXbcU5Fk+V4ti0z53eD8VLUz6VrmPxNq057BbeaNWb
Io5HdfWhf7d0qtM6vHPg1hO2OKxVTtli0ZAuo5eUgZ/pIX8T+zWq12TpIVtz
Rak9t3QeKL5h1Xes+qzVj091Bf9/sUuW3o7VL0/PXeyzCPMIrP4mq/+O2rHa
/bzJLkV+VMjXLL4Ejatp3crSV6G8Govnb+GB1A/SeI/uQ0tfwtJzro3zUJ1A
up5W/w7dPxRHpfdz7OxzXnpqYrM8/bPvjt7mztXl9v3XDdule57ba+FCVh2Z
9ulTu0FxG5ovWHXt2vmFZX9qz9GmeUryd1a8HfEEaZ/Q+NB6v7S+kHT56Huk
/T5pv9H7qd33R+Ph2vxnev/WOlh6mxa+bc1JqY3nUP+V+HWW/gDGGWBcYfGN
o44N7H+x+kAt3ovVZ03zMqtP05pXbuFRFHeqbVfp/SeeRm39n8TToDh5bX57
ijcojzHpFFF+DvUL6TqzR112bltplJNP63LFttu3laP3H//JQ8++gvtiKJ5M
56dTfhrFVax6q1WHpfPrKX/bwoUsu0rnb6a+curHa/c3Uf2i9H4tPI3yQKid
oefC6mex8BBav6DxGMWj8P1Dv2nNuaBxSG09vXS+4pwRWMek8RXFf6y6mHW+
KC6X+N61dfliPBDqlRYOb+HJFt/SitPoOlifp+e14sPkB+k6WDy69PmGEUN7
bnbh2vLEJ6e2HbnbojL4Mx7yIHyfVA8c68/A/mULF0r3k+Z4Ul0jq45M+y6t
OjKdQ2HxbajdtuK92v6U6q1Z64b5YwG/pfdZW2+hNm/T4ufQvnILB6D1tVSv
pHgOzV/SulGdunSf6frWHEwaP1j+neYX1v6n+kXUftLza+kE0nlSVj84jVct
/kDqK6fvy5p7aPUb0v4pK15NeKBVt6J+vHafqaXbQHFLS48i5fUWLm3hZtb8
SqufDvclBbtqzZGn+5bGXTRfpnaM7mesDyzNWbb6cax+dlr3sfqqqN2z8uXE
Q7bux9r/Fv/KqstY86QsnDzhhyl+oPF/7T61pFOk8YigLrqll0Kvk9aHzqOn
8RW1qwPGXrt62r6NsqzH7zYMHr+sXD7hozl/n/uSZm8tfjuO82H9jtoNut/o
3BaLp01xe1oHwXVquM9r89lq4x70fjTdAJg3Wfkg3f8WnkPfi9XfZPFYku4E
PXfJvs1buK6t17hWaXTpenPHnq0y77TFk/qO5f7U0nWhOIylQ0t5XJafrZ1P
0fic4ue14yVqfyie02f4t97qdGajzBh32Sczb2orf3u+81dPmDIP70+Kq9eu
I9B1wOcUzvFM+Amtv9DzlZ438YVq6+FTXU1rn1vzraj9ofGA9X4tHBjP94H1
Suq/kk6gxa+z+sep36F1q3Q/dG4CPY/W+tD4LeE/1txVug6J79Feuv1WnEDt
EtWztfgY9HdTf3FtHSeKT1rny5rXhvM7qFOU8Bb6uxGvDnEazWtoXZvGb7Xn
j9BzZ/FyqR22dMasvnJ63tP+p/gqnftAcd324mlbOtsU57H0rKgdiH421Otr
62xTO4/zEUlP24qrrbid+h1q5y0cI82XtOJwrH8OzwXVYaDv0ZrvTPWHUxxo
1XdoHY3qRdA8iJ47S9fa6nerHedY9anafQ30PikuRPk5tO+ptu4N5aVQO0/j
HCuvx33KEn+YnjvKm6V909a8eFovo3GCpYtF42caN1K7lM4R1cWtrRNCzwXF
4SnPx9I5ofN0rD7TOD9a0kO25vdZfeKWvg3No2m+T+/T4k9afEgaT9L+03Q/
F+++xcubdVpb9iwbr+392KLS5zOdwKE47qrtT+lz0blj6TwmHPjf1n/wo0VD
mmXyu90WdP6PVeWW37/X2mXqn6rrc1r9v5Z+DtVJs+qDVt2f4rTthT9T3QZL
hyddZ5tbt/7l53ZvlEPumnzY949fVj7X/5BuDy+Yw3WHJHzA+n5aTwsnwf0+
YX2ojoSlfx7nU0h9OjQPra17Xzs+t+wY9S9WfFibD2nxQGhfOfVTVt2QxsM0
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
kPZb6iun+5bqZFr+lM6RofaTziuncQ7dt3Q/18ZvKe6NeTKS/pJVz7K+b9U7
LDyZxqXJn9I4k+LS1tzY2nVe2l9G83fLj1M8Lb13C2egfXZUz4TaZ2vOL+Xr
0nycXt+qW1n97xb+nH436SHTfWjpa9H8mvb9WfWLhOdY/HOL50P1G60+o2SX
autp0zq11f9OcQbqxy2dW2p/0u9e1G/d4vdnNMojHfuO2OrQFWWnG9dvHDlk
gcY/p/uErjPlW9I6KY03qK6Cld9RPCHxc2rrjdP40KrL0PiQ9gtbPAEaD1De
o6V/gu9Hmjd68e5bvLxZp7Vlz7Lx2t6PLSp9lo4c+LUOQ/H9WHmWlY9bejXJ
vqX5VtQfWToPcZ/AvJv6O2veIu0rt+bC1z6/lo4u1c+h+znZ5/T9AWOvXT1t
30ZZ1uN3GwaPX1Yun/DRnL/PfUnLg2icQJ/X6h+0+nYj3wbykGv3d6f7ofbW
wnmwnirst6L+1+LdWXgLPS80vrLeo8WLS8+V4hyKq1g6RZYel6VbaO03mg9a
vH3L/lh6m5Q3juv+Ep5s6QhRv0l5fZZ9w3pckC9h8cFofkR1Ea14yZonkuJ/
Wsex8KWUN1F/RO0q1Qm0+n1wHQraH6seRHVxrb6Y2v3FGO8NfjzFOTTew34c
1k2s+inloya7cezsc156amKzPP2z747e5s7V5fb91w3bpXvGk2vrNeF+CqmO
RnVLLPzHqmtbvFkrfqNxI32/Fg858VEtnQRLF5rWtS2dQBo/UD1k+h41vlyI
c6i9ov04NG+iOldWnkv3c7pPGqdZ+rQWL9Hqu7H48ynOoX7E4rHTOJDmcda8
CYuPZPXlUT0N6o8sXIU+rzXfweozrc1DTr9L+U6WXUr+5dMLWvdeM6hRtll7
/FHLjmsr935nyN0fPT5XqwtT/IT6fcqDoufRqv8mPgztz7LqHfR+LF1uim/X
5qvjPh0pXqJ+xKqzW/gYxaPoe0z38/rxw6f2mru23Pu7Qf/85eMXll49Nv/t
s9t+hfOgII5t6a3hOjLM96MebOAhW/rzFp+E5vsWjkftHvXjtO5DeWuW3bbm
tlB/ZPFj0+f77X/2xCdWNcrct5+betefV5S9rvji+au//hY+p9a8chpn0jiK
1r8oPpyeN61zbb+Q7ofynC17TvnYtF/A0rNtrzkOVv0X844gbmzxAajdS3rI
NH6m+vYJr6P4qlV/pPmahW9bfFpaD7L6x2mfCOUj0fjBwnPai9dE93Ntne30
OZ1XTvd/7bnblh4UjavxuYb6xrTPGvMPg34IjR/S9605PlZ9x5q/QO2Gpadh
2R9Lb7A27kH5OfQ8UrtE800Lz7HmlVP82erjoNeh8YalH2LxLqx4z9IPxLqp
gc9A/a/VZ23lL0kn0MorLTuA9UbCOlCdHxpXpOusOKTtlI4LG2WPr09cPn3a
ijJy/vN3zDruj9HeWnlNWrfEF7LyxLhuIb6yeCDU3tK4jp5rqx5E86PaeQRd
f4oLpc/T3AccV0h9oDSvpzinpUtP9ZBr55t0bmDtuqrVp0n9FNVFsfwR7dem
z1s7PqT4f5r7ULvuafXzWjq6lk5guj7lS1tztKNuWJjfatU7KI+Lxp9Wf6XV
j5w+p/xPa/9beYrFI7JwgKSHTM81rdsmf2TVF6x6YrIzZ348/VcvPt0sfc4Y
M3P+AWvKlp0X9e/0QNaPtebvUP9F4z3av2/ZW7p/rL5jq9+c4tvUfqb1sfwg
7ZtLfFTKG6fv3dKbot+35m7TukZaZ8pXp3hm2iepXmn1U0c+Q8jXqL+z+HiW
PhvGZ2B/EL1/av9p3mrx4qjd3ntwr35jh7XKAyN2uH5y9yVl1n5HHHzbHhfg
9071DSzeRXq/tXXnqJ+q7U+teIPGV7SuR/mcNJ63+sEt/2XxYK26Ca3zpvdL
55Vb74XiPDQvxv37sN5H83dqV+n8KWpPaF859YP0+1Z8Qq9j2X9rrq6Fw1v9
oZb+A+2nS+uZeMhW3criXVO/RvNE+n6THrJVP6Xrk+I9mndbeC+1eykura3z
YOmF0n4xiutadRNal0nnKPUB0fuhOvlWH71lb2vrCVA7hvNuaAcSX6j6vKcQ
X9XG06z5lbXjH8s/0vdi4eoJx6P4ZNoPab4VjdOozhvWgYF8EtzvE94jnftg
6YnhPCXcP51vZfH0cD0i4NL0eWvHb5beBfXLln4Lfa70eYpzLLyU+nHKz6fr
Q+ec0riF9pVTvJTiG2mdE/+cvkcaJ1DeNY1vLV6WxZ+39Hbo/qT6eBS/pbqI
tJ8o3X+Kc+i+pfWI2n2RVr2Y4szWHBNLJ4HyHturL5jGyZYds/oLqH2j+yGt
Q1pnel7ocyUessX7SvuBxgnW/G66nyO/OsTztG6V8rh0fZrH0TjHwiVoHmTF
D7X1bei5rn19mg9S+1Z7nel+o/1WFi/a4udY86SonZy3cF1br3Gt0ujS9eaO
PVtl3mmLJ/Udy/lXVl8M3Z+WDgOt49O56snO0+ey6hqWfo6VR1j1UPp55KNC
vhydi2HxErGeCcQ9rPwo5bNp3WifI90/VOfQ0jejv2vVDf/RcF2rLtBedTTs
RyBukO4z4TkW35XGe1a/DO0zsnRUqH224mGrj8ni3aX8y6pjWrpnlh4+1dmg
6095yzhfhut2Ub91i9+f0SiPdOw7YqtDV5Sdbly/ceSQBdge0n4oyiuwdDgt
HRiqj0f7rax5dtFOBt1Cug6UB0LxXmu+PD2PFn/G4t1ZfaAUp7X666n+cLr/
NPeBrifVTbLiWOrfLfyQ4jM0v7bsQ8JVrHwhvV/a71xb79fqq6LnorY+JPVT
tC6Q9nmqW+H5wtI8SlrvxrwFmD9S3dE4/yLVoaS+XXreE46H8SvIr7PiHGve
Cs1bqa6XNVed1iupvbXiGfoeqZ1J/VY4Pgz+lPYv0Hmy9FxYdcm+m49rm9qp
Vd5csOjh8fc2ypxBx0w8aCTP9ymOROt6lIdMz6mVd1OeJ/X71hxzGi9Z+jD0
vFh9KGndUpxj8YqpH7f6j6jeoxXXUR1myueh9YgYn8C+cnruaD+mNX+8dh2f
xiG1+SoUR6XrY9W5LD9IechWf1Pym5ZuMNUBpjzzY2ef89JTE5vl6Z99d/Q2
d64ut++/btgu3fO8ldp9ENG/0/hT6lfC91n53Fm6wVZcYfVpUj9u8U/6DP/W
W53ObJQZ4y77ZOZNbeVvz3f+6glT5lW3txbPzdKbojrV9HlpPEnvn+bjdM6U
NT8l1e+s/jtL98mqe1r1Dqtvy+Ib0DoUfV80zqHrT+u2ln4RrZvQOD+9r6SH
TK9D5w5jncxgV6keNY3H6Oc0DtTmp0g4j2XPaTyDcS2pzyvxc+jzWvr2GG+X
4lW6H2gdxNK7tuqwFFexdD5pP4LFF6qtF2rhxnQfWnMfaNxFr2PpaVCdQLoP
a/NwaP0R972Gfgdab6Xngub1FH+m8QO9f5rPUlzC6h+hfpPifpaekhUfWvY8
6cVZ+DPlt7RXfE7rCJQ3SOu/FFfH+Hawh5Zfpnojln6IxZOpXW+y5i9YcZeF
h1vrkz5Pcx9oXkD5b5YekaXzaennWDgDns8F4z1Lj9Hqo6mt/2D1H1k8dmtO
k8WrpDzeFOdY+qgWn7w2Pk/jMWo30nxw2mdqrX/KZy39NJpHU12Cf7S5k/9o
eqE0D4rzyKB9s/pK0vMm/Rzqr615kXT/pHNE8xoav1EeMs0XLFyU5r/t1adM
dd0pv8vijVj6qNYcH2t+AZ3vmfpuKA5G40mr7mbFLZYOUuITpnlVVM/BwitS
3FW7Xkz1JGkdx8JXrbqhVQenfR+1/UJtnZD0u4mfY82bpvgbjfdiXATnCFA9
YRrn1O6zw/pLEi+ltt4IPUfUblO8qLZuAPWzFj+HPlfix1J/Su2Axbum+5zy
JykOHPPEwHuk+SaNh2PdOeQjtO+efk55ERYPh+KTtXFIq9/B4ldQu23F29QP
Jn4O1tWHeuOUZ2LFJ7Qfh/IGad5X2+9bukZWHZCuf+2+RepnaRxi4eG0v5ja
MXo/CWew7BXVB6b7kMaH6Xdp3TbFLfR3a+PY1rwtC99O64D5dZJOuIWvWvE5
5dVTP2LhNtS/YF2scJ1pR/W48rqytlx4X7cnnzl7Uen9za12fq/7EK0fk/oX
ardpfELj87TOVE/G4gFS/JDqaVj9I1a/MOWfW/mjhWtZdROr797Sf071C4wb
QF5r7KOE/suKM2kdLdat0jmCejWUr0L3CZ1bQfdbuj7Vhab2wcIxavNPKD/H
wkVr411UB4/ez61dD9swbfLaMnjUPltOm7SwTN3x9Tc69+yn1a8tHTzcTx3s
A/ULKT965sE7Ptj3rFa54OJd+594f7Ocft76R7+yE9c9o3aA4hiW3aP7luIz
VrxqxSFWXkPtkoXPW7y49F4oD5nWSem5oHkKPY9WHZnGY6l/n/bf0feS7j/d
j8Wnon2jVj5C+Z90X9G4C8+JhueL6jpSu0ftvzVfg84rT/sh4RiWLrpVN6Tr
Q5/rwFe6fXD3X5plcJdXz31hx0YZMmz4lC4ftpX/CfiSRh4=
   "], {{0, 0}, {95, 100}}, {0, 1}],
  Frame->True,
  FrameLabel->{{
     FormBox["\"ColumnNames\"", TraditionalForm], None}, {
     FormBox["\"RowNames\"", TraditionalForm], None}},
  FrameTicks->{{{{99.99531044832113, 
       FormBox["1", TraditionalForm]}, {53.10917276308385, 
       FormBox["5000", TraditionalForm]}, {0.004689551678859501, 
       FormBox["10662", TraditionalForm]}}, {{99.99531044832113, 
       FormBox["1", TraditionalForm]}, {53.10917276308385, 
       FormBox["5000", TraditionalForm]}, {0.004689551678859501, 
       FormBox["10662", TraditionalForm]}}}, {{{0.05021141649048626, 
       FormBox["1", TraditionalForm]}, {20.03435517970402, 
       FormBox["200", TraditionalForm]}, {40.11892177589852, 
       FormBox["400", TraditionalForm]}, {60.20348837209302, 
       FormBox["600", TraditionalForm]}, {80.28805496828753, 
       FormBox["800", TraditionalForm]}, {94.94978858350952, 
       FormBox["946", TraditionalForm]}}, {{0.05021141649048626, 
       FormBox["1", TraditionalForm]}, {20.03435517970402, 
       FormBox["200", TraditionalForm]}, {40.11892177589852, 
       FormBox["400", TraditionalForm]}, {60.20348837209302, 
       FormBox["600", TraditionalForm]}, {80.28805496828753, 
       FormBox["800", TraditionalForm]}, {94.94978858350952, 
       FormBox["946", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{360., Automatic},
  ImageSizeRaw->{720, 679},
  Method->{
   "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02], 
    "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.785595809744666*^9, 3.785596171617029*^9, 3.785596809019169*^9, {
   3.7855973230738173`*^9, 3.78559735290278*^9}, 3.785597765000133*^9, {
   3.7855978041020613`*^9, 3.785597832526429*^9}, 3.785598605809877*^9, 
   3.785661102844116*^9, {3.785661580983513*^9, 3.785661646172453*^9}, {
   3.785661703355989*^9, 3.785661727733473*^9}, 3.7856645908537416`*^9, 
   3.7856679552399597`*^9, 3.785669802050518*^9, 3.7856699709002438`*^9, 
   3.7856739456571836`*^9, 3.785674146860456*^9, 3.785674630373432*^9, 
   3.785675991050529*^9, 3.785676132178499*^9, 3.785711144903263*^9, 
   3.7873138558492403`*^9, 3.8935376577927513`*^9},
 CellLabel->"Out[20]=",
 CellID->1230090878,ExpressionUUID->"c6e5cdf1-0830-4331-857b-080008dd7caa"]
}, Open  ]],

Cell["Take the contingency sparse matrix:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785675414949893*^9, 3.785675427741168*^9}},
 CellID->1189621914,ExpressionUUID->"e3be7783-9f65-468f-838f-7e1663800d07"],

Cell[BoxData[
 RowBox[{
  RowBox[{"matCT", "=", 
   RowBox[{"N", "[", 
    RowBox[{"ctObj", "[", "\"\<SparseMatrix\>\"", "]"}], "]"}]}], 
  ";"}]], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{3.785675418977915*^9},
 CellLabel->"In[21]:=",
 CellID->1859484820,ExpressionUUID->"d6db2850-462f-4b4a-9067-07e17c8e2e01"],

Cell[TextData[{
 "Here is a plot generated by the resource function ",
 ButtonBox["ParetoPrinciplePlot",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://resources.wolframcloud.com/FunctionRepository/resources/\
ParetoPrinciplePlot/"], None},
  ButtonNote->
   "https://resources.wolframcloud.com/FunctionRepository/resources/\
ParetoPrinciplePlot/"],
 " that shows the Pareto principle adherence of the selected popular words:"
}], "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785673699634501*^9, 3.785673727173959*^9}, {
  3.785673921059805*^9, 3.785673923209065*^9}, {3.785846873922144*^9, 
  3.785846875714196*^9}, {3.858338435351131*^9, 3.858338462167328*^9}},
 CellID->992223951,ExpressionUUID->"7ac25a7d-9984-4707-a219-8576233b5d5d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<ParetoPrinciplePlot\>\"", "]"}], "[", 
  
  RowBox[{"Total", "[", 
   RowBox[{"matCT", ",", 
    RowBox[{"{", "1", "}"}]}], "]"}], "]"}]], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785673498134225*^9, 3.7856735137347107`*^9}, {
  3.7856736560058393`*^9, 3.785673683985025*^9}},
 CellLabel->"In[22]:=",
 CellID->1675385653,ExpressionUUID->"783d4151-765b-446a-9040-b250994f0ccb"],

Cell[BoxData[
 GraphicsBox[{{}, 
   TagBox[
    TooltipBox[
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.007333333333333334],
       AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJw1m3k81enfh7ULFa20WCoRLSohkbeKECURUZwsWRLHvnOc4yy2pj1TFC2W
UihJaVGZ0ialkqQULYqoFO2Pnt/9mX/mdc3t/r67zjW9nNEZNfdAO6/+UlJS
JwdISf39+//+6jLx/z5RafT4UhP2D/A/rmIsDa+jO2VqDK8zlocw67VAd8BN
xqOxZc6JpRfFtxgrosIuyfPIiduMJ8LGb5+UesEdxqrYlOVmmiWpYTwZWZM2
DFngeZfxVNzmLp5aO6GW8TQ8Ht6cVhxFrIk12lH76x8RayFtUc+R3Nn3GM/A
h5yKZlkR8SxERXPOudUT62DQ6kE7T2neZzwHM5eqqu0KIp6L540NXEk58Tzk
7tN7Yv6bWBdJAr31tYvrGM/Hb0HhjjfxxHrQWbPZfsVZYn1Yqat7L/5EbID5
N3RO9mo9YLwAqpuNfp3wIDaEreee6QH7iBeC5/LJYWYdsRGuR3ftOzP0IWNj
TLmy7YecCfEidItnDSwIITbBjmVni92OEAPpfD2ndw8Y84DAc0dX9R/wiJ2b
YtUn5eXj5zDmmeJRneHpMlc6X4xWly8vPFPofDGGyq3WfFZK50sQPELKlvOM
zpfg6cjjES+H1LPzpXh7qZ98mw5j3lL4vF+1Sm8tnZshpdJygHQinZuhcJfp
6YZ8OjfHXb8F3sdq6dwcXhdnXLnaQ+fL8ENBddJT5cfsfBki3WVuJi5lLGWB
rye7wzX86NwCbxKf3B71D51b4qj6aJcrp+jcEov256jNe0znVjj0nq+68Sed
W6FhWLmji2oDO18Oe4ERd+0SxrzluNtbKXHcSOfWWB5gluOQTOfW2FM+6dOY
Qjq3wel6y5iMGjq3Qd3XsIETPtL5Cuy4ZPlbbdQTdr4CU9cH6bzXZSy1EmXf
M9xL19D5SizLqNwZF0nntjgqY/RHei9j2GJY3BnfnRX09bbgds59oNLEuNIW
5s0Fbz7+ovurMOme6o+ryo3s/ip8vrxn+G4TxrxV8F9Xtr3djXHlKpTd0lw5
iMdYyg5SC/fJKmfTfTssPzqsWq+S7tth44e68wrNdN8O/Ll7S9r/0P3VCFhe
+ixZ5Sm7vxounjWyGiaMeauhZGcUJHJlXLka9SZHH72KYyxlj10zFY3Msui+
PaZ2NTRsPE/37XHq5L4ISSPdt8doqxIb/+903wHmZePXjVRqYvcdEDE5ya9c
nzHPAQVbOiJd1zCudEDh3aOXroUyllqDInmfwbN30P016DkcOiu7mO6vgfzw
h1vq7tD9Nfi+PFnjxju67wjxvFc6S4Y8Y/cdcabq7VHTKYx5jnjt0D4VJowr
HfGmYkm9lAtjKSe8UduXfDmc7jvhrfjTQv52uu+Ec1eypg06QfedMCuvK1Hu
Bt1fi1DOnjGPWuj+WqR+2PZiw2+6vxYHY9OOdyg+Z/fXYkYyf3LlXMZSzpD4
3b5rb80YzmhdPjauzYsxzxkK/UvdkUD3nSGffoS3NoPuu2C44p79wSV03wXP
Ip5229yk+y44Xq+2fHoL3XfBCrmKhms/6P46RKhq6c6VaWb312HOkexx7mMZ
89ah4rffPPvJjCvXwcxp/krzWYyl1sMgc7pYyZDur4d286RL7WZ0fz3Ew41G
5ayi++vx0sjZ22E93XdFrsPB+nc+dN8VdU6jPTeE0n1XSK0TddUn0H1XzHTr
jV2RSvfdcMV6p3rubrrvBkdDnZpfOXTfDR0at8MdjtN9N7z/s23hlnK6z0Fb
vaPU9auMVTl4UzTpvz819DwOXolbkg2eMOZwYG1V52f3ip7PwYSedm+bLsbZ
HLw7NNjL4gftcTB5oVX81MEv/sfNHDjfT98jpcBYagO2+94rfjqBseoGDKzc
rrxuGmNsQPhY+7RGHcacDbB1NBlrtJAxbwO0MrSyM80YZ2/AoIYxWr9WMq7c
gOdK/UrXO9P+Bpxzbje+6En77ti5r/66ciDtuyPg6ZVVCVG0746SIY97KgW0
7471k8ada0mnfXcMnbcmdnAG7buj1GLXoukHad8dHNcHUtaFtO8OudBRVwPK
aN8DqqGxOcGVtO8B3dBXCeE3ad8DFqErXKMf0L4H1oeeMYp/RvseeOJqpe/x
lvY94GjZNMfiE+17oG4ed8bMn7TvAVvlARojB79k+564I71brWcEY1VPnGqy
M7igxBie6Je1YJPnFMYcT6xcp7pfdiZjnicGD57TsUOPcbYnLhSZGk0E40pP
PF0Smye0ZNzsiR/1ZSM77WjfC4I1E/YuWEf7XpB9mKCW5EX7XtixujW/JoD2
vTDhvoWOUiTte0FuYX3d0kTa98KvQ14R3BTa90KHXPf4zB2074VlnMIn+Zm0
vxHS+7eU7T5C+xtxs5G7PekE7W9EmtLqgOAztL8RKxznW3EqaX8johJMF8++
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
xTKMs1PwzGOpsdMwxvkpaF509N6fEYyLU/BSSX5j3kjG5Slo7Q77vmIM48oU
vLnbuOXrOMbVKWg7ajpl/3jGtSl4L8w7YzaJ8eMUfOAMs+5QYdycgq6FIc07
JzN+m4JPYxtCjdQZd6Wg++Oioa0ajHtT0HP7cFaqFmOpVHzLk5k7byZj6VT8
4HOvPZnNWD4Vv9c/cubPZayYCqkFRp3T5zNWTUX/0QcF9/QZa6Zi0N8fXxsy
1knFkJubC1WNGRukYuiROlSbMEYqZHkLHgYuZmyRiuEuB3zHmTG2TYW83qDf
F5cxdkrFSIVN2zdaMeakYkx77bThNox9UjHuul7F6ZWMualQOpi5cr0d48hU
TIjr3zrQgTEvFcpOPpGFjtQ/FarzauTsnal/KiYP1835sY76p0K97d/5h9yo
fyo0qv7csHKn/qmYfsDL9ZMn9U+FdvStT/96U/9UzHKYIzb1o/6p0NHZM6HN
n/qnYq7sr6KtgdQ/FVm1aRylYOqfCundExUOhlL/VIS4FF7WiqD+qXimahR8
Kor6p8Ly9a3JRrHUPxWlx1zqquKpfxpUgt4LbBKpfxpS9GJ0Hwmofxq+/JB5
5Sqi/mlwu7x31xsJ9U/DTZGWOTeV+qdhvvW5r73p1D8N2QpWeYlbqX8aZOsb
HGV2UP80hGf6Su/YRf3T8GLDt/IJGdQ/DdYayb6H91L/NJxpVxw/M4v6p2Hy
yfybpw9Q/zSkRxjELDpI/dPQY1Stff0w9U+De3+npyvzqH8a7lx/k/a4gPqn
wSA9wnhDIfVPwyG7IR/aTlD/NPb/m1D/NEQ1TVv54xT1T0PrwbI/gjLqn4aV
PubFcmepfxrOzXzE2VVB/dOg/tlLQfki9U/DP+VfLudWUv80fI8TBs++Sv3T
4LVkzJTy/6h/Gmql//6Gov5pWFijm3TjJvVPQ+6OKl27O9Q/DQpr7V89uUv9
0xGr3LrL4z71T8eblhDz9gfUPx12BQN6QuupfzouBOzI+9VA/dOhqTvFSfSU
+qdj+7eT0iOeU/90/Lq4+OyeF9Q/HT5J931VW6l/Ouos3ccXvKb+6Vg04tPN
OW3UPx0FDxJjzr2n/ukYvVdhxpIP1D8dCW45T291Uf90vJs6J93+M/VPh8O7
SuOmL9Q/HZVFth+8eql/OrTCmvd/+E7907HLkLsy4hf1T8f/Xqcuk/8Du3Nw
vA==
       "]]},
     "1"],
    Annotation[#, 1, "Tooltip"]& ], {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, {{0., 
       FormBox["\"0%\"", TraditionalForm]}, {94.60000000000001, 
       FormBox["\"10%\"", TraditionalForm]}, {189.20000000000002`, 
       FormBox["\"20%\"", TraditionalForm]}, {283.80000000000007`, 
       FormBox["\"30%\"", TraditionalForm]}, {378.40000000000003`, 
       FormBox["\"40%\"", TraditionalForm]}, {473., 
       FormBox["\"50%\"", TraditionalForm]}}}},
  GridLines->{{0., 94.60000000000001, 189.20000000000002`, 
    283.80000000000007`, 378.40000000000003`, 473.}, {0.8}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05], 
    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 946.}, {0, 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.7856736665859127`*^9, 3.785673684325109*^9}, 
   3.785673945735787*^9, 3.785674148978177*^9, 3.785674632312204*^9, 
   3.785675993004529*^9, 3.785676132314562*^9, 3.785711145096087*^9, 
   3.78731385641975*^9, 3.8935376578595257`*^9},
 CellLabel->"Out[22]=",
 CellID->659718471,ExpressionUUID->"e2b1b74e-ded6-4501-84e7-1630467ee5a3"]
}, Open  ]],

Cell["\<\
Judging from the Pareto plot we should apply the inverse document frequency \
(IDF) formula:\
\>", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785675378342626*^9, 3.785675397073803*^9}, {
  3.785675441478127*^9, 3.785675441860314*^9}, {3.7856756975876837`*^9, 
  3.785675714079302*^9}, {3.7856959996402397`*^9, 3.785696000640723*^9}, {
  3.785846887442235*^9, 3.78584689463454*^9}},
 CellID->980101237,ExpressionUUID->"d2d4095a-51cd-4a38-a198-d3ddfd374f24"],

Cell[BoxData[
 RowBox[{
  RowBox[{"matCT", "=", 
   RowBox[{"matCT", ".", 
    RowBox[{"SparseArray", "[", 
     RowBox[{"DiagonalMatrix", "[", 
      RowBox[{"Log", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Dimensions", "[", "matCT", "]"}], "\[LeftDoubleBracket]", 
         "1", "\[RightDoubleBracket]"}], "/", 
        RowBox[{"Total", "[", 
         RowBox[{"matCT", ",", 
          RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}], "]"}], "]"}]}]}], 
  ";"}]], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.7856754428075323`*^9, 3.7856755266066027`*^9}, {
  3.785675583872484*^9, 3.785675587526622*^9}, {3.785675752425857*^9, 
  3.785675762118516*^9}},
 CellLabel->"In[23]:=",
 CellID->1406600015,ExpressionUUID->"fb794686-4d84-40b2-a108-162dd8ad0d62"],

Cell["Normalize each row with the Euclidean norm:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.7856617364354773`*^9, 3.785661785317222*^9}, {
  3.785673332270812*^9, 3.785673333731762*^9}, {3.785675430768037*^9, 
  3.785675434750167*^9}, {3.7858469329473267`*^9, 3.78584693334667*^9}},
 CellID->749224462,ExpressionUUID->"2613e7f8-5663-4442-a6a7-9dbf67a8a36d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"matCT", "=", 
   RowBox[{"matCT", "/", 
    RowBox[{"Sqrt", "[", 
     RowBox[{"Total", "[", 
      RowBox[{
       RowBox[{"matCT", "*", "matCT"}], ",", 
       RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}]}], ";"}]], "Input", \
"ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.7855968328761168`*^9, 3.785596894996922*^9}, {
   3.785596976192957*^9, 3.785596984682578*^9}, {3.7856698044589043`*^9, 
   3.785669822327949*^9}, 3.785675408890956*^9, 3.785675534056205*^9},
 CellLabel->"In[24]:=",
 CellID->828817858,ExpressionUUID->"75ae3288-07cc-46ee-a5ac-9b01c62878ab"],

Cell["\<\
In order to get computations faster, we take a sample submatrix:\
\>", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785673774684084*^9, 3.785673804733316*^9}, 
   3.785695415863595*^9, 3.7858469414027157`*^9},
 CellID->1334964649,ExpressionUUID->"12313137-b6ba-4aa6-b49a-0cb1193c2109"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "8966", "]"}], "\[IndentingNewLine]", 
 RowBox[{"matCT2", "=", 
  RowBox[{"matCT", "\[LeftDoubleBracket]", 
   RowBox[{
    RowBox[{"RandomSample", "[", 
     RowBox[{
      RowBox[{"Range", "[", 
       RowBox[{
        RowBox[{"Dimensions", "[", "matCT", "]"}], "\[LeftDoubleBracket]", 
        "1", "\[RightDoubleBracket]"}], "]"}], ",", "4000"}], "]"}], ",", 
    "All"}], "\[RightDoubleBracket]"}]}]}], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785673807276928*^9, 3.7856738656420116`*^9}, {
  3.785674024856886*^9, 3.785674028075325*^9}, {3.7856741822018337`*^9, 
  3.785674182851849*^9}, {3.785674305999721*^9, 3.785674306664412*^9}, {
  3.785674720512527*^9, 3.7856747209604073`*^9}, {3.78567475545513*^9, 
  3.7856747783247833`*^9}, {3.7856761696364193`*^9, 3.7856761697689238`*^9}},
 CellLabel->"In[25]:=",
 CellID->1248346983,ExpressionUUID->"dd0c373a-c6d7-4bc8-849a-6264d832666b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["RandomGeneratorState",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"ExtendedCA\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"State hash: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6552293077360911447", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"ExtendedCA\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"State hash: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6552293077360911447", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  RandomGeneratorState[{
   "ExtendedCA", {80, 4, 0}}, {{
    RawArray["UnsignedInteger64",{9095993510476326757, 9430833332879801645, 
      8671301303072800749, 11887328824976959030, 12631449269551276305, 
      72715204, 4872166402580315672, 8329768696291359467, 
      14230217430720306301, 16497105384952468828, 11607789236082736387, 
      17065378830989792962, 2810496646336970652, 15182357201575182601, 
      12880675731702722882, 7788414872898650006, 9395079533180203431, 
      11855016674355657600, 2292849394748186268, 4886819441294251080}], 0, 20,
      20}, {CompressedData["
1:eJw9lc1qH0cQxEXIIdckfoE8gKGnv/uYoyCH4JAHcIhsfFHANoS8fX7z31kL
sUizM9PVVdW1v/z1z7sP3z09PX35gce79//++vnz+//++JF//nz98unj68vf
z69fXz6+fE7/8Pve9z2P3z59+fr8E3+oetsKTXWvVVLx/DPL5loZ3ZJaZZnL
67Ge5RLsttAQb82Z5zesvy2flMwKt6XLO0SuA1Hu6rKsS3uUDY/1t/sCkdKi
uFhx5Ky7SZY119mysMrHeke4qMZIi2voyr4Kd0oDZ432RsyWvF5kKnujPTin
lmp+oI6OjIuDkuaBdHpIj96YfGyqV8foo7ZHiHn2tGdY91pxDkRFLorEvrKH
Ni6wLHbAxhpQOCcOJrOO5Uu5wovWuPN64RMzy33JkgEWW67SsA+XnSAYysla
h6ZMMwSAIvRDrXXogCbRAKIvT6qvw1/q+FomY7YKnU6BAEcgMJ04rFrLVYAL
Z1R04I0fQF26Wa6IqAXtk80utwsQSCksa0wUTK2XkbQtMQqNUpKLeuQCiibS
FImiuRFO2+HIKWEe6cPyqspbN+BnbzNJmHq6f3uxqYdMNTFxKLktAEMLN5UE
DuBx9KmgQEJ2TdD5SjtsQ1pAs1Xhbux0miulaXZjPPCoSB+silMDjwV+QsDh
pusAGtoeE7+eM3m7Fe0r4BkI4cM4na6BD0C8rZypXHpO0DRexb6QpYFxJO4X
Vc1gFXPH/crxqwmhp9U1i8sHltc1uoP4liY4EMcITF1kIA3Dh8cHCTAr1jxk
AAnv4hr8C4e3DmzAiwsDDm+wCAV2lCBBYy98OdPCnJzWUDO9ZJZYbA9K3dbD
DViRrOF3tlDXeq7SMawnzVgTQbecaCzdD8q1bO+62MYTTlUYheoF2LhJVbCQ
M7Fr4TI/6Va+IJXRZIawJ8Ue64tocJKFm3djgYqXiekXHn3HBROlelNBiIBl
QWCync4Pd1yx0q2EnfgVV12+INvw89R+aZuXM86rdj4yY1VFkDC319SSIzsL
VkMPd+Lia30HsLcU85Rb/uw7kbZzNZsx6OpN+VW4N0c7AbAGpCDqEQciGUks
7bqjnhE6QWIIzECDUnYMEH8nuHcEwlmNbVT44zYqpHUgC8GBZ4ti5yYSKmgX
KYmRobreoZd79hnMVUZwG909vkm+s55PzeB5ZnUuvzAWTPoGykG8gC/vGB5g
9A7vcOQhFq8D3eiF+cyBT999Oxg38mp2LOn0Ttb7Jr4GWzjmI8kzZutqGhr4
2KnVZJHsU3bSkGDeHzjsRJfE1W3VrQAfnR32uMC46iQP4CCDWOZzS1R9G6op
1puvIr2NJI79H3R7aH4=
     "], 4, 0}}, RawArray["UnsignedInteger64",{6552293077360911447, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.785673845692546*^9, 3.785673866097044*^9}, 
   3.785673945814084*^9, 3.785674028661539*^9, {3.785674153190629*^9, 
   3.785674183098373*^9}, 3.785674307330823*^9, 3.785674635587431*^9, 
   3.7856747212067413`*^9, {3.785674755905867*^9, 3.7856747786774683`*^9}, 
   3.785675544706665*^9, 3.785675592745596*^9, 3.785675767630804*^9, 
   3.7856759976620083`*^9, 3.78567613247475*^9, 3.7856761701054173`*^9, 
   3.785711145214889*^9, 3.787313856475807*^9, 3.893537657904922*^9},
 CellLabel->"Out[25]=",
 CellID->430272636,ExpressionUUID->"fd933ac8-205b-402f-80f0-1420e62cad92"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], Frame -> False, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["25269", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"4000", ",", "946"}], "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], Frame -> False, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["25269", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"4000", ",", "946"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.006677854122621564`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "616"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "0.4485929777012552`", ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True, BaselinePosition -> 
                    Baseline, ImageSize -> {{1, 300}, Automatic}], 
                    LineBreakWithin -> False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "719"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "0.42321194995624684`", ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True, BaselinePosition -> 
                    Baseline, ImageSize -> {{1, 300}, Automatic}], 
                    LineBreakWithin -> False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "169"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "0.4037487164367941`", ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True, BaselinePosition -> 
                    Baseline, ImageSize -> {{1, 300}, Automatic}], 
                    LineBreakWithin -> False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "143"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "0.41291764016632404`", ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True, BaselinePosition -> 
                    Baseline, ImageSize -> {{1, 300}, Automatic}], 
                    LineBreakWithin -> False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SparseArray[Automatic, {4000, 946}, 0., {1, {CompressedData["
1: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
NKM17ehOX0IYy1RmEUY4y1nH/wHcxMNQ
     "], CompressedData["
1:eJxsvQf8n9P5/3/OfVshKpWaNRJJSUmNBDUiMggVlESpHYk9ElvtEMTeW2Km
9mhRNGq3iqodihopLe23NVqrFL/7eZ/Xq9ed/v+PR/L4fD7v9z3Ouc41X9d1
rtN3/KQxE6uU0i/Gp5Sbn3s2fzzd/L+h+f2s5v/mzYc9m78H1Sl93fw9sPk5
sPn7B83/x5r/g5u//9T8fFbXvNtcc3Lz8+7mvmdy+eza5ucxzeeDmmvWzeWe
mc3P91L5/qvm8x2b3/dpft7SfL508//K5v8Der5//rMqz+f3DeoyrqHN/wX0
7hub7w5u7hui9z7V/PxpXf5mPvM21z2g715t/p4rle/ebv73bT6b1fx9fnPN
wObvLZufR+tdnzU/v9t8dk7z//Pm/0TNYf7m8w2a60Y3/7fQczdk/tzf/H50
83NkLmOcqfn8tfn5puY9svl72ebv53OZwwb6/K2qvIPf+blE8/dqze8HN/9f
b64ZX5VxMwb+39z8v6L5e8Xm/7ea7w5tfv6Cseuayfq5TC5j3rj5+bhotkPz
9+vN35Xef1zzc+/m5+V69ozmu7uYO/zQ/DytjjVk7Oc3n49ufp7Y/H+i+X07
3XdN8/+PqdD2d6xr838FzY+x/6z5OUL0HQsPNZ/tJ17jWXw3X/P5C83vY/TM
VZrP3tczvkiFT/j9Od3HeL5sPl+v+flV83ONXHgAnnig+Xt7jfuoujxznuae
njwjFV7eUTS5ufn7MK3JjObvBXXfis3/ac3vs5r/F+ZCp/ubn69B9+a7I5rr
e2l8f8nlvgOb33/f/Byey7Mua67ZTdfM2/z8Urz9/eb7Hzf/+4g+P24+3wo5
aH5eomt21bo/09z3YPP7BzwX/m/+vkO0WLn5PzsXfr1T89+6+T9VNDy2+X2z
5mev5v+pzX0TJTfmJ8a4S/P/yVz4foRowvWfpMKLrAt80FPvPLb5fKOqvIu/
F6oL7TfsXLtC8/eoqoyD8S2m9/2g+f9YLnP4qPl5OvzYXLe/aAT/XS45ur/5
bLPm/4LN9zvrWVzzXf3cpPksN9e90/zcU/yF/MMLvP/1KmRqQ60tY7i0jvHf
JFp/T+twRvO/d3N/rfF+t/n9h8016zU//63nzZKMD2h+Lq/74ZNXq0KzhSSf
6M1rNdZTm/+Tmu9WTEUPPC/aHdD8fXhVdOXJze+LNJ+vwnzg/VzWhef/rvnZ
o/ns783PG+HFXPTjC6LlYI2fz5Df7ZrPjtd8pzSfXdP8fWEqz9lRn/P9Sc1n
/0QXp6Kf+XyN5ucZqazTOpKdhzX3/aSTufcfmvt1VeFL9D68znq/2tH7t8GP
6Bo9f0Jz7dzNzz6p6M8TU6HNQZ01Xr35PyqV+SETmzX//9D8/XHz81+50Hvb
5pqV6mKbfl0VXh0sO8HnY5DPquhJPv9rc//1rK/mj84e3Hw2t+5jzFtJt2TR
9vjm/wn6/v2q6B5+X7+5b3d9vkRd+GC5uoyz1TlV4Z1N6sKTZze/7yV55PsH
c5kvMnJiVfQh82aN0SO312VdWdPlRPv7NTZodq/ueUPfoQN5Jrz1rVSec28V
tjGLP3arCw9he3+HXpENnV/jgu5PyV7ck4pcDNA79mj+D6/LdxfleDa8vD3r
kgpt++Uic1vqvgVF7zXrwgfcd3vzc8nm/zLN//X17pVymeOLouHIVNZhDdmE
eZr/Z4o/xnV45crmul82/4/MhZfvy+We7Tv8sFXz85Xms29Uxa7crnvXklxP
lQ67TDSy3CHT8NoN+m6R5u/ezc8jU7GFP6uKHn9J73o2F121EP/1jIOb33/S
kVH8rVka41iN45Lm/5LN/x+l4hvNFC3QbU/IBrEutzV/L6V3oe8qze9xfcaz
1pSvs7XkcpCu4ZlTJHvQ9faq0JXvr64LXx3afPbnqsg2NB7dfH59838vPf+U
5uexzf+r6tA78Mnuzf9Z5v3mPZNyah1MfJfZWvOs7x9tfl+0+X39qujfrVPx
AY4TvzKmW1MZ82Dp85OqsFnY7V+L3wd1dPn5ze9/a35u1PxcvCr8NxmeSUWG
TYfROXTZYPEzfDVQOnuQeAU/d2nzSfO/+Zem56KrhsjG4mt9Q3w5WHTimv7o
marIAbK4cfP7ClXRrUP1/h+kovO5b2k9c1fNxXOHb7HZQzq+FHzNYIan4G94
lDEsoeuwYS/rPZvoM/TFfKnooqOrMl98wK/0nC1TmecJyHZddB339RO/9mh+
Ltr8/Sbzkn/Y5S/kc0d4tPn5SS56bw/8MNEGW41Ne5y5VsX+8/kWqfDi4KrQ
YaHm/x5V+Bf4WGtr/ZcXHyOPc8veZF0Hr25iGagjJpidI6ZB3/69KrRD379Q
Fb8Pm/1D3TO2c/910rsLyOcZWxVfY5Hm/07NZzvoufaDsMsrVcXvXqX5+7Xm
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
M4SXyDG4foE1I849Wc8Cf2dPD/4uNRnkVO6WzUNfOAYEDyImx4evNBbq+K/M
Ybuxr6fUpV6DcWfpw6l6N9jJ/lXIHDXzYG74JU+KnmBgyPi2HTlHnvCleP7K
oklrL8S3vxYvYfPvqkpc7/ih3ddQlZiXd5IrAk9FF4OTLtahDXJytsZ7cVVk
bCmNg7q1Zauid7Ffr+nd8AMxOjLufXCMY6RkB1/lNvEGuupi3YfdBRtcKUUM
Bp97LPg9T4hve8kWuG5huN7Z1mxofYhhz9f33PeengtubV/hYelo23/GQZ0S
OaOnNbaW35ufh9TlGnCoqRoH/hY1RPjBK+iZyNK4VOIudNWfxBvHaVw/kT8D
LeDhC1LxG+tUavrb+dRlXR0z8Bk1lPCZ54ffi3+E3r3G9EylNtM1euj/xSUH
jOfUFNgOONpGmjPyja7fVnP6TLxF/EPtxDKi3a81vnOll4k18N/7iL/6yO6D
Q4/Vs/GV/i29daHuP7iKPM9o8St1/mAN6Fp0APmVXXXdanXYgPuaz5dPxe9b
VrS4R3wJ/2Lvl6yjrgdaH55LnT1/o8fB4Rwvoze8P4HxnSf5G9ChFXVA1Lch
u+QGpsqOPu31Qsb0u/ND/I7fclCO2GNKKveD71jf2T+iNgkc0370B83PFfX7
JNkTYon/S6EHsF/4jORvwcZ76b3Ukk4WP2BzkN9XquB5ZHNZ0ZAY0LkOaNdb
az1b/LlrLrKG/8u6EgNSd3Oe6Iev/3PR3c8YItkcIB05ri48cmkVWAj1mQfp
b2pnoBm6FFlFHxET4afgN1A/h99rDBSbjC9GPPY3fQYGCZ3Awn6bovbzQunO
FpvJpZ75Ma0tPspxuWC2/M31u4gXvMeVGshjxGdgh+RTGPc3ctTefqh5fCY+
ZxzUAsD3v9YaIl9nySaQx8Z/QIdupHFi63pqbakhgOa35pL3OVY8gi7cJwdm
8Xf5Mcgp/HGF+AdZn6l7F0iRU2KPct9U7B9xq9dsZdEavAZ+IKdAbok8TU6l
RohaEXjM9u9trS242VitIZ/jf5CzBhd4QPMhJz2gipwPMkjdqmPUi2UXFqrD
ZpNPx058nAqfs69hWlUwRWLFn2vs7F1hLOCt6JK9ZY+o0SEv5/o1bMN/Uuw/
9X512+qJsjnolk1y8a/t78D7I1P5/lrRkrh6hn7HR8PHGiHZ+Z2eS22a9xM5
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
5+/dt5/KORcnf3TW0bvYAViG7wTX6J1THE8nwcftU+R3/x4ZcOfdc7JG9F5z
Pr6YOW/vQV8GhirPo3cy/Gauck3F107eDP7sDrEJ/v8W0TM3zz5YI3VGva/T
+sKnME/vhvcOfePkfVyWfX9XxuadZIfuwEvUd6XHn1K8M6/388Fkn5tW7K0m
Aq8m1nNAPuesb3HJsnLQfPL2cuM3Hx0dKw5cHnu3tzhs0lp25w+ew4vLeyu3
ad/FKPQdgfXxD+SvtvIVmZfv4THM3V4+cxlxdbVr8Ae7JG7JvsIzWx51Wp/1
/KzdgdOYH7mTF8P2048wgVwH63qbyMiNcxYPXEZ+vu+2j+sZWdviJ+fX85r/
tNWHeXdr2PTLlQsjF++BWYfnZr/FcvVo6D2qcDYccdfoSlzVC3Z07Vfz7ANy
hnrXhR7x4u/W+gl5dvHmEdEzu/lWT4qs907iq6LDP7uji5qP8rTNmrNeeyCv
yf1z1SU/k397J87/X3fOG1vKN9zmBS2rDO01jZwbtgh3xwaZD0zt/Z5Hbs/N
euGzL5vGvUb6mZC968W2Fcd5hneIwcMcT836wHTs2375ubm+xvXInN3eBVlf
+TbR0bCTfI/ajYuW0WN2i0Pyez4Zefn8NPx98Z0nZR31Omndj55jYq9iQrgY
ugV+kEsCG8iVdB8sma8v9Y7Ms/XTuB0xvfZfeOkyciuLl/kVN51HLY480n2i
u6wVbuCcPN/aOy/lx/g2B00r/qmtvO088Ol503oPUXs5fmMZ9QHwN76s9znd
K/brHfOI+4iHw/50IawN/8IXfJTeNUVXyh2EfVv3JYdfL0f8oHfBY8Wx9NQc
WWoP2OOir353R0bEap60GTEYZ1jMmI/UO6Odi56ZK+eBQ3oP724fTLWBzmfl
mL6Sr/K3O3K1f8bvXPqu+OSDMp4r5jEH67T3Mp7h93TcPTKubS+OZX2OfDw+
SmsI5dN/OmOG3/XAcs7pW3HY4/MOv8OliyvpD3dCxtZ8WXL//Oi8xs/M/bk5
2+yaNcO70pn6kbxtGlyxemyyza7aB/aLP9xe0p51ej7/yOAFuW29z6n9Tt4f
3YS7e8c8fLVv5/3NK8OP8m1gcvigvp756odA/9EJjU2blzV4QfbvzPxsXHpn
9T4NOXXwwUujb9qTs/UXOMpnZYzs7fF5vtrYP1pGb9V75fd+xkVck+dYj09m
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
P5F3XBHdSN80v7E9dLdndxr9ZuQe4KBOjn08N2Noj3L69pnRafTjoyKf5F7+
Xu8s5Hup2SnP3n46ajLqn7438rHtsTCveuWhy8i7LZdTX18Q6tD8DHvJ19Gb
AI4Qs8OvO2e/NQ37QXf8aX7+TmTsmunavXXMwflu3WdzNnE55qyvifw0Nkf8
BIZ90zJ8x21O/mb4GmKCfNTmIZTv5cfIGWoOYP0yuYh0DV9K3AqnestlnDlx
ndbB8AGLmeRt0JNXZn6nTqPG3N/LufROFbW1bI94zOl5Bm78N6KnjZvO1Z9O
rjgZdO58R7yZfm4+JRz4/nnkqT1gM+4q6H73zsVbbgZmZiPk86j5Pjg6zd/E
OPk55tjY87YubhnxG/N+2jTiJziv8nnGLi/uLfku/ptegdfpGTbthvPgfdnm
q6YRY+k9j862tXYvVe8xb40n2TT/XQ6ez/dH0W27eZL2+cycz3ftnAE5qPTR
UfPoT3T1tNbUiRk1Z9jnn5ezSl82nuNMvWpa+bz35SxVlj6T77XeHs5prRpb
d8fMR/0lrMD3ZH9OyT72fp7WOtIp9CGc2bulj8u6fSzz6H1G9vq+OXv/ZWe+
dI7YqTOH8+gdxfeLHMFTjZeqU8Nhwqr8ejkjvXOGTvT3h0Tm28+3OFL8DFek
Fwe+Rs4UX+/cyKfYzknZa2Phe5+3GZjv8/Pggdsjhv6F8+87rWulpvuu+Rxf
BzcjVwNvR67kzPjM3svA22T98qzNOdEvzU8kg7+cs9d7pc3hiug092QaF//q
S9lzNvEflmH/+cPspXjsQdOKs+GV3nXx7/PAT82xdX8sTP6wafCf/I32CvB+
ev7NOTdwlHrEd+7sK05Ejewm60GOjo4cbnuVbFZ/8vDoZt+RR0Hn+7084eZd
yIe6OnJebveBmxHDsHblMZt3IMfVPt09elvfxIunFZc9Ne+F+cVF2fl7Bgec
kn3y99ZjXJXf0bl8sF0deo+MSY4eHg8/5/M4UX5DOWifZaNfn+/TyWoybpk5
OD+4ZzxKe0LiWTzLPNn15rfcIXJsT35lGjUmfs/G7R8dYX4PXAb+wROWU9sr
+qi9SL4Q2/Dzy7jX6yGbEa+4fs6M+lf1KO4naU2SteidA97D//WM20QPbLHv
tGKmba7gMvjK/56xNVcMdqcz4TYx92/Ow79U6+Os4FIaO8D7GcvNNmud09/l
fNEHrd1kF9TCwFv1ow6LfDRu6JzK63hrZOY6GSNOhc4/eQczwGrshpqgMzI+
PdAOje6rP4QHERvaExkyVs+Su9l8OGfrtdEXN58Gn7f1/6dVVtvT//CM++xl
xPPlXd0+eyDX2Rmm09p/2dgQHnwu32FvbpCx8Pfam/ulmUdrUsV88A/qaGDU
620GX0Xvb+OVy9APsIRc2J+N7jY2vQXYLD30Wyvt9/wP9gPPw2ayYbW7fL3W
om7P17TmvW5rF6P/8IXN02788+zp2r0sLooegG88275+ckf2PhGdgtfb5Q/9
B69ak9q520w7mGla+Uy1Eups2P7GW5pn236IxqpuubZZvRvuCL7HD5Q7t55w
ir4J6jnOXQau371r+znRLf/cuc/jPh/PkM8HX/Teqa7B4ZG/6q0fzni+np8/
u4y+23LP/29kpL67HBdc7TPyPfdgyIEQT2j9GN0tb9Fn+KdsnvP13vwdtsSt
OOcnZXxye+B3sQrvst76aX10Hn00YPr2xmhM5fPRb95RbIOjakwZ77d7J4zz
J07rjMkLKpdLN9JhN8nz8Yd8eD7YuyMDfzEPbu91GSO8e940zoPzS7/BZs2p
5W+3f6Yzp0fNPA85oSPbP93ZNC52pPa0OhuH8o3sE/y+2ytVrSUM+IzYIPby
PdO4Y5KvAHdu5WRafVL1+TCyOfNd/iW6mjxaO3bp4HnoRTkH8hXKPcjRo9eK
uXtO+TP0j/itO0bJi7/jdH6Q/zWPmib5p9YMJ39kx7isMSvPgzUOy7zFDBq3
/kzm1+d8eB551/YXj6HnrP4r+02D//py7Lfn/Od87++zxnIy355nspnymnEv
/IY35j3kp3dubGOlU/r6LquMVD+Qw937w30ep9FxqC+9Mt/Fbb4gNsJ32x/N
Wjw+eumkzK29lbc5xcuwu2yhsXVty3fpUXB0dBxf+/7Rax0TPunrea/3/V3s
/zk7+uvVkdE7RJfv5sl5N46+d9OQCbrxhyIrz9sMXqI5eORRHeu278m08hG9
d92Ymv/gvMhHOTtjfWX2Tb4QWWIT+SI4Cef0TlkPWOKfshfs1RdjE+iCY7Mu
b805dEcZP+CMzZBNutNYjZku0N9GDm99P59z7xdfb5/8jMNylvEhv5h1o5PY
NPisdwdfGX1Bt/g+7t1cyEDvk1GHsH/OgT7nfB+1C313+1y3T+XhGdcfZ53w
+0dHd31+GtixOolciiVNsWv4os9GN/yfyAJ5h7HK8fod+yuHsb3P1biKn7gv
TOzrg/k9jN/cVDLUuPStYofkq8gvOidrIqaJT3hWPmfccIUYPv+Y3rYel2d9
2neHL2Nd2Uy94sxPzQXu+S0Zs/c337TjFgdjI9t7EfZ2di7InuEu+Ym/soNr
+Cb22Jmjk5wjvtYtsif4zPaPIkOnxQZdlPVznuTbNh+N/3i76CZclPOpXybu
CccEe8Jp78qzPjGPs0GG2rOSvpezgFPtfTruqlW3Zb44G3WGzhosWxxeXpHe
4huWp3hEdDg86Ltk2t//a56NDzoxY2L3y4vArM2F9TMujT/5Y/ndRyOH5/bs
TSPvvrwI3OhMiBk46+RS3Xd7ybw4eovfUV1yyTzuD7IG98/5+t9Zd3jWZ7br
G3lvbJavWL+Uz+zMsHd0jF7bh+V9etG2/u/D86ixhi/Ef/bL2WwPUfuMR8Fx
Onf4/tPm0cejeVv0Jj7bO/X1Vrcu9/F/TSP+2/N6t4zH3S+3yNzlgr1zGnbX
uqgNV4PQ+vgrloE1ij/l03x3Xn13dufh01ob7HNygN8cuTom++r3+q3zY38z
z1BT2nk4L72bWR2+NW5frN5XAXd/Lc+6eFq5L/shh/eCadQG0MXFzvyZ34m8
8j3YFblZzY1pPtetIo/NUxN3uE/OIf1vD8RT3hpZbg0h2cankQ18PFvPTzkz
83pOng/34aReNw8O88TIaPNy7P8Pet8tq12BS3F7B07rHvqb98uHEZvv3UKe
eevsEb762KyT87vMI2fU99VO+K5n2LvmTfM75daVu/A7NTQ+37zL3idyWs6L
uhOcUM/DrZdxtwv8cXF0uJ6++pDr+VpfGqcmPsiG4gfE0bb37wWXyUHnaxc/
yuu5ch48MH3ePOHy1Lgitu+ErAl/no8il4nv9Tf5HF7kp7JHyzRqkp0ZvVtO
yHhfHrnQx6AchTOIE2Lb/3EanPg2P2Fe9as7ZQ7Ju9qj13rhrXGl7evenM7y
+sWid5sH/w2LOHddN34pXC/2RL5hE/bke9Gf7UsM8/1Wnl9/De4/MH/H09CH
7W3b+09hAzXb5LE93e3BbSMD+hXD1u2NDEvqrcnefDtjhim+Fl0sfwe/9508
C6+JWxFz7N3N945Os24vytrIQ3podD+5an8nssYvlLvSOpGvLCv/KE/psXmm
tRT7w3vuOw3f9vRp9G+AW++e9xV/bu+Nja2Baf50GXdn+xx54/PcK/bt9OAw
clGs84TIauvFcYWnRl7ZJPJ++6wH/vn42AfyQafCgK+a1j3AC7fv/fWz1/Yd
Vyk27ay3Zqt+FO5uq+vmVW4qS5Uta1h55g+op/hIZITdJi8961fkc/J7PjiN
ex/Kz+HK28vB+YPR1I3IPWueqfxRWPS06GfY4dKMlW6DwQ4ObqIX2p9+3+gZ
fs8WV0cnPj57TE/px2Ctiz/YTfr381kTdTE4AFjiu/le6zf8/eHTKstT9Hcx
Su+blK8mNvCXOV/6Ezt/tbHOBg6I3w2HyS2Ck3qWya7cPfsqDsVGkz/rYC2b
G+c/sXr8oXPg+86JfIv2szstZ3ab57es8fV/jj4gO85ZOefDNmseJkzod2Ti
87Vv06oPi7Vwc3QaGTZv/MO503qOP5fPsE1wOswCZ/96vr+NZ0wrtsa5OJv0
xy02g1sSy8EB4sbUsMJJ52V9/2QZueWbfIZ+xgGx+fKacOB0TONVziN+oLF3
ct+6M3eJFVP+ZdbY3M5fxnzFid6UdbM+4vIPyt/cQ9H7z+nQ1iJ8eB71L6/J
75rbdVVkFgfOTotL1TeA6XBgF+/odjIDC3xjGbYL/wWj01EHbEaPvN07uusv
iynJK4Dzz4gO35W5K6fhA3uetbG3/IX272RnrVtjCs7MzbNu/xSb+ra8E8el
Fle9kziftWzMFx45dro2ZwrTvizPOmZaa4LhyAdvxv3eF+S8LzvjpifbE9B4
1TbAJPxB+KV85haTTcMnpbN+bB53zLBDd17GvsGz/i52S+cX2/r7yyM/sPbx
OQP2ob0qvE+/jDdtxl0KvRv9j6dhH9Vu8ffEFux5+/A/LnLnrDbPwu/s4yfn
gfk+HF1OfmHf5tHg0F8fubl6Hn0d26ME7rjxMuKX7XOE27jttNb+eg6gw8+j
F+SqPj1rTifz4XBGvdOoNdJ8AeP6duxC5a99dzlh8IK8bOdETOgVWcO/yefp
AnF5sqKG6dGZF3+fHXNWan/Ybjrqr3POrxtd57vV3fQYudRb4Khp+Mb+fWHG
68zjW54Qe+pZ34i+OmgenBc5ai7Oa/IMtoB8XpVn+7vY3Cuzj2yHmlN+9R/k
Wb2rV5z36mnEIOSu02lqf3Eb983nf3Iadymzr70fjO5w9p45DVtPz2/zNKdV
j5Zfbj4nuyxnr37acfPg1ugkXMixWYP7Zx+9Z5/odL700zNXvrI8rmuWoav4
inQLvo3cN7+bXrHnvXPcfbfvzrz1p5Qrbn0a47COdIHzf9NprA/7jEeWSyTv
75RpjRd7B85KHyC80g8vw4fv/a0wRHMsH5u1xaG0B8SR01oPb86tVzd3/hhO
A+eD86NHdu8ZdaacUXEzNsLeN1ZyVsZMftTd9M7z1pmRvydlHns2I/8Ybmx+
DrnvnULN3xcDhJnlrJcHglngRT7a3Zbhx12S+ZNXfuXHI094h97HwK8q7+dZ
MJq9lBOgFvDdWWNxIby/eDl/h28vNv3leWBZcytvwxfsHUH4O3kX3o2jI5+t
sWJDN9Fz+JjTN6Pm1N/bL4rvfU3G0tqH44IT9s5nT54Hl72NJczr+qkxcLfn
hZHNb+XvfDM181+Kbf/YPLi09qQpz663j5gvDA3rw+hyrI/L3pAde9zYmZ6Z
1pjuwDn+atdxGvZOj2/n95K842aZh3zweR44RM4a7onv5K4zOF0eZ3ENHUoP
9c43cxUPqY9tnnI635hnsmv3yTieHjsit60+M6xD/v922ul1Na26i79+g3mc
+2vm4ZvSnQcHY/Bd2THYcJ98pnz+8bFnXWPnVlzm3/LcU6MjDohcNE/L2tnb
s6MnPpCzdMw0xuNnuYbOVO/ZPGoZMQ31CDD4y/NuMrl33rfbO7C1UudOq81U
IwgT0c+v6X4ta10R3YEjkkd8v2ngpGcvI8/AOuKa6k/8P6+DC4o=
     "]}, CompressedData["
1:eJx0u3c41f8bP04lREqyQ5qoJCESjwYpRSoVGWmHtMtIIUkoSVYpouy9Ze9s
Z28cmxRJKUV+5/27rk/fP77X9/xzX/fz9TrjdT/v+zFe5xzlM1ePnOfn4+Mr
OMPHp3pwxZHKAg7cUyRfDEmy8ctNj72AzkTDRoUVhi4sCB2dP2KqxsWB8LXO
TjvrYbj9hfel1gy82mzLTc3kYmbjOps/Jkz8zWDPXLhGx32RyM90+W7Me5Y/
X+sBBwfjRTMDczMg2md094B5P5TiypJqng1DrMlDN1CjCLFr/wwe8WPipeOs
wvniHmwTTWtWSuKiLOCcsKsJFym778dFReZAOmHVruHTvfB+Jfhae4KDJO4l
gVutnXhYu9DsfmI38k72PdjsmY3dO1b4qHr24HPLdGO9/yck9nqJeJ2qQFl1
xS3nGzRc8vx+k7mCiYEA/qPuZXQcq7p/SteQhT0XPuZrEKkQz86KifLlgOy4
4M35nRRQT8j4q4WmwGtTYgolehzHreYlv/9eC5/IkT2MoyPo6JfZs3JvH355
DZXfDC1B3iFLk2G7AfySnDcnIdOGF2sumHnYdsGn4Y7JkRQuytfvmq48n499
c1e0E+4NI5XPeGxnVC90+HdaqL0kQG2bmZl9WTHEjDfPbxQjoFnWT2btNTac
XX/sc1r5EX2SmR59vZ0IFyq4nvS9B2saBUvYZ9lgted+uqufg6KReyo++VQI
+92L8dano8rK4caG0Vb0/xn6ZCJOgvuZK9vSs+nwqThIUy0n/svNlUhXZCYJ
MHe1Ej95kQjl1i6FZbk0cPP7H1s+ScBEn563hVM35IrP6aiYd6JXki82MaAb
khd//h5378RkqHHeT5Dxg0+op0kxG9/6WtqiXTg4aX8nu0m2ExJ83fOl7/Rg
xVxwv+uhHnQekC7bJ5uHL7vRyfeQgPKrTcKu6XQMkm876vjRUfdmSdf0Iir4
3r3ofgQa7vhjy/5VBJx7c2336x+NqA2pOLRlAxGcL7tdnYRpCKuO+nyYSsfz
pvqZlIwEHC4SeDwyw4b26nvdoje78XjZCVbJbibsWmrS19ux4DCwxUxPpxuq
2vuuGa/OxtENv5XemI/Cdl9/p54lF0sK5i3abl0KuytbTnx+TEDm0dlsExcy
njwzyRM9xUBb9fGPu707YS/L6P68ohtJr8b65xt2QaLGyVU7vAb85dEenjlp
4Pv/H1/hf8/8fN1GJrR3tbtu7SOjmbFQKVWMAoX0Qy8o35kIP7v00rp81r/8
m7nZtvxzDHj1NpEb6pKwKMM1qDRuHFSpMMUa21rUi4R2+/f0okRtJM/uDBvP
jZOM2qO7sS/JkXZ3rhMeyaJnK87nwlQJnsb9NDy2unLqvCsTk4pBrx6QaBBo
WpQgPkfHb0ur4kljBjL9S5kHIln/jk97jy6+SkhGoVaS1pwKE+7kiczvmWzY
SAYOt3dzMJSteC3WlgFqKMG3S5YBwSULdssIsLBBWSCiUy4NBkm7zPb1U9BD
3vBSNJyG4KtPKy6JDcBcLOrUFmUiGh5SbFsU6Ihzpr5Zt4cO9/7MuIZrCYgM
MOyzusyGr9wJkyHw5lH8d+qfKDqMift3qh/txHF96aQJLRb2tc0cv9DJhuQ+
YljtmnQcvbm6yMmGgD8PDWICiSOYOquXKFfPhZb6NN3KoRjrFOUvRIizscbu
9oYqZRqcwxqNE9NYsGle1h0WS4JO+8NTvRwKQovsvsxOEREYXusaaElF1Aa1
Rw+PknEqnmM3GtgG3+CtFr9XpOJ6ct3Jrh+9OFl2o+7z8xFUXuwQaV9dgqyj
hfqqbwcg8W7NZafjQ/gqcvyM7clSHK9tNWZvJsA9lcSVm6qGjpTpcotABj7c
PTG1bz0bU80n7RYXklEj26Lkxpu/Cb1tHsUOHXC44Kfd5foRbw6UjWeOkXBo
/+yXllLGv3yhUdDrE5tTsKi9hXNhlom7CY/Z9+xasd3ousTzEDYaXUf6viux
sNPLTWV1FwsjufE+L8UZsFFc4RkfQYX6w10hgctSMNrtckJbaRjiVVEISGFi
do+gdPozMm597m26I9GG+5J/wp0f0rDs8ssnz74lQdifM75pPR3Ll5V9pegQ
IB3lKzbZ0YL0JlW/4A4ywjvSBpXm02Fg1bwyyJOAUx92LDq2koGAUK2TOt/o
uFRZqs0nTsTu3L+pRGsqZg6rC951T8DMhG1aghkTX6o9Fj0Tp//Lz6+4dPoa
g/Yvvu8OfVDY1AZ+war971exUOxXORMsREKiitrvlMfJcJlK9pmrHETK/bNF
ttaDKBZQePJRtgDFVtLW0V0MzBQOnAwVYCJWTDnd9zYZKOjff3JtJSIZg/ep
y1hokp9tUrWlwbFu1aY6XyYupa+eeTROh4Ujd0xDOwlhCt/KRd7SUeS7LWVV
YzUYQYTDeuIc3C58IaKowsBdfnPf2NdshEzOmYvqEmC1+vKD8gAK8j9Tpt9L
MvHhJ/Fht1cqfEJPyNXu4GL3HetfhzracFF9il9yL+/9H+51yfXrxHyxhulT
4814eFyRTd7ExsB2scvp/CSoGm9bXT+Uju3bXgvU8/jwUFFuxr0zDMRQn97t
mGKhTOCZ1cY8BjxjZgbv8fjAJ5dWQvNmw6O84QPlXQ32f9r6ae/HNLRuPtVq
RScjhql6dMuebvS+WClfwavveMdOTj6jG8JXBc2h2IOOJi3DqyeysXNPU2pM
JweJnzNL1tbQYSd864oDb278SnX3OJoyIBzXUC93nYV0KxLVcqYL1V3Myqay
DGy+7PL3/OwgriTnChFKe5EwfnZHhy4dRvVBjWmjxdienmQR59GKRhdToxV7
CTg+ukKgKoOKUTtti+bjVOzfuGb98+10/KrZvPH+UQZShqZdu4/T/p2fJfDL
5e/XZpRfPyxtT2BAstx+X6lSKnbdFWpYUMGEx3Cev/ElCqK+uLzZO0HC7B2r
BNfbbLx09dft1GDBdg11S5YJDcZcg6aybBaKDHvfMK4lQ/MNse3KFyreGNl6
e0TRcL/6ZfteQwa+LVJ3t+5hYIEvwUQykIUfbw0UO5qp0M+Y46rq0FCw2r7b
+kobpl36Th6LTcKO+Xk/7zWN4xFt2Yend8uxyQ4WIRQWLM3j+N7oUDFSH7GJ
fyEdWcm31nk0UKASodoj2kzAiP7L18083tFqX/HgXCcBxChZl8gPNBze05eh
yePFLatsLgZcTMaBN08OuU518/CRXaKjM4jn74WsO8BFiaHZ2U11JbA1Z1u4
XOzH1y0JNl5vOQjukTNdU0HE0G5T8V2MHpxb7zt3flEejBq37igR4sKCOjt4
+UUDBmaWPNzM40OPLxYld+J5fDk3apBg2Im/f2NiXUjZ4Lf/qXmmloNP3w6b
Eca4aOyMnK4hcDGY50jcZtiNxkrtOcnITNRQq251+bCxKuOZtOqbbhyI07tf
Osf9Fy886rPZYlCAxFCPqsveVEQ4J5hkUDohKdEocrWKhpOHXQ2uiHQgrT0+
vZ3Mm7slZ8MH3Gl4oK2Q5fS3E3ItHS3bPNIxaYyXbkQW1p4RD3aJIcPq6PJX
i0/1IkIkNKF6uBNFBaU+CX9Z+Fm5cmmXYQ7G785bUmRIgsp1wTxXORqk3MXN
4+SoqImyusP41gLZ/X6XdbfRocJiZzHSmGgsm6lo1mfBn9/Zf28FFWUr2rQi
jxDQ+HJ1aYJ1EvJvnuFrcWBgTviHdtwbMri/80LcOmiQu/Cr5tYNBlqZgVFb
VGloj+Zzii5gwvlIhZX9FBkqK3+1xw1R8KSFlL1gOhU9KqulM9rqcHgfH3v0
SSf2Pl5gIZzaDevR6lz311z81Hr8udO3G+kvmR8S+bIQnLnP8UYkBYHyD1bL
LuOixXT7OoPkLhT9FZU4xGZCOGu5YfVgNwK+aiiQotOxxs12rdhA5794JThj
2XaDTrRzV90WG2fj08v+EtlsJj553xeNuJSB0KV/ZxtMexFypqCUMNSJtauW
WNfr8eZPmeYUn8NC4KurwfsU2uFwoOpKnisF9+8a9FvHpOIJm9yYb8rFOeXG
H93bmFAyUvVtTOP127MbbwM6uLgaH31G+0wOuk/7HF/m1wO3A9wXyqfIWK2y
Wf9JQg+WyXdeLOTpA7WL8YlCvDof0AmZ/M27zjtrY5YGJGahl9WWfNKCweN5
z2uOe3h9xNfXoUrlIEItyE7ncx/WOJWnKSsW4G5ST7DAFgYODehxFZJ5+u9b
vaP/LjoCr741PvubjMg/TpUuvDq9315r8IvShoMSdUdXHmShdH5C2NgxHr5I
bVRW1kvFPq0aoTybNvwZMhN4HtgB0WtP+e7cbcHW4qepTx0peMvQ2f/epRkW
K24rcwNIePYlvGRTMBlNVv0VE2t4c3275GywcCuunzvQ/4jcgQVhqhdDpgkY
E364+OcNMo51rSxblU+Bg8Ib8zDRZpCXRscufx6P6q3Beo0+TSg9Whdz3ZqL
M+snvXXMuKg/NaFvzNOhzaS6MzvUu/DmyxxpoicHPe+OaKwy7MG34E/Wm8f7
cLebsk5+tgdHD59Ue62ch1jJk4+jwgbQ1DKdFlfag11z5491UrpAMjAL/NqX
h7nRRJVZHi+qu1a7ryVyMCC/5XKuZT2cl7Td7+HNQ9w8eVbzKhr016/iJnG6
Ma6z5H5MGQvDAwpRjOEMdB9dnKm56RPo34wij4j3YnJiSOzGijLc9GHY/Vw8
iIBb5S77+YcgfqS4+sLqIkSdXRKwtIqL5PzhX2YtHDxa7jQaotqHU3FyTcRX
TIQSNr35NZMDm5DXGlw6Hd6bl4Q9E2aharIlcVCUDA8zG+1EERpWzKRIFUzy
5tS+U+PPTyruJ6wPvs/iQJOq5PE1Ow3eO8w9DdoYkO26cjNbhIttSeetz9ix
0f6dWfeVd/3b4ytTNiixMdnrvUKWLxvviraZJPTTYennnn2xvwthHZsP7pLh
IEpBIj/6Dk8Xe3rdbxZpwJKAjWyhwG7ElZb02rpko3VCOviINQvPPW+6SXo0
olHVciR/LQseJw0oajx8Sj/qmhws1Ynn3javaQ7dMPI+/kFcNQfUD1I/9VwY
WOU9se64BgNZrd1RNkvZWKhZXbW9oQvfju3fcZ/ny36mDBEHeHy/OvXvUfOJ
Osg59VdXamdBzm6P4m9JFnznTW9TOl+JXa0Xjo79pGCmROfRs0YyMu7zXZ9f
RIW7W98T/mKez3ekvbSMpUHUvvzJSDgRxp+r9FPT6HAIdVxTcC4JLZw1Eu1K
dMxuNRLYvqsFs7WBGm4MOm7M+dhVn+jGrJgKRrg8XF/wI3NSgotuKduf0chA
x/090uHGbNyWI419v8eAM1/PTc6tQXxsmCb93sXEw2r/wrS7NVh4d8DXJSgN
1VpVUj71VMxzU9vtJk9DdWVwSFtLF3oJJud+rGeh2dA9pTSa5y9OblIdjCZg
n1Px11euNJgt+PvciJj2f/Hr8X36gov66FiwonqghUqBWF60BsWjDjeGVUZz
ePOfyn7dJFXRhZgTH2SZrxj/1ktO0kc2+2ViddYzLXPdPrjXX3SZ6+fgzQvp
wz/+9MPJrsLlHjEXbW7yq9Q3srBGI1hmUJcN2x6LdnsGFZT7dLOVNDL+TAk4
auj2oNXdWEyH5xcPK+ZVxj3OASk4VIE79QkTB/MWigzweHW1vC9HsRRJ3X+X
ylQyYbGFHV4wwgb1lNyk+gNen8vk8Fc7/p/1eYrn399gdOC60vfenRYUrJyv
6XPtWQqOlKof9DpXj4+raVvcHvPwuKxxXrkxF8ZdctIDDlxIdZ1V+1JNxSs+
Te2ARJ4eeqqrwzeXAc1tXdzM653IPSd0nDLTifM7sxYdNyX9iwbddTknZOjo
9WhVMDnMgsjE3F7DRxQ8Ne+udrTNAJ/Qn+L7Ebz6XuNGEzPa8FX4eUOiAAlC
QWdv7Btth/sXcXkfCRJEpo7suRRIxntjv20DR6gYpphZmOVRQCcWnSOMU3BA
P7MvUYOKVomTlNplFEgbfHE+k/QOYzLVR7pGefz1ouB20mEayClXFfbZDmPA
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
jU/HxTKuM/GkQ4Y9VE5Hn03bx3OrOFhu9Yl+ex0dBPbXhc5kOpbsvF50kZQB
g9msGzMiXIzlfm7U/cQGR6P01dalLFwafZrswsPNwAOPJFOlaXi3tumAZyUH
tfmTQl5nM7B/4nfmPjIZWXY5Lbu+DuKs/PjHoo4+pDClNAP3FqBVq6BOrXkc
vWOV/pSD5bjj/K0rQrsdN3+nv5GM6cHm4ejqnz/6ITJx68aVcQ5ujsntCHhQ
iENmlw7X+3AgflJ6f6YNC2Ozqv4miix0SGzbKfmOjt83iaZJd9gI4ZP4qrSW
AdrQjqbxLynwH1zhcPpSFb5/jmxQOMDEjcpNHw6zeHN5/o+MLw9H/rcutPHB
O6vLVHyvt+paL9gMmYf6MvOO8fzfNaq2kiYFG3eylTxOk3Djne/HFP4k/Ckp
tpNK68QD4aQzBSl1CHrqrFbhQoKt3/iTS9u4CNvSQBDeSUdO6KpvL0R64D39
hSrakom5bzcLlXYy8fez1sv9PJ/zdgpffvd2Qd5j8VldLQZK6LEqv4VZEFBe
wqELdmLDNebGaoNM3Lgn9D3nGpvnG4fm07w60SAitOiYSCckNX64/VjNgsyK
tWubnnYh83Vzr55qOtpOCJhI8/j+G+exjMYONqLdrSXsdVi4ccuact2BiQ8V
gSnehxiY9fGwUVlZAwqxym7dCQ4yDOWyzJ1S8Hq76KMYns4cf2Ww4LTsMMJz
mYvcewrxy6NcZrlpP8Tveg3xWw5hIjlrhP21HRINSeESYkWAutchOrsLk49E
6VURtdB1/3733VUa2v8wdSalWP+OcxaOva362wmRVaHbgl3TQD2h3VjX1YnP
ucuso3S7YLZNTXNtaxfu3n2+zc+kGTWRBL6ERiZIgYTcQXUarO+0S7zbmo4a
TxMXI2cm2LPBD/ZoUfHWbXd5ogkFDmGt99waSGh6vqlvXQEDW1tvK0zHUtAa
mZyJKZ4eLclav6S/HV/0X4qqF1PRLkWoXvQ2EQ75q8q1RDnwbfh9JLShGw/e
GAl9Eu9C95bXh7w0WZj6urouxooIN6ldB1/TyXglNfK6534mnJN2/2r4y8CO
v8O5W95yoGOXaEN0IMPTaHuolD0N1eclG18v4yD0XcXWv/ZMyMz+kBzbQ8I+
6pHpaJ6/1PRstNJRZ+OTjoHs6dgeqCw+oGLxpwcujQ/tBRw4EHPUerXMMBu7
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
LOhgwmnv8m97iTw0lmgidYPwv2DDRhstQncyHj2awJn3OJyQmpHFacVx79l1
R5uIPLDo+MeZUYSvHifFdC39X19swmnzAjoJ+aJxLyzUSTB0Sjkw4xMdfRl+
i65vpGOCL6X9WqQWxe+v3F07JwEJT559Hc/rgsl3/ujC/75/uv8zi0+cv1bn
5v3vKbmo1tQS8iLyxOAfry/1iztAo6VZ1NV1gP/7wZakhVwcjx3/5f0oG32m
Cb6LuQPYK2l0b8dyAR4NUYZvfi6Ed/1LvQEi3+2usXBJ/kJDtpPk0oWR3RjV
/B0VtfZ/99nu9M3iDeyjIl7yWVGGYgk2D4Q1v//ZCIXXRZH3PlCxUkFYWL6L
BkvfD0/WldJwSkfdsGYZGQ9snUuu6bTgy+v+V51HKdCjBMgsf1MF5vsjkuHV
ZAQvLv8QrEtCj8XZLu3xOFgepS2VYRO+FnD8Kfk3ldDPwj6TUAaOL3x1m76C
iUfMJLlzRJ7Q//M40DSR8u/1Jy42v58lf0YhqZIurJaCqofnnaOXcXDrIbdg
VjkFp8Red8i6MPDtDDvdck4FbsatZbYms/9tP7RaL3lWJAepgh5FKpFni7bP
ebw0holY7dOf1mVW4E+5c3HJXRqkJqZLC3qo+KFTXNpVx0RaifbWA+NtSErf
1btbrhnsjdKL4nyY//Yrkd9M03iVipvyS7zfnBPgO82r/qd0NTotOvysj/HQ
yRRb6Tybi4MWZwsMJlpx1mbvlJMZCzrW685cvpSJnq8609O/yeBdfOXKMaFi
XG3o74XSZtw6e1HPtouMjXPd/e2VP+Dcp4Wr31CJcQy8cjj5L+Xf/v/Xxn05
Y7zQuBHks3vFJcLIcD5utm9MphI8I9cwhUFCb28eWfTd9x3uxcVo5SoS451d
NSOGTuQGE86RxwXt0DsY4F/sTOij30bPjaYsbOxMcIvTYEN3bENr4IkkzPW+
cTdVgYqv5U2+PRVtYO/bMt9Jg4z15QajbxuYiKyRkv9dSsZCjdgdcqfpeGJ5
LVhDmIkbtcGkLd9YWH6w8Osij1SUuIZpdvPpiO1w8RkdYGFz7kWK9/UW9GuX
pR8rYCDYIkHo/l8S6q7Gfsk/wsS8ZY98l3VScFo040SNHg0a9NFtnpZJ/891
4hIVV06u28pCppTRMt6tHtCDXrmnOHUgL1FPv188l+CqlwN+sQKYKixTJAmx
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
lM9MKGhF+es7G40CmrDswrFYxwtUnP2wkfYqPRMvb1Y77pKsRUhmtbTSLj5k
G9ZlKqUzcGSk7OzjR0wMeVaK+7c04/BOq/gQd4KzTmRXbBTjo04i5iZnIBf3
fvgscr9A8MWKfqurV9tQ9rBib/s4B0Yt8LVcT4a1iXbm9QE2Zge4WYn8JiMj
4JOaqCb731g7+iLolHEGDt270Gq9lY2G2z/iOZ4cWMWtsXMsZmKB6pzxjY/a
UXsvo9nTqBrLFv66MxVJgULgcjP5wxzMW9rrMLKPjgbNVrm1hdnQ9o0cOxvM
RMwyUntmQCdWH+bPUd7Dh78ZSegBpwvq8eU7dg7mw6HYVTByiQ+uVYig4CBR
bys/PLuxio0VG7RnrM7kQ7XULXK3A1Ev/Kjj62/non8HXUzXhoub2rw920Pb
kZ2ZHNQ+i4WMt3HfAlQ7UXRGkdZeRUNVuDyZNKsD9W9qr649lYOVvmWi16Vo
sPJU0dfjMrHIqUlgKM5Em2vO8gudXLicy92iSeSgFdoWWqmHacizPclVPMjF
FfGoJV4emZDypDyu3s1EivSe3stDfFx7VZ1bEtOOutgk2p6cGoTtr3y8XITQ
7b/5ml1hHNT7vssZXZmP9x9n7XVdPIBl2q30sZc0uLlQA+cQevXerXtCxZOG
NaH3AkuzsmBbolG11K8LT+QfYq5yF2rkC5yvJnThUWf+x3e9r2DvwV+8+wYb
5r6PvpbuYMCywmejZR8d19TOlJfU0/FCru6mx59WPLFutx8L5uLr9S/XHsZT
EazUJSpBb4dveqDntR8ZeHH9ifmzr2QsSBUfsn3EwfDM6ltnvrMhtnN8YuaB
DiwIF3PJnMmAv5XraBfhf7kDz593T2fCYOfYaHESFb/u2Np/LKOhcMX8mLln
+fj2Tb5aI5GPNVkJsd3W7YjM1RN9coaN3r+uNo+u5P77v0/P+/jIwPcM3A89
2/f/6DrvcKz++P83NWSkVCoiKQpFJc1nClFGSkPbaqmkiJIiihJC0ZBV9p6Z
2Xvde7m3LZF2RL/z/eP3+f3xvX5/va9zzvvczv0+r9fz+Xy4r+ucd1u4qDJQ
PjC6kAy58I6RxQcJ/zhqavRkIweC66n+H6MITrHNfGegmo5yfYdgUQUbU66c
/+5OcLhA/mpMkSMNB4/EfJZ25eJDl/ryf8lsXE56J3T+RoGn7FiS/GoujJiy
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
vZtZ/8ask3qkdtNs3IiPt3vm0Ytri0rfJr3uwua7B9f7zvAx2rthd1xhAWod
reylf5CwwiGEdyqegoaD4clf71Jw19cjSnNWI2qCy+PuEPmu0cTi0uYtRH4/
37o4fgEV6rJm3rLP6lDCUPyy9jgFuhaSaqvC21Hsa3jEaaYNNx931Hoto+CF
nlV5EC8BJSarP+p2ksAIehzVea8RUeK5nRnOragVaj22cAEZgfnvAkmRNBTt
PW5Nk6Xiz5mzznlnSaCX2S70kaL8e52C6e7B7xursTO/sNwun4at15uIAESs
z57xp/OcSVAtWHN75MkbZCQ8eXw5fwwdW7wOkuwqMOfJpNd2Eh+RnmHZWhPD
4LoFDPixy2EovPnx9xkqaj5qe7MrSbg976pyCNEX1p/mOhxVbMeJYdUNf/d+
gELIlaTlqUzc+BhgeM2oDU+2DcQVmFDg8nTfWMiPekRXj7i/nCDmO3Fxe8hd
Gk7+FfK3ek+GT6VnlN5EInoc6vPUA+hY/jxyw8J4GhwcUgcNZ/eC1+7rrufQ
gxbV2UfO1uUi6qfFcCChq6XfxcmSSxl4YX3x2IWmdnjc00z0n8tH0Kr43dK+
DFTs2psjFMuHsqbYwdywDNxZ/SxwGcFR8PiwTp/Jh1i/jf2MBgMTMe8LG5sp
SAq1aL8iSANNN1DuKaH7rtxVSzP0Sdi2X3H+trOZWKQcXVCR2Qlbua/9mgZ8
yNls+513itBp9Qi7+XvbEdCwQ7uLxUOEPU+1YCgDAm6RKUddRlDlMPxTcAMf
I2ZSDrXZ7zH1xmLPlzE+ZltJdxTE0HCv5PoXA+UeuIki7nh0J2Ly1r8MXZqL
ry96hn68G4OaL223Y95HFB+rniXzuAeVxvWkHSEDSNdbWvMlkQRRkXiRL+XF
8D54MfPmFQreuD+cK6pEQ+2wjEnLp3Zkm1Y3BIkQfFoVo9tR3ILO2HOm1CUM
XMjNC2PeJ+O8c53QeHgpJJeyfl/xJSHqWd0XQQ8axGjvGfPX10GQ5Xn8YwAZ
xVNyFBXRegz47FF13Z4If2lObUYiBWN+Nk+2VnFA90lX2JzMwHy77Dlvoon8
uthQtOMZF2IXBu0tark4WBJH/2ySDhWH+1JXM6kQdfn2qJeoO7kreY4dQQxM
359lFtBO+Mby+RcyTnZgrptL0PR1NrovaVTrLquH+xL3TbX2DFy0SyqVYaTi
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
3oI1I19rvnUR+7bVsiDyWzps6kx6KzYT63Qqg6p9swrRspIXtH5SYK8fX1MR
T0fPeukvK6woCKyKGjQQFOHuQskSkatEvwb+lgyNakS6q/pqvdZmFNW7nN9v
TgdjwYbteuMNBE84PSraSsL+gE9qu+/F4kzcqO2DYi70jEIUf8gyIWqfzZ2a
I4RjZunR+d9aMP2oWsUTlQwsXChzaufz7ziZ4HOETPD8s9pzrw9tKcDX5Kvf
PZ3r4XErX+D0nNh35tGqe2UrINPk0bqd0Yiwqch8OFDQGbnqikEH9X9qO67v
jomQFDRgyZ369GW3PyCop2jrFYI7J7UfHwhQosPvGH/IWbUUtsHese0tLHwX
mO/LuUDo2EyK0zxCJ/735+rNbWWZTCpy1WJuPF+egDr6YuXlXa0w2DykJtLR
hS0hmd9XmH7ErRnHMjc2CPAz8EeGJZHvDB3jrweH8KEg+temt5aN3bdqP3Rs
Y6P4S/PXNLlMfHW4tmHcthomexKUZd+3YOO5LcKfZlxc1HsW13OA+P1ttn1/
1kfkysz6ji/TCD2UUVSMUmvB410xDilLGRj0uFYq68yHvPTbwaQTdASd17wz
MyoNB3YwHArEyzBhs6NYT5yBibMhsoUvm2GeeXPf26dM7HwTs1vWm41txga3
nbZx8TaZ5OQcSUdy5d3CFtkmWPRwVaS7kyBxtSBg6U4Opgw/M+7PIvz1mO7s
g02ErlQo7PO/0IBtF6T8/WI/4vsAZ3xoax3cVMUS2lVYuGC9/0RHNJEnT6ZZ
+dR0oGOZllHI9Fwo2iyadkeLi12f69NbbGhw8FrCWdHBw7crT29OfGRipumO
ay4JAtgN5nJvEPqmYzcy0VU5AObTs4IolWLiOBnxmV5k5N+MpGUwSRjS3eec
HUPBldyhqlEzCsQmthWspX1D09jY8cEdVJRmlVONHjVDwXxvmfgCGuYEkUvM
IqhgXI4+sSOgFjnnhmKP9lTjniZfeNSLhHTqq5B1PR/gutC4vuVpC5wXjXhs
XNYKs415xx1DhXgzOD/vtno2Vk1XlzVx4iDzSDDbeBmhj4d5jRf/siDde8gx
8Af537zGoV+PfkYx8G7ugFxfdjK2JCZqPLzfiWvbz/685dyO3aQ1n89fKMCZ
laJOWQQne97ZqXeJ4Mz1Sx/O4XuwoXThsJfhcSpED5iv3bmO/a/OkbsQOhCd
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
TTeuUKD56fD7mYoEbKRt1/uq0o64cbfb9BQObgbM8cVFLnaeCHlx4AIPIi+X
2r23S0dC1M1h3beNoP1eZeFNeHCDt/2pKXsWnor8qZiwb4VD8fJb1SUMrAxa
mvHkaxOWfsxeT05hYJ+BjLryq0SQim6toAW3o/ScyapvK8vxJudz22rVNqjP
dBxckEzCYMK7RadFuLC8odVbb8CCpyipb+9UCirFcvWfZvBwMGBpudVGGm7a
vO+uInfgxty28fTDbaDn+ZQG7M3AvGOzGyczGfjds/GtaT0T7x/18z1ooqLm
5U7+uUFt6LOtdXwk3YrjI4uyhO/S4dN9/LMHfwouO10ue+TVCXOp5V5mQ92Y
an2lVOBUj4e1JS9fBVPQv71KgjyWhZLyi03+q7rBjVFWcuzoxa8FoCkp5uLe
lkXL7MsYuL6f+8UwtxM2P+Pkkpu6kT5y/SJ3d/a/9/dnXglXH0vlwnlSe96y
l1y0tZ9/zFffDtcXb3kDWq240em3s18uDXy1xlm5u8mwlj+7Yc5bNjiLBxaK
O7Jw1T6/X8OCjOEbnSen3lMQHVKprvKdgwy+BFIViYFhFUp1XlkCfm3Yk/vt
v31RDqrfvPSNjpn7ckdOyPAQH3kmZXsiwSUaagx3AwZWuyWMD6xMQ0bipn6N
aTYGr0keHhqnQuHyijtLjYj5Y/Ny1kCkDfL3Iu/5TFJQkLlq5XZyC+rTlKue
V1Ng8s19wutOKU54Bmjleyfh4hHJoLHrBAdq/lp3rocNtVrbFxL6LOxbdKwh
4hcLp6SVM8+MEt76+9x7N1vCw32+pgdxEyDK4q/yN+lBkdutL+8+9+Dywt+O
NtfyIOV0+Xb9yk4oRVbKO5hycYJnejE5geCAD+n0Kw8yQH+2p0ltqh+q9geD
xfczsSin9/Ghp6Ww/6k1fqKEia1Hti84xp8It1HHbQJxfXjHr2nXp9SFYWvS
THh6PjY7TijPjHcjx8+q9XQiDyS38KVCX1rB6vpYc78tD82edi8zpPpxZ1+R
nMj7TujWZQhqpOWjZM551yJ3BqzpT3/wVrNA/fiuQ6WBiqaDJ2+uzybWxS7R
e+pzK8BQeiGnYNWIBu2SvylbmRDrSrArMyXhZ8k4S965DlMbe4I330rB4rSK
8XrJHrwO0nA+MtoDifdXaus2fsLeOg0KxbwTFXkbCoTEu5BmsrHv4XQbgs9b
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
IH5U8AYFwYsd9m7Tjcaqz1Kav0zb4PrX5VzQRRqkqw9ci9Wlwn/Xa423UmzU
LTjq0neUDU+PFLVNf1nQ3WKjWmmcjDVhji89DClYq+OgsqeyDYzdp9vuzBAe
2acg2iDaDieza3sMFnBhZF3sI6OdipqRnEe2MzwIhU9cEVnciuKZ1rXH/Xi4
25EzTnvPwn07auQd5Qwkbt+ioLmOjY6gh6JsUR4+1Au4rYjlIWglZfKgSxv8
f98xCpzMQMzfMlaDdick5pf3rDjVD6cs229xPZ9g+mvrgeMELy+eitowp68Z
lxNEn27LY+KBdJKT6Rgdq+KU8o6xqThkKy9Fyy5Dt85IzGkbDsLm9D6NJZ53
QG6Z2RqLFJwTTku/51OG4LbGFzPNLXCbGKiRrqLjzQ+vhRov23GwqG1oFYMN
0cuiDz+otoO2TXnBp1ES1r/tOyG4MgXCRXI87cNEfQt3/ES+RsHLofVnX+WT
4bJnQcDix1QM2gxz6VXNiN9gJG6UTEL6oUv0+HESzDun963xqYb7I+UXO6pJ
+HwooiTyazOKl/lbt16mYvN5fc0z35uwo1IqZpV/NA5T7c7UZTEQt2l94uMN
3TD0PcGXLtKJVcc3nd4s3wABQiIbc3PwZlf2B9JsGWq/WVWY1DDx/IZNWvKT
VlhYBHyqrKci7fyViWefGagTXdgV/pYBR5LAIpcvzRD1kn5TUkbFey3xj3cX
JsM3+PRJYQcu0kjDpmZr2nCmS73eM5IF213pu5NediBTyaI6PDH9f/Z7mXWg
r/HYwsWfL42vum3bQGJ8/HKU4IHU/VPlasQ8nnPRbInBWg6+jxxt+DyQjj/Z
VxSeE3G9IFh47G4RCYJ75DqiJdthwbIylZ9k4fqu9IpkIp7b+8bLMwaZiPKe
WTv3bjqW801FVlzuh/aTDRtsFTpxJrlHPzq7EKmvKm4wZVvhKe4QeCS0A0Wx
Oj72tRyM82SN4j9TsWitBXnleaI+6VbNnewj7n//RJHvuxF83r1JQqWmDGct
+qwL+rn/jre3T+WtXNmNoLV5+t1C2ch8YOSMKA6C3p0OfbW1BR3KlltINiw8
Kj30J8yC+JxDXLK6Dg/HtI6SRJPSccdhWizmdh+qvFTH4827wFDni3GfXwDF
srnrFl+vxqpPv38E7OYhPafHqupVB145qXv423UgVG4y5dS2THTz6XTNtvOw
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
ir8jFQ7lN0P3LCJ484Zz8u+XNMxWSz58YkES1NbPydTS/4yZgx1Oqt583IrZ
NPr15nuYf40rCf3Ih2pv8ZxnAVQIUtseaz7mIsYn0HuZsAFvE5yTNmcRfr5h
tOvGmhy0PGcrnzJlQOIX/UIltQ0xFhzqFddu9O/7ffi3jRCt9e4Jpzbn4Y7C
7caqTVx8PbFWNXF7I/y2axT6NVMhQ5l5RH8FByZ/tNfKhJKQobzgRPV5FvLq
t28ojubiZMykMe/XJ2yUsT+dcCUZEZ9yZPxsGXgT/XBT0AgdUQy5021/yNj0
4PeetL9UjHfdMOwL/oi0lHdnrlyhoY7xMDPqHRXK/jUcL10mvAuf+RseIGPF
aGjsnXAqGnL/PKCIJUCe4lb/rLobLc4uDwTbevG1Vs2fJ1GMaabGRuVbejFq
kSf37q0AOSo5ii4kFnJ6v/o3mOTD6/D5iNmdldj3KkTDq7kXCVkvyDnWTeCU
3JldQ/DjzG3KYpwAghdEFskG+6QgNoGpQfFkIuipbu+OIDYiXA4d0fD8hJez
xfaK9JLxK77M5bI+FcnKaZ+bZlHwZsmxDUvSWVhbztJuHaPg0PzojB3EvC2x
zzvwnJSI64Zb5pueJPJfU1anV0uALPl1fS5zuKh3Mowo/s3CjLOOVmsJXvSt
Fwl9MzcLi8+dd9lF9Nmo1n2WSRE0XNOwqSd1sVB8MeS0qnwXyPVZi2rYrbCo
/+yz9r/nqSopSBtIJiKO8WvnybntMOPfLzG6Rvw82aJMi8J6cOJVL2a84YHi
dERZy0gIdcU3UZP7s6Fnws/edU6Ahwcbp/9tFuCSq4LUSBUD6euCcniyfNhs
a1pUdS0TabplG7bbNsL6oY/ouBkJj34n77lm0YrnQQeXv+pu/p/9fJw50XlR
TVIIZpH8R/72euzs/ap6927D/+xvg5Reb5DjwSYssmm4Y2EZB/11b8N2HRZi
8PXngIMv2mE5alTetq4bpUpLfKWQC5+9JSfCIpjgvT587nYjwSn76w3XguDV
efs1Olqb0d6X07CH4Mmg8NKtqwl+lDc/fSPgRA3KtzQ6S+wSwHv5r5a+KgHy
R09bxJE68Eh8cbWYGR2UQ++LpriZ+PxFXc4hVwh2YfH2red7IBd8/srSOBas
1jxPrXHL//f7v502qx5L2feieGR+9om8btyhT5iZGeVjzhHvzIRDZHyt72gQ
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
7vwVR8eH3fYHWA1UJJ39I/pU+N//I/0MV7iSgAeJLuE3k7g48eBvaOH5Npjd
V05fpEXwaJCpUuViJpq3PCh3JneA4fr53AytLNzyNqLfK2MiyanW7kNhF4p/
+56+XN4Fxm3xGWNBJTDPlgoVXcWE4M+ad5M6DJTKVP6SCqTj2DGlrLG3JKhP
iWx+oUfDYav0JvdjHThyKmf+PXCQk/3AV2J7OoKWb3t91bkZ6bv3cubR+GgO
uzqdNSzEI0cL3Tv9AkydvNthFZVHcEdlc/NeDsyuLzilyif6H2fZrme2xPp8
kJTw6wgV7NIk0YIZfPTOLekyJngs881ykkYc4auHr3DKCL8/41VRxmmsRIHt
woqHtVxsoRZ1C0yoWJE/v671ORXJH966Njxko21ZWsS4Gg8245qUpCMpeHF5
e4tSYCe+cdcXvfHswOH83EdLLdvhmq1wemQfC2OSVQ7bH+dgPKr4r4v5ZwRu
P7T04Ck+hJ+uhnL2liB0NG6mhGIXckJtp0sn9UFpwXC7hf4HrBF/My6lRccF
lt/SPOMyyDibBG0i/H/1nyJ/sgYJFxQfz3SxJeORx9Bj6kzSf8/jsA0h+LLQ
SPCzM43gzuxTg1tzKKjWCV5wZDHxPi55jdnsTiS4VDH5+hk2ttr4T05Q6Ghx
CFFW7yC4O/H0Ys58DvRMTng10amwK79EkiX69i212q81Bxg4tPBUmNK0NGia
6LR2hXMQ3358cqsyAzciEtWpR1rwcdM+7eJ7TNzhvLW9YcRFsaXH6uPKHDDK
di04EUqGpYKryZqpanBLmrzk3dMx+2X4ajcDCt4+u1laIN2C7ZHLhIkbGRh4
KnZ4ci8Dhf1zrTRlqeh0E70hzKuFyv5XEYJcgouKjeJ/TdAwtF9lrvlxGoqW
HtZLfknHKYkTP+/MSIB1TkRK7yPivHLOqIdMdODUygu2TxzIkPre8GduJBNH
vrPvC1rbsdFV5N4PezZ2hd4XNVdMh3dGx90xTR6Mnx5/v3yzEK12XOabnxz4
z8nqOFzEh6/1WItpWhbydWsfez/mYeRO8YO/d1uQ/m5V1FmPNmjenb88QoSB
zGW2MUM3+TgW3t28sK8DQeVXfH+8SEfl6jLx2hQhZpVk9+cT/UXqOndFdZgQ
R5nr1DiEpy3zTH3ktDHnn1erXtDLin/CgM9bs0TJLe1YRS/ScH1NxniPlOaa
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
AeejTb0=
    "]}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.785673845692546*^9, 3.785673866097044*^9}, 
   3.785673945814084*^9, 3.785674028661539*^9, {3.785674153190629*^9, 
   3.785674183098373*^9}, 3.785674307330823*^9, 3.785674635587431*^9, 
   3.7856747212067413`*^9, {3.785674755905867*^9, 3.7856747786774683`*^9}, 
   3.785675544706665*^9, 3.785675592745596*^9, 3.785675767630804*^9, 
   3.7856759976620083`*^9, 3.78567613247475*^9, 3.7856761701054173`*^9, 
   3.785711145214889*^9, 3.787313856475807*^9, 3.893537657918479*^9},
 CellLabel->"Out[26]=",
 CellID->1014753803,ExpressionUUID->"3c010477-54a3-4914-bca0-f021bddef71d"]
}, Open  ]],

Cell["\<\
Apply NNMF in order to extract 24 topics using 12 maximum iteration steps, \
normalizing the right factor:\
\>", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785661789266213*^9, 3.78566179449718*^9}, {
   3.7856618501408587`*^9, 3.785661879639204*^9}, {3.785664949205443*^9, 
   3.785664963176537*^9}, {3.7856734578673773`*^9, 3.7856734598807592`*^9}, {
   3.785674348657658*^9, 3.785674349220275*^9}, {3.785674831201022*^9, 
   3.785674833833247*^9}, {3.7856954271131687`*^9, 3.7856954290245037`*^9}, 
   3.785711099647231*^9},
 CellID->409204664,ExpressionUUID->"3382de11-eb97-4a3a-8e04-6a5f5db4f217"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "23", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"W", ",", "H"}], "}"}], "=", 
    RowBox[{"NonNegativeMatrixFactorization", "[", 
     RowBox[{"matCT2", ",", "24", ",", 
      RowBox[{"MaxSteps", "\[Rule]", "12"}], ",", 
      RowBox[{"\"\<Normalization\>\"", "\[Rule]", "Right"}]}], "]"}]}], ";"}],
   "\[IndentingNewLine]", "]"}]}], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785595819394665*^9, 3.785595822455344*^9}, {
   3.7855969169795923`*^9, 3.785596946724482*^9}, {3.7855978998670197`*^9, 
   3.785597900067562*^9}, {3.78559853872164*^9, 3.7855985388541594`*^9}, {
   3.785663945385663*^9, 3.785663952707137*^9}, {3.785664157880377*^9, 
   3.785664161972309*^9}, 3.785669826818894*^9, 3.785673871246409*^9, {
   3.7856740810404654`*^9, 3.785674081443349*^9}, {3.785674231253578*^9, 
   3.785674231386046*^9}, {3.7856743160004177`*^9, 3.7856743164038467`*^9}, {
   3.785674824273766*^9, 3.785674824495545*^9}, 3.78571101944324*^9},
 CellLabel->"In[27]:=",
 CellID->159268430,ExpressionUUID->"acfbe5de-4246-46aa-92dd-d49819b1b153"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6.621746`", ",", "Null"}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.785596930143991*^9, 3.785596971684463*^9, 3.785597055459425*^9, 
   3.7855974149679947`*^9, {3.785597796705518*^9, 3.785597807741989*^9}, 
   3.785597843187104*^9, 3.785597912173517*^9, 3.785598550015483*^9, 
   3.7855986162876663`*^9, 3.7856618080100737`*^9, 3.785662433507963*^9, 
   3.785662573054237*^9, 3.785663569061842*^9, 3.7856636793999557`*^9, {
   3.785663798415016*^9, 3.785663825389944*^9}, 3.785663962872341*^9, 
   3.785664173027672*^9, 3.785664601101672*^9, 3.785667965426208*^9, 
   3.785669837077676*^9, 3.78566998114396*^9, 3.785673873228827*^9, 
   3.7856739502144957`*^9, 3.7856740351653214`*^9, 3.785674086588704*^9, 
   3.785674157314618*^9, 3.785674189952527*^9, 3.785674237788162*^9, {
   3.785674314296896*^9, 3.785674321426609*^9}, 3.785674641079701*^9, 
   3.785674724532339*^9, {3.7856747605384607`*^9, 3.785674785320643*^9}, 
   3.785674830208091*^9, 3.785675599930135*^9, 3.785676011657221*^9, 
   3.785676144548358*^9, 3.785676182178494*^9, 3.7857111562661743`*^9, 
   3.787313866055126*^9, 3.8935376645596437`*^9},
 CellLabel->"Out[28]=",
 CellID->1022266702,ExpressionUUID->"a806b606-f3ab-4aa0-87c2-b504e968fcff"]
}, Open  ]],

Cell[TextData[{
 "Show the extracted topics using the right factor ",
 Cell[BoxData[
  RowBox[{"(", "H", ")"}]], "Text", "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "fc330800-4a36-412c-a30b-23bf2edbf739"],
 ":"
}], "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785661801539176*^9, 3.785661833790588*^9}, {
  3.785673471930876*^9, 3.785673472469021*^9}, {3.785859832332543*^9, 
  3.7858598646687117`*^9}},
 CellID->824804201,ExpressionUUID->"bd0afded-7411-4ff5-a531-6999ec2e440e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Multicolumn", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Column", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{"ind", ",", "Blue", ",", "Bold"}], "]"}], ",", 
        RowBox[{"ColumnForm", "[", 
         RowBox[{"Keys", "[", 
          RowBox[{"TakeLargest", "[", 
           RowBox[{
            RowBox[{"AssociationThread", "[", 
             RowBox[{
              RowBox[{"ctObj", "[", "\"\<ColumnNames\>\"", "]"}], "->", 
              RowBox[{"Normal", "[", 
               RowBox[{"H", "\[LeftDoubleBracket]", 
                RowBox[{"ind", ",", "All"}], "\[RightDoubleBracket]"}], 
               "]"}]}], "]"}], ",", "10"}], "]"}], "]"}], "]"}]}], "}"}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"ind", ",", 
       RowBox[{
        RowBox[{"Dimensions", "[", "H", "]"}], "\[LeftDoubleBracket]", "1", 
        "\[RightDoubleBracket]"}]}], "}"}]}], "\[IndentingNewLine]", "]"}], 
   ",", "8", ",", 
   RowBox[{"Dividers", "\[Rule]", "All"}]}], "]"}]], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785597004958852*^9, 3.7855970158013287`*^9}, {
   3.785597083597335*^9, 3.785597268043523*^9}, {3.785597485241984*^9, 
   3.7855975768842497`*^9}, {3.785597896549004*^9, 3.7855978976045523`*^9}, {
   3.7856641492507544`*^9, 3.785664149428738*^9}, 3.785669857824348*^9},
 CellLabel->"In[29]:=",
 CellID->457183656,ExpressionUUID->"3d1e016a-64e2-41fd-9bf8-cb563c837674"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox["1",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"action\"\>"},
            {"\<\"bore\"\>"},
            {"\<\"formula\"\>"},
            {"\<\"tag:neg\"\>"},
            {"\<\"sequenc\"\>"},
            {"\<\"scene\"\>"},
            {"\<\"emot\"\>"},
            {"\<\"pictur\"\>"},
            {"\<\"problem\"\>"},
            {"\<\"big\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "action", "bore", "formula", "tag:neg", "sequenc", "scene", "emot",
             "pictur", "problem", "big"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["4",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"make\"\>"},
            {"\<\"wai\"\>"},
            {"\<\"want\"\>"},
            {"\<\"know\"\>"},
            {"\<\"fail\"\>"},
            {"\<\"heart\"\>"},
            {"\<\"care\"\>"},
            {"\<\"feel\"\>"},
            {"\<\"world\"\>"},
            {"\<\"try\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "make", "wai", "want", "know", "fail", "heart", "care", "feel", 
            "world", "try"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["7",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"origin\"\>"},
            {"\<\"love\"\>"},
            {"\<\"drama\"\>"},
            {"\<\"move\"\>"},
            {"\<\"uniqu\"\>"},
            {"\<\"music\"\>"},
            {"\<\"sequel\"\>"},
            {"\<\"neither\"\>"},
            {"\<\"life\"\>"},
            {"\<\"version\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "origin", "love", "drama", "move", "uniqu", "music", "sequel", 
            "neither", "life", "version"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["10",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"stori\"\>"},
            {"\<\"tale\"\>"},
            {"\<\"tell\"\>"},
            {"\<\"told\"\>"},
            {"\<\"set\"\>"},
            {"\<\"compel\"\>"},
            {"\<\"script\"\>"},
            {"\<\"live\"\>"},
            {"\<\"better\"\>"},
            {"\<\"cultur\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "stori", "tale", "tell", "told", "set", "compel", "script", "live",
             "better", "cultur"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["13",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"charact\"\>"},
            {"\<\"titl\"\>"},
            {"\<\"studi\"\>"},
            {"\<\"plot\"\>"},
            {"\<\"engag\"\>"},
            {"\<\"complex\"\>"},
            {"\<\"effect\"\>"},
            {"\<\"clever\"\>"},
            {"\<\"cast\"\>"},
            {"\<\"script\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "charact", "titl", "studi", "plot", "engag", "complex", "effect", 
            "clever", "cast", "script"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["16",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"littl\"\>"},
            {"\<\"come\"\>"},
            {"\<\"dull\"\>"},
            {"\<\"laugh\"\>"},
            {"\<\"lot\"\>"},
            {"\<\"love\"\>"},
            {"\<\"histori\"\>"},
            {"\<\"offer\"\>"},
            {"\<\"plot\"\>"},
            {"\<\"predict\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "littl", "come", "dull", "laugh", "lot", "love", "histori", 
            "offer", "plot", "predict"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["19",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"good\"\>"},
            {"\<\"time\"\>"},
            {"\<\"run\"\>"},
            {"\<\"wast\"\>"},
            {"\<\"intent\"\>"},
            {"\<\"girl\"\>"},
            {"\<\"nearli\"\>"},
            {"\<\"matter\"\>"},
            {"\<\"spend\"\>"},
            {"\<\"direct\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "good", "time", "run", "wast", "intent", "girl", "nearli", 
            "matter", "spend", "direct"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["22",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"humor\"\>"},
            {"\<\"lot\"\>"},
            {"\<\"thriller\"\>"},
            {"\<\"subject\"\>"},
            {"\<\"matter\"\>"},
            {"\<\"kind\"\>"},
            {"\<\"genr\"\>"},
            {"\<\"sens\"\>"},
            {"\<\"audienc\"\>"},
            {"\<\"intellig\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "humor", "lot", "thriller", "subject", "matter", "kind", "genr", 
            "sens", "audienc", "intellig"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]},
    {
     TagBox[GridBox[{
        {
         StyleBox["2",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"tag:posit\"\>"},
            {"\<\"comedi\"\>"},
            {"\<\"romant\"\>"},
            {"\<\"fun\"\>"},
            {"\<\"world\"\>"},
            {"\<\"portrait\"\>"},
            {"\<\"charm\"\>"},
            {"\<\"hilari\"\>"},
            {"\<\"black\"\>"},
            {"\<\"laugh\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "tag:posit", "comedi", "romant", "fun", "world", "portrait", 
            "charm", "hilari", "black", "laugh"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["5",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"great\"\>"},
            {"\<\"que\"\>"},
            {"\<\"documentari\"\>"},
            {"\<\"drama\"\>"},
            {"\<\"tag:posit\"\>"},
            {"\<\"manag\"\>"},
            {"\<\"premis\"\>"},
            {"\<\"cinema\"\>"},
            {"\<\"fun\"\>"},
            {"\<\"creativ\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "great", "que", "documentari", "drama", "tag:posit", "manag", 
            "premis", "cinema", "fun", "creativ"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["8",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"work\"\>"},
            {"\<\"piec\"\>"},
            {"\<\"strong\"\>"},
            {"\<\"feel\"\>"},
            {"\<\"tag:posit\"\>"},
            {"\<\"ambiti\"\>"},
            {"\<\"move\"\>"},
            {"\<\"better\"\>"},
            {"\<\"sensit\"\>"},
            {"\<\"quit\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "work", "piec", "strong", "feel", "tag:posit", "ambiti", "move", 
            "better", "sensit", "quit"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["11",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"entertain\"\>"},
            {"\<\"pictur\"\>"},
            {"\<\"moment\"\>"},
            {"\<\"offer\"\>"},
            {"\<\"classic\"\>"},
            {"\<\"worth\"\>"},
            {"\<\"effect\"\>"},
            {"\<\"huge\"\>"},
            {"\<\"busi\"\>"},
            {"\<\"set\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "entertain", "pictur", "moment", "offer", "classic", "worth", 
            "effect", "huge", "busi", "set"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["14",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"film\"\>"},
            {"\<\"tag:posit\"\>"},
            {"\<\"know\"\>"},
            {"\<\"problem\"\>"},
            {"\<\"thought\"\>"},
            {"\<\"que\"\>"},
            {"\<\"book\"\>"},
            {"\<\"honest\"\>"},
            {"\<\"american\"\>"},
            {"\<\"compel\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "film", "tag:posit", "know", "problem", "thought", "que", "book", 
            "honest", "american", "compel"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["17",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"tag:neg\"\>"},
            {"\<\"comedi\"\>"},
            {"\<\"dull\"\>"},
            {"\<\"mess\"\>"},
            {"\<\"minut\"\>"},
            {"\<\"predict\"\>"},
            {"\<\"direct\"\>"},
            {"\<\"come\"\>"},
            {"\<\"gener\"\>"},
            {"\<\"script\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "tag:neg", "comedi", "dull", "mess", "minut", "predict", "direct", 
            "come", "gener", "script"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["20",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"funni\"\>"},
            {"\<\"tag:posit\"\>"},
            {"\<\"touch\"\>"},
            {"\<\"move\"\>"},
            {"\<\"ultim\"\>"},
            {"\<\"realli\"\>"},
            {"\<\"flick\"\>"},
            {"\<\"dramat\"\>"},
            {"\<\"sharp\"\>"},
            {"\<\"stuff\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "funni", "tag:posit", "touch", "move", "ultim", "realli", "flick", 
            "dramat", "sharp", "stuff"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["23",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"need\"\>"},
            {"\<\"thing\"\>"},
            {"\<\"charm\"\>"},
            {"\<\"world\"\>"},
            {"\<\"peopl\"\>"},
            {"\<\"moment\"\>"},
            {"\<\"sometim\"\>"},
            {"\<\"compel\"\>"},
            {"\<\"touch\"\>"},
            {"\<\"star\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "need", "thing", "charm", "world", "peopl", "moment", "sometim", 
            "compel", "touch", "star"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]},
    {
     TagBox[GridBox[{
        {
         StyleBox["3",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"watch\"\>"},
            {"\<\"minut\"\>"},
            {"\<\"fun\"\>"},
            {"\<\"time\"\>"},
            {"\<\"peopl\"\>"},
            {"\<\"laugh\"\>"},
            {"\<\"pleasur\"\>"},
            {"\<\"girl\"\>"},
            {"\<\"think\"\>"},
            {"\<\"experi\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "watch", "minut", "fun", "time", "peopl", "laugh", "pleasur", 
            "girl", "think", "experi"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["6",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"movi\"\>"},
            {"\<\"real\"\>"},
            {"\<\"tag:neg\"\>"},
            {"\<\"make\"\>"},
            {"\<\"start\"\>"},
            {"\<\"want\"\>"},
            {"\<\"entir\"\>"},
            {"\<\"reason\"\>"},
            {"\<\"crime\"\>"},
            {"\<\"ultim\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "movi", "real", "tag:neg", "make", "start", "want", "entir", 
            "reason", "crime", "ultim"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["9",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"just\"\>"},
            {"\<\"end\"\>"},
            {"\<\"cast\"\>"},
            {"\<\"director\"\>"},
            {"\<\"long\"\>"},
            {"\<\"minut\"\>"},
            {"\<\"move\"\>"},
            {"\<\"wast\"\>"},
            {"\<\"come\"\>"},
            {"\<\"interest\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "just", "end", "cast", "director", "long", "minut", "move", "wast",
             "come", "interest"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["12",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"perform\"\>"},
            {"\<\"fine\"\>"},
            {"\<\"lead\"\>"},
            {"\<\"tag:posit\"\>"},
            {"\<\"power\"\>"},
            {"\<\"except\"\>"},
            {"\<\"cast\"\>"},
            {"\<\"get\"\>"},
            {"\<\"solid\"\>"},
            {"\<\"actor\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "perform", "fine", "lead", "tag:posit", "power", "except", "cast", 
            "get", "solid", "actor"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["15",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"amus\"\>"},
            {"\<\"famili\"\>"},
            {"\<\"mildli\"\>"},
            {"\<\"look\"\>"},
            {"\<\"real\"\>"},
            {"\<\"enjoy\"\>"},
            {"\<\"adult\"\>"},
            {"\<\"documentari\"\>"},
            {"\<\"qualiti\"\>"},
            {"\<\"better\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "amus", "famili", "mildli", "look", "real", "enjoy", "adult", 
            "documentari", "qualiti", "better"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["18",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"best\"\>"},
            {"\<\"year\"\>"},
            {"\<\"year'\"\>"},
            {"\<\"far\"\>"},
            {"\<\"documentari\"\>"},
            {"\<\"tag:posit\"\>"},
            {"\<\"worst\"\>"},
            {"\<\"possibl\"\>"},
            {"\<\"date\"\>"},
            {"\<\"repetit\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "best", "year", "year'", "far", "documentari", "tag:posit", 
            "worst", "possibl", "date", "repetit"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["21",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"bad\"\>"},
            {"\<\"realli\"\>"},
            {"\<\"screen\"\>"},
            {"\<\"ultim\"\>"},
            {"\<\"just\"\>"},
            {"\<\"gui\"\>"},
            {"\<\"joke\"\>"},
            {"\<\"big\"\>"},
            {"\<\"boi\"\>"},
            {"\<\"comfort\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "bad", "realli", "screen", "ultim", "just", "gui", "joke", "big", 
            "boi", "comfort"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["24",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"like\"\>"},
            {"\<\"feel\"\>"},
            {"\<\"plai\"\>"},
            {"\<\"look\"\>"},
            {"\<\"sweet\"\>"},
            {"\<\"sound\"\>"},
            {"\<\"life\"\>"},
            {"\<\"dai\"\>"},
            {"\<\"new\"\>"},
            {"\<\"probabl\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "like", "feel", "plai", "look", "sweet", "sound", "life", "dai", 
            "new", "probabl"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.785597079801074*^9, 3.785597098928862*^9}, {
   3.785597132343948*^9, 3.785597166320199*^9}, {3.785597233240438*^9, 
   3.785597268596322*^9}, 3.78559741508685*^9, {3.7855974969916677`*^9, 
   3.7855975772500267`*^9}, 3.785597807843268*^9, 3.785597843281857*^9, 
   3.785597912254993*^9, 3.785598550080904*^9, 3.7855986164163218`*^9, 
   3.785661839215263*^9, 3.785663852120448*^9, 3.785663922209175*^9, 
   3.785663962971518*^9, 3.785664149888098*^9, 3.7856646011914473`*^9, 
   3.7856679655126123`*^9, 3.785669859824795*^9, 3.785669981217861*^9, 
   3.785673874819132*^9, 3.785673950299169*^9, 3.785674035276053*^9, 
   3.785674086694846*^9, 3.785674157415406*^9, 3.78567419005974*^9, {
   3.785674237902954*^9, 3.785674242723098*^9}, 3.785674321524832*^9, 
   3.78567464118114*^9, 3.785674724645961*^9, {3.78567476063904*^9, 
   3.7856747854074087`*^9}, 3.785674830285667*^9, 3.785675600027652*^9, 
   3.785675771455391*^9, 3.785676011746263*^9, 3.785676144632263*^9, 
   3.785676182260613*^9, 3.785711156374044*^9, 3.787313866135544*^9, 
   3.893537664612729*^9},
 CellLabel->"Out[29]=",
 CellID->1367284514,ExpressionUUID->"a360887d-f26f-4f5a-9e65-1fa0d90bb58f"]
}, Open  ]],

Cell["\<\
Here we show statistical thesaurus entries for random words, selected words \
and the labels (\[OpenCurlyDoubleQuote]tag:positive\[CloseCurlyDoubleQuote],\
\[CloseCurlyDoubleQuote]tag:negative\[CloseCurlyDoubleQuote]):\
\>", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785662757862879*^9, 3.785662758267723*^9}, {
   3.7856640028950253`*^9, 3.785664060877966*^9}, {3.7856650259762917`*^9, 
   3.785665027121179*^9}, {3.7856762234201403`*^9, 3.785676243142071*^9}, 
   3.785846961922968*^9},
 CellID->492869140,ExpressionUUID->"83080cae-fd5b-4171-b24e-a91724a27f9d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "898", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rinds", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Position", "[", 
       RowBox[{
        RowBox[{"ctObj", "[", "\"\<ColumnNames\>\"", "]"}], ",", "#"}], "]"}],
       "&"}], "/@", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"WordData", "[", 
         RowBox[{"#", ",", "\"\<PorterStem\>\""}], "]"}], "&"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "\"\<tag:positive\>\"", ",", "\"\<tag:negative\>\"", ",", 
         "\"\<book\>\"", ",", "\"\<amusing\>\"", ",", "\"\<actor\>\"", ",", 
         "\"\<plot\>\"", ",", "\"\<culture\>\"", ",", "\"\<comedy\>\"", ",", 
         "\"\<director\>\"", ",", "\"\<thoughtful\>\"", ",", "\"\<epic\>\"", 
         ",", "\"\<film\>\"", ",", "\"\<bad\>\"", ",", "\"\<good\>\""}], 
        "}"}]}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rinds", "=", 
   RowBox[{"Sort", "@", 
    RowBox[{"Join", "[", 
     RowBox[{"rinds", ",", 
      RowBox[{"RandomSample", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{
          RowBox[{"Dimensions", "[", "H", "]"}], "\[LeftDoubleBracket]", "2", 
          "\[RightDoubleBracket]"}], "]"}], ",", 
        RowBox[{"16", "-", 
         RowBox[{"Length", "[", "rinds", "]"}]}]}], "]"}]}], "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{"Multicolumn", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Column", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ctObj", "[", "\"\<ColumnNames\>\"", "]"}], 
           "\[LeftDoubleBracket]", "ind", "\[RightDoubleBracket]"}], ",", 
          "Blue", ",", "Bold"}], "]"}], ",", 
        RowBox[{"ColumnForm", "[", 
         RowBox[{
          RowBox[{"ctObj", "[", "\"\<ColumnNames\>\"", "]"}], 
          "\[LeftDoubleBracket]", 
          RowBox[{"Flatten", "@", 
           RowBox[{"Nearest", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Normal", "[", 
               RowBox[{"Transpose", "[", "H", "]"}], "]"}], "\[Rule]", 
              "\"\<Index\>\""}], ",", 
             RowBox[{"H", "\[LeftDoubleBracket]", 
              RowBox[{"All", ",", "ind"}], "\[RightDoubleBracket]"}], ",", 
             "12"}], "]"}]}], "\[RightDoubleBracket]"}], "]"}]}], "}"}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"ind", ",", "rinds"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
   ",", "8", ",", 
   RowBox[{"Dividers", "\[Rule]", "All"}]}], "]"}]}], "Input", "ExampleInput",
 
 TaggingRules->{},
 CellChangeTimes->{{3.785598345431723*^9, 3.7855984786320343`*^9}, {
   3.785598546482143*^9, 3.785598546512199*^9}, {3.785664066617796*^9, 
   3.785664071948564*^9}, {3.7856698433892117`*^9, 3.7856698443432407`*^9}, {
   3.7856741014591913`*^9, 3.785674101659605*^9}, {3.78567465604779*^9, 
   3.785674680910857*^9}, {3.785674927583555*^9, 3.785675065205349*^9}, {
   3.785675097765339*^9, 3.785675218782097*^9}, 3.785677206175365*^9},
 CellLabel->"In[30]:=",
 CellID->1879382821,ExpressionUUID->"2654894b-2528-49fa-9a25-c7c9fd17ecb1"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox["\<\"actor\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"actor\"\>"},
            {"\<\"solid\"\>"},
            {"\<\"excel\"\>"},
            {"\<\"terrif\"\>"},
            {"\<\"lead\"\>"},
            {"\<\"combin\"\>"},
            {"\<\"moral\"\>"},
            {"\<\"win\"\>"},
            {"\<\"direct\"\>"},
            {"\<\"central\"\>"},
            {"\<\"especi\"\>"},
            {"\<\"write\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "actor", "solid", "excel", "terrif", "lead", "combin", "moral", 
            "win", "direct", "central", "especi", "write"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"bad\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"bad\"\>"},
            {"\<\"realli\"\>"},
            {"\<\"screen\"\>"},
            {"\<\"ultim\"\>"},
            {"\<\"gui\"\>"},
            {"\<\"joke\"\>"},
            {"\<\"boi\"\>"},
            {"\<\"comfort\"\>"},
            {"\<\"big\"\>"},
            {"\<\"premis\"\>"},
            {"\<\"truli\"\>"},
            {"\<\"extrem\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "bad", "realli", "screen", "ultim", "gui", "joke", "boi", 
            "comfort", "big", "premis", "truli", "extrem"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"comedi\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"comedi\"\>"},
            {"\<\"romant\"\>"},
            {"\<\"hilari\"\>"},
            {"\<\"portrait\"\>"},
            {"\<\"black\"\>"},
            {"\<\"appeal\"\>"},
            {"\<\"enjoy\"\>"},
            {"\<\"cinemat\"\>"},
            {"\<\"give\"\>"},
            {"\<\"witti\"\>"},
            {"\<\"definit\"\>"},
            {"\<\"surpris\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "comedi", "romant", "hilari", "portrait", "black", "appeal", 
            "enjoy", "cinemat", "give", "witti", "definit", "surpris"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"director\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"director\"\>"},
            {"\<\"long\"\>"},
            {"\<\"begin\"\>"},
            {"\<\"interest\"\>"},
            {"\<\"viewer\"\>"},
            {"\<\"past\"\>"},
            {"\<\"care\"\>"},
            {"\<\"mess\"\>"},
            {"\<\"tri\"\>"},
            {"\<\"wast\"\>"},
            {"\<\"mediocr\"\>"},
            {"\<\"plain\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "director", "long", "begin", "interest", "viewer", "past", "care", 
            "mess", "tri", "wast", "mediocr", "plain"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"film\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"film\"\>"},
            {"\<\"thought\"\>"},
            {"\<\"book\"\>"},
            {"\<\"honest\"\>"},
            {"\<\"know\"\>"},
            {"\<\"death\"\>"},
            {"\<\"american\"\>"},
            {"\<\"extrem\"\>"},
            {"\<\"problem\"\>"},
            {"\<\"import\"\>"},
            {"\<\"provoc\"\>"},
            {"\<\"ambiti\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "film", "thought", "book", "honest", "know", "death", "american", 
            "extrem", "problem", "import", "provoc", "ambiti"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"plot\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"plot\"\>"},
            {"\<\"human\"\>"},
            {"\<\"hope\"\>"},
            {"\<\"gener\"\>"},
            {"\<\"give\"\>"},
            {"\<\"leav\"\>"},
            {"\<\"person\"\>"},
            {"\<\"effort\"\>"},
            {"\<\"hard\"\>"},
            {"\<\"wit\"\>"},
            {"\<\"fill\"\>"},
            {"\<\"predict\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "plot", "human", "hope", "gener", "give", "leav", "person", 
            "effort", "hard", "wit", "fill", "predict"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"tag:posit\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"tag:posit\"\>"},
            {"\<\"comedi\"\>"},
            {"\<\"romant\"\>"},
            {"\<\"fun\"\>"},
            {"\<\"portrait\"\>"},
            {"\<\"world\"\>"},
            {"\<\"hilari\"\>"},
            {"\<\"documentari\"\>"},
            {"\<\"black\"\>"},
            {"\<\"give\"\>"},
            {"\<\"enjoy\"\>"},
            {"\<\"power\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "tag:posit", "comedi", "romant", "fun", "portrait", "world", 
            "hilari", "documentari", "black", "give", "enjoy", "power"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"thought\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"thought\"\>"},
            {"\<\"welcom\"\>"},
            {"\<\"previou\"\>"},
            {"\<\"challeng\"\>"},
            {"\<\"warm\"\>"},
            {"\<\"impact\"\>"},
            {"\<\"femal\"\>"},
            {"\<\"exactli\"\>"},
            {"\<\"danc\"\>"},
            {"\<\"pure\"\>"},
            {"\<\"beautifulli\"\>"},
            {"\<\"energet\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "thought", "welcom", "previou", "challeng", "warm", "impact", 
            "femal", "exactli", "danc", "pure", "beautifulli", "energet"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]},
    {
     TagBox[GridBox[{
        {
         StyleBox["\<\"amus\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"amus\"\>"},
            {"\<\"famili\"\>"},
            {"\<\"mildli\"\>"},
            {"\<\"look\"\>"},
            {"\<\"enjoy\"\>"},
            {"\<\"real\"\>"},
            {"\<\"adult\"\>"},
            {"\<\"qualiti\"\>"},
            {"\<\"exercis\"\>"},
            {"\<\"better\"\>"},
            {"\<\"documentari\"\>"},
            {"\<\"clever\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "amus", "famili", "mildli", "look", "enjoy", "real", "adult", 
            "qualiti", "exercis", "better", "documentari", "clever"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"book\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"book\"\>"},
            {"\<\"danc\"\>"},
            {"\<\"modern\"\>"},
            {"\<\"remain\"\>"},
            {"\<\"maintain\"\>"},
            {"\<\"read\"\>"},
            {"\<\"break\"\>"},
            {"\<\"friendship\"\>"},
            {"\<\"reflect\"\>"},
            {"\<\"provoc\"\>"},
            {"\<\"energet\"\>"},
            {"\<\"pure\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "book", "danc", "modern", "remain", "maintain", "read", "break", 
            "friendship", "reflect", "provoc", "energet", "pure"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"cultur\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"cultur\"\>"},
            {"\<\"understand\"\>"},
            {"\<\"horror\"\>"},
            {"\<\"fight\"\>"},
            {"\<\"coming-of-ag\"\>"},
            {"\<\"face\"\>"},
            {"\<\"simpli\"\>"},
            {"\<\"attent\"\>"},
            {"\<\"amount\"\>"},
            {"\<\"slightli\"\>"},
            {"\<\"larg\"\>"},
            {"\<\"short\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "cultur", "understand", "horror", "fight", "coming-of-ag", "face", 
            "simpli", "attent", "amount", "slightli", "larg", "short"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"epic\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"epic\"\>"},
            {"\<\"transcend\"\>"},
            {"\<\"taken\"\>"},
            {"\<\"search\"\>"},
            {"\<\"fulli\"\>"},
            {"\<\"realist\"\>"},
            {"\<\"record\"\>"},
            {"\<\"ponder\"\>"},
            {"\<\"drug\"\>"},
            {"\<\"edg\"\>"},
            {"\<\"total\"\>"},
            {"\<\"utterli\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "epic", "transcend", "taken", "search", "fulli", "realist", 
            "record", "ponder", "drug", "edg", "total", "utterli"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"good\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"good\"\>"},
            {"\<\"time\"\>"},
            {"\<\"run\"\>"},
            {"\<\"intent\"\>"},
            {"\<\"wast\"\>"},
            {"\<\"nearli\"\>"},
            {"\<\"girl\"\>"},
            {"\<\"spend\"\>"},
            {"\<\"direct\"\>"},
            {"\<\"rememb\"\>"},
            {"\<\"masterpiec\"\>"},
            {"\<\"hardli\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "good", "time", "run", "intent", "wast", "nearli", "girl", "spend",
             "direct", "rememb", "masterpiec", "hardli"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"tag:neg\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"tag:neg\"\>"},
            {"\<\"mess\"\>"},
            {"\<\"predict\"\>"},
            {"\<\"dull\"\>"},
            {"\<\"exercis\"\>"},
            {"\<\"formula\"\>"},
            {"\<\"sequenc\"\>"},
            {"\<\"direct\"\>"},
            {"\<\"gener\"\>"},
            {"\<\"problem\"\>"},
            {"\<\"big\"\>"},
            {"\<\"clich\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "tag:neg", "mess", "predict", "dull", "exercis", "formula", 
            "sequenc", "direct", "gener", "problem", "big", "clich"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"technic\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"technic\"\>"},
            {"\<\"opera\"\>"},
            {"\<\"chase\"\>"},
            {"\<\"father\"\>"},
            {"\<\"abil\"\>"},
            {"\<\"crazi\"\>"},
            {"\<\"atmospher\"\>"},
            {"\<\"steal\"\>"},
            {"\<\"trick\"\>"},
            {"\<\"typic\"\>"},
            {"\<\"blue\"\>"},
            {"\<\"major\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "technic", "opera", "chase", "father", "abil", "crazi", 
            "atmospher", "steal", "trick", "typic", "blue", "major"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"type\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         InterpretationBox[GridBox[{
            {"\<\"type\"\>"},
            {"\<\"demand\"\>"},
            {"\<\"consider\"\>"},
            {"\<\"edg\"\>"},
            {"\<\"learn\"\>"},
            {"\<\"utterli\"\>"},
            {"\<\"certain\"\>"},
            {"\<\"repres\"\>"},
            {"\<\"open\"\>"},
            {"\<\"throughout\"\>"},
            {"\<\"fast\"\>"},
            {"\<\"total\"\>"}
           },
           BaselinePosition->{Baseline, {1, 1}},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
          
          
          ColumnForm[{
           "type", "demand", "consider", "edg", "learn", "utterli", "certain",
             "repres", "open", "throughout", "fast", "total"}],
          Editable->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.785598019492693*^9, {3.7855981790766773`*^9, 3.785598213524146*^9}, {
   3.785598261055167*^9, 3.78559832377142*^9}, {3.7855984810548763`*^9, 
   3.785598501883131*^9}, {3.7855985502268953`*^9, 3.785598556846416*^9}, 
   3.7856639255274897`*^9, 3.7856639734172497`*^9, 3.7856640732922373`*^9, 
   3.7856641306704063`*^9, 3.78566460128273*^9, 3.7856679655953093`*^9, 
   3.7856698635010757`*^9, 3.785673885788953*^9, 3.785673950406321*^9, 
   3.78567405557845*^9, {3.785674093225522*^9, 3.785674103350689*^9}, {
   3.785674170390479*^9, 3.785674205069187*^9}, 3.7856742499770203`*^9, 
   3.78567433008607*^9, 3.7856746829924593`*^9, {3.7856747395569963`*^9, 
   3.7856747920781918`*^9}, 3.785674838774631*^9, 3.785674966311886*^9, {
   3.785674996961541*^9, 3.7856750668070383`*^9}, {3.785675100168894*^9, 
   3.7856751129085207`*^9}, {3.785675143597974*^9, 3.785675220133752*^9}, 
   3.785675614723691*^9, 3.7856757853705873`*^9, 3.7856760288225803`*^9, 
   3.785676144741387*^9, 3.785676189916506*^9, 3.785676281241067*^9, 
   3.7857111564299498`*^9, 3.787313866175982*^9, 3.8935376646406107`*^9},
 CellLabel->"Out[33]=",
 CellID->1875803898,ExpressionUUID->"26c6debf-316c-4fee-bf2c-995504d6c08a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "Properties & Relations", "ExampleSection",ExpressionUUID->
   "5b1de75d-6f40-4e91-bfe4-72e43d407737"],
  $Line = 0; Null]], "ExampleSection",
 CellID->971260113,ExpressionUUID->"9b9e517f-ca29-4674-a6d4-f8404359a263"],

Cell["\<\
NNMF should be compared with the singular value decomposition (SVD) and \
independent component analysis (ICA).\
\>", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.7856697305357857`*^9, 3.785669772769065*^9}, {
   3.785695463896851*^9, 3.785695465041212*^9}, 3.785711099683798*^9, {
   3.785846975539571*^9, 3.785846988515226*^9}},
 CellID->1985772125,ExpressionUUID->"cc6343ed-3bb1-41ef-b0e7-118367938c77"],

Cell["Generate 3D points:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.785670070617907*^9, 3.785670089527769*^9}, {
  3.785676411875371*^9, 3.785676468843246*^9}, {3.785676607941926*^9, 
  3.785676616400537*^9}},
 CellID->627721842,ExpressionUUID->"52dbd8b6-5c50-4b54-abaf-8b3dccc6ad9c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "200"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c", "=", "12"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SeedRandom", "[", "232", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"points", "=", 
   RowBox[{"Transpose", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"RandomVariate", "[", 
       RowBox[{
        RowBox[{"NormalDistribution", "[", 
         RowBox[{"0", ",", "#"}], "]"}], ",", "n"}], "]"}], "&"}], "/@", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "0.1"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"points", "=", 
   RowBox[{"points", ".", 
    RowBox[{"RotationMatrix", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0", ",", "1"}], "}"}]}], "}"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"points", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "8", ",", "2"}], "}"}], "+", "#"}], "&"}], ",", 
     "points"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"points", "=", 
   RowBox[{"Clip", "[", 
    RowBox[{"points", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"Max", "[", "points", "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"opts", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"BoxRatios", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"c", ",", 
          RowBox[{"-", "c"}]}], "}"}], ",", "3"}], "]"}]}], ",", 
     RowBox[{"FaceGrids", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", 
          RowBox[{"-", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"ViewPoint", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1.1"}], ",", 
        RowBox[{"-", "2.43"}], ",", "2.09"}], "}"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gr0", "=", 
   RowBox[{"ListPointPlot3D", "[", 
    RowBox[{"points", ",", "opts"}], "]"}]}], ";"}]}], "Input", "ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785670091621346*^9, 3.785670160629175*^9}, {
  3.785670192658847*^9, 3.785670210770506*^9}, {3.785670242938051*^9, 
  3.78567028568786*^9}, {3.78567052788328*^9, 3.785670528487864*^9}, {
  3.785670844428116*^9, 3.7856708640477448`*^9}, {3.785670911289155*^9, 
  3.785670926283723*^9}, {3.785671101001891*^9, 3.785671131925495*^9}, {
  3.785671210352995*^9, 3.785671210913076*^9}, {3.785676336531947*^9, 
  3.785676338994254*^9}, {3.785676476838395*^9, 3.78567660038281*^9}, {
  3.785676686289315*^9, 3.785676881678913*^9}, {3.785677023346875*^9, 
  3.785677061673883*^9}, {3.785711032512536*^9, 3.7857110755086803`*^9}},
 CellLabel->"In[1]:=",
 CellID->670285794,ExpressionUUID->"1c7d46ef-59da-4780-8536-f4cb691aeaea"],

Cell["\<\
Compute matrix factorizations using NNMF, SVD and ICA and make a comparison \
plots grid (rotate the graphics boxes for better perception):\
\>", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.7856766197551403`*^9, 3.785676657643332*^9}, {
   3.785676742132688*^9, 3.785676742829895*^9}, {3.785676908051914*^9, 
   3.785676936875313*^9}, 3.785711099720125*^9, 3.7858470221098843`*^9},
 CellID->1116080190,ExpressionUUID->"29cb2d64-5d3a-40ff-a1ca-4265ed78fce0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "232", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"W", ",", "H"}], "}"}], "=", 
   RowBox[{"NonNegativeMatrixFactorization", "[", 
    RowBox[{"points", ",", "2", ",", 
     RowBox[{"\"\<Normalization\>\"", "\[Rule]", "Right"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"grNNMF", "=", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"ListPointPlot3D", "[", "points", "]"}], ",", 
       RowBox[{"Graphics3D", "[", 
        RowBox[{"{", 
         RowBox[{"Red", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Arrow", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", "#"}], "}"}], 
             "]"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"c", "*", 
             RowBox[{"H", "/", 
              RowBox[{"Norm", "[", "H", "]"}]}]}], ")"}]}]}], "}"}], "]"}]}], 
      "}"}], ",", "opts", ",", 
     RowBox[{"PlotLabel", "\[Rule]", "\"\<NNMF\>\""}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"U", ",", "S", ",", "V"}], "}"}], "=", 
   RowBox[{"SingularValueDecomposition", "[", 
    RowBox[{"points", ",", "2"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"grSVD", "=", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"ListPointPlot3D", "[", "points", "]"}], ",", 
       RowBox[{"Graphics3D", "[", 
        RowBox[{"{", 
         RowBox[{"Red", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Arrow", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", "#"}], "}"}], 
             "]"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"c", "*", 
             RowBox[{"Transpose", "[", "V", "]"}]}], ")"}]}]}], "}"}], 
        "]"}]}], "}"}], ",", "opts", ",", 
     RowBox[{"PlotLabel", "\[Rule]", "\"\<SVD\>\""}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"A", ",", "S"}], "}"}], "=", 
   RowBox[{"IndependentComponentAnalysis", "[", 
    RowBox[{"points", ",", "2"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"grICA", "=", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"ListPointPlot3D", "[", "points", "]"}], ",", 
       RowBox[{"Graphics3D", "[", 
        RowBox[{"{", 
         RowBox[{"Red", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Arrow", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", "#"}], "}"}], 
             "]"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"c", "*", 
             RowBox[{"S", "/", 
              RowBox[{"Norm", "[", "S", "]"}]}]}], ")"}]}]}], "}"}], "]"}]}], 
      "}"}], ",", "opts", ",", 
     RowBox[{"PlotLabel", "\[Rule]", "\"\<ICA\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"gr0", ",", "grSVD"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"grICA", ",", "grNNMF"}], "}"}]}], "}"}], "]"}]}], "Input", \
"ExampleInput",
 TaggingRules->{},
 CellChangeTimes->{{3.785670091621346*^9, 3.785670160629175*^9}, {
   3.785670192658847*^9, 3.785670210770506*^9}, {3.785670242938051*^9, 
   3.78567028568786*^9}, {3.78567052788328*^9, 3.785670528487864*^9}, {
   3.785670844428116*^9, 3.7856708640477448`*^9}, {3.785670911289155*^9, 
   3.785670926283723*^9}, {3.785671101001891*^9, 3.785671131925495*^9}, {
   3.785671210352995*^9, 3.785671210913076*^9}, {3.785676336531947*^9, 
   3.785676338994254*^9}, {3.785676476838395*^9, 3.78567660038281*^9}, {
   3.7856768601391573`*^9, 3.7856768721291637`*^9}, 3.785711019464373*^9, {
   3.785711079685487*^9, 3.785711099725698*^9}, {3.893537659694734*^9, 
   3.89353766305865*^9}},
 CellLabel->"In[2]:=",
 CellID->1323367178,ExpressionUUID->"b013e34b-54b7-4613-8e2e-d5d2b56b9b06"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     Graphics3DBox[{{
        {RGBColor[0.3315753, 0.4561011, 0.6388182], PointSize[
          NCache[
           Rational[1, 72], 0.013888888888888888`]], 
         Point3DBox[CompressedData["
1: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
WB+6sz7nnDD8D8uJzjY=
          "]]}, {}, {}}, {}},
      Axes->True,
      AxesLabel->{None, None, None},
      BoxRatios->{1, 1, 1},
      DisplayFunction->Identity,
      FaceGrids->{{{0, 0, -1}, {{-15, -10, -5, 0, 5, 10, 15}, {-15, -10, -5, 
         0, 5, 10, 15}}}, {{0, 1, 0}, {{-15, -10, -5, 0, 5, 10, 
         15}, {-15, -10, -5, 0, 5, 10, 15}}}, {{-1, 0, 0}, {{-15, -10, -5, 0, 
         5, 10, 15}, {-15, -10, -5, 0, 5, 10, 15}}}},
      FaceGridsStyle->Automatic,
      Lighting->{{"Ambient", 
         GrayLevel[0.5]}, {"Directional", 
         GrayLevel[0.5], 
         ImageScaled[{0, 2, 2}]}, {"Directional", 
         GrayLevel[0.5], 
         ImageScaled[{2, 2, 2}]}, {"Directional", 
         GrayLevel[0.5], 
         ImageScaled[{2, 0, 2}]}},
      PlotRange->{{12., -12.}, {12., -12.}, {12., -12.}},
      PlotRangePadding->{{0, 0}, {0, 0}, {0, 0}},
      Ticks->{Automatic, Automatic, Automatic},
      ViewPoint->{-1.1, -2.43, 2.09}], 
     Graphics3DBox[{{{
         {RGBColor[0.3315753, 0.4561011, 0.6388182], PointSize[
           NCache[
            Rational[1, 72], 0.013888888888888888`]], 
          Point3DBox[CompressedData["
1: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
WB+6sz7nnDD8D8uJzjY=
           "]]}, {}, {}}, {}}, 
       {RGBColor[1, 0, 0], 
        Arrow3DBox[{{0, 0, 
          0}, {-2.36537803298793, -11.508736170145927`, -2.440077565782106}}],
         Arrow3DBox[{{0, 0, 0}, {
          8.85168939861118, -0.1015623987484667, -8.101683767568007}}]}},
      Axes->True,
      AxesLabel->{None, None, None},
      BoxRatios->{1, 1, 1},
      DisplayFunction->Identity,
      FaceGrids->{{0, 0, -1}, {0, 1, 0}, {-1, 0, 0}},
      FaceGridsStyle->Automatic,
      Lighting->{{"Ambient", 
         GrayLevel[0.5]}, {"Directional", 
         GrayLevel[0.5], 
         ImageScaled[{0, 2, 2}]}, {"Directional", 
         GrayLevel[0.5], 
         ImageScaled[{2, 2, 2}]}, {"Directional", 
         GrayLevel[0.5], 
         ImageScaled[{2, 0, 2}]}},
      PlotLabel->FormBox["\"SVD\"", TraditionalForm],
      PlotRange->{{12, -12}, {12, -12}, {12, -12}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.02]}, {0, 0}},
      Ticks->{Automatic, Automatic, Automatic},
      ViewPoint->{-1.1, -2.43, 2.09}]},
    {
     Graphics3DBox[{{{
         {RGBColor[0.3315753, 0.4561011, 0.6388182], PointSize[
           NCache[
            Rational[1, 72], 0.013888888888888888`]], 
          Point3DBox[CompressedData["
1:eJxFVnk0FF7Yno3BWIZhxr6MsS/RYom6bySSlKWknyRJyfIjaZlUEiWFJBVJ
shSKSiiUvaifyr5V9n2pwdi3z3fO9033nPvHPfe99z73ufd9nlfB9V/bYzgM
BlO91vFr/VWxgMx34QKUaL1Lxu4+DvZucM78KkwGzP+1xuvn7g6mSYKSrdSi
cZQwyD9xfx77iBcUj+ra/GsgBVSb/XZ9CiNITFka74fBgJXN00bb72Qo4b/1
yPYoBhoi51urTy+h9Fd+84XNmuD5VMZqVR4LuXzlTWrC3OCympYaqjyLwspx
of4SbCTcHLBR8DwWHG6oOcAFWTgrrlu5dHIZ/T+eYvvRoPb9yuBTenTBcVSY
gzNfyKTXaoUCvqTwnca9FGgtu/zeW2ACva0LcPcLoYCsheB+s2Qi8OcUHvIL
EoafQcZigwYynPVK/G6HmHmCkFDsKhB3Qg0efBHpa/ZsRYzHfP0YtSl0K0PT
RmLXFPodbPWwfZ4I0Clyv6yYCAbyIdio58qw0KW38PPKJHogSs5QccKBk/GF
YuH9GnD/TfixK4EriGb4+NavVn74nfrmh7wZHciqr5LNLfqRi0oFrXBuFHkF
6hE6LdfBDWLl3qTXRNjdsn0XbpQItdXtB+Or5eCmPn0pgD6Jvpxpef5NRwwu
vJ4tfPpiHQf/sIrJE+fNC2jx7hDJR54OZwj5LT3deJjp2Pjmd5kYjLgn1zSP
SHHi1ds8rqpdnURj+hKCjCt0EF042XL5CBcMXd0+MTz+C93QLk3zNZaCUZHg
gIiLAuCR8KBi8/4FVOza0/jjEBkaTEluR8dw4KBYzf+kTQB8zz/+WHSRDtUu
Mlwi/M2ooMv0Qs6nZdRX+EVdXEgdxC4l0HE0HDSfuUXT5OGGlRg0KfQvHZYg
xrqbykY6jU1dx827kGAgM7l9vy7oattEbG/jhxU/ucJi0W5kgIuOviSqBHcL
mN5yjSSQlmmrmrAYR3vwxt9eHZSC2l15s62HeIE/UC7Ei4uNpj+k+e2/TIfV
O7o+/KEEuGuojf2lM4tMtr2QK8cpg/pv7Xgtbi6QvaltN1XPBytBFmf+l4eh
evpuRb0B5HFucPjsLiFg234sS3ERgKAtjTl1OtnoT57vj3Y3FiKMJBC5f4kB
OSul+FEiN8x1Reupc80jnXdExdEhWVCerKR8+o4HMv8N144CLKAuGbeip3Kw
ubXsfASsoLQHK7OU8DnUo9TuIrZeE7wMr2gaFBOAvXM1l/x6GV3Xvxbtk6wK
9uOxPhppWLhU+TBkfTkbjS5hPn4xl4Ssu0bnjIu4YSCkyy2QzAVf8Jer9j5a
D9JaiUU/8FOIz+Bl6ZANN6TGVeRHFgkD3U29mC9oEvG1/SdLuscDxfWhhi9m
dOAc1Y5uOzqCFNxiGPEqQtAX5PfM+4I4sASHxa99q0Fblz58SZnjA5HhfGaw
oyI8YOMGl082I2muYK6kiklUbCjeHdGpCFvPCgddfUaEJ/cvp+94ygPeG7wH
/YskAEyVHx2eHkfFNw/rGumtoEAtly2BTXRQMlzYeuIOFowzvqdkDPDC7Tbb
2c4iacAckGbtjBz6m++y7woPj/PDtRN6P6fUxCDdo0m3JpAHglrClYysJYBh
mrEkVTyB9qge+R73hh+ipNK23SQpQO3bPSFC91sQY3nkQuSDTnQrYLfYwwAa
hNHz0JEyPshLoMslVc8iUQm5T5JRDNg3YHGP2IKHHImSs7eSyXDQUYxvQ9lf
fdm3UPf+yVsi3DwjlsXrpAhWeXeUH6mMI4OzxEe3rXkhaM7Vuus1FUbeC2VM
/TeGfOclFY2Wq5DN/q8vsk+pQGe67D2tWwKQpBIzYYcjgHZww72Xr1WgsaGW
0L59FpVPLhUw+Xggu3ZF9y1WBUKM6zvuRbLQzPXcfxr7CCDS6uNT0SADgZEY
FaoyG/3cRLBbr0/i4BPJuu1F4BlATYcEV+aS55G412nnbAd5WHTefT/OCAua
EiQsLRUL6bK6HqPHiWCyk1dtwG8WGVQjl/T9eDi+y7qrNlwCdBpUd5qMzKNi
5jPGUNQk8nJPyPwaIQw/CE9ZJRFEiC0vffyLlx8GuouylB01YG6ua65Rqwkl
ET9Lxh2tQp4OYzSF1xJA+1npdfSNALQaCdGfkb+iadRZ9RkrBSe0h90lPQTB
drP+Lno+D8RKVcT6V0jA+rm25FXdETTzJmp85QkFvg2FsQoXKJz72T/ZK38x
dI7zL1oM0g5dX1rTt7OfB7YkTiKXnHB7pVAlUB9+nO8rSwTCK9zmvJEmxJYL
ETsaLAFBp7R9w0b+8tV3ZUjI/6IGqJs16o+1ksFhz0LIJV4cBFl9rZq4rAV2
e8SvZ44uIkIyPisycBQlaaUznAukAP92bH1DEh9nH36Gi2VwsxwEmxJW9FhC
0Pi63sHoNJYzP5rjqy7/3xISKylXf+gyg5IWzTz8C1RhNYaVN/6cAHL7OySp
bcuoRGm3l0iMMpglinLtkcaCk29J441APHSkz/mY0egQJkVIff5kHu2dPVbu
Ec0HRnVCgiMUGhTaPxb6/HYA8flVOFi0EiHxw59/yk+qA7W236L/8iSHr2d9
VVZMnk1A3UPV799Ag2HY9vj5ESHQgx3b3tgxwOXcNaabTDUqVO3QqE/k4uA/
2J8yFmbNRht3U21M1nx76U9B++0UPBh5Os7OCmIgpDV39/k0Aqj6UIfIQRTQ
5zbziNsyj0r53KVEqnhAd+aAi/WCCCj7J5rkXexDWz4x6evWkYHULry90EiB
cw61jrq5ZxULjwPe8ckay8M1wsyZwTAMaBmlnUwYIICnn2PfsiQdgq/kf1q5
zUa23ktF2c54OJjaeybbWwuSfhlJMjbOoLGgydIa7Crn3sojsWSTqVV04MCn
gbJsHGyV7PR6tEEOJtIzKlNaFtDP1JW4mXEBMOl5cq4sWAmk7RwjlM/Uo0oh
Cetn+hToqXPrttSlc3DiWuTPvhpeQZRbd79WG9IAV2W0lb20ik7m7eA68VgQ
7sZuywqXWOMz7kLGrYFypPV7S6TDDS4Q97SwJ54eQMqfdtxJ2MRGpk55/vcL
iCCYkYxrvkyBkIv3FL5njaK4gmEfksYSyjT8hnOVo0D/jJ1RwWss1HTopSdR
RCEXGDQxttpfH/94xDD+Czc0FlqeDlVUhjD2zy3n1CdR87ii7bFSMvAE5fnO
Cqty4nW/b02KfskDz6zz1LFHNIGcEbMH0/obJV0TwL5KrUNhm0zOvPskD8Lt
ucu76gSgOuD9gIfICIq/pu+4C0+Fblfz305bSdCzvn/ixjcCBO9fCNxSqwb0
1QxJn6UpDu/bw35olJ1bB7VPWFi6GgWGHD/E6kjOoUx15ahgohakL3KVpy6t
+R3vpanmyVVUfrg+Mm2TIuwOvA42PRgwT4zb9ycUCzqsOMXBPBpcrVl3tpbr
b1756sxRIiIVwXpJzHLspzBc7BG83SOKAXsmXwFtkhfOVhziUl76+w8mjmXb
OknIg69cdLurujBM8sQsa/hiwOcerialVxjeN5tPzDNXUdJ/Mx/2OTQg1atC
yUWrIsBK7/yIdEjQxkyNCf2GA20T0wHjNClwPcf4evHPAqKIL67w1i4gXEzo
R2IWCerKuxahBAcHW2Iv7fOgQFhquuVdEo2De+Y9gdlG6Eduz1+byZioQZ+w
9Hr1JT7YbPH2QHwdhhNnXvtvc9eNv+MMQxeK9SwVki2l7F95kCFwNEj+ZiEB
MLwblZ4eZyHxeN0d7iLTyDQqKyx3QAC0/YyPnmcLgLzQ80OJj78gK4kMDaoS
Fj4n293EbZQEPMmdSUpYq89kSjbEv8MBXfv8zulxLdif0ZRzOm6Gw9sx2shN
NkkKDgQwTtx+IQy/FR+OEfKJ8LkuU8fFjQLOPVpd18dZKKdn5/AiLwZEn//r
JRDJAJqSyP233lgIv30pPNWaD8rdBTKw72ngMiDUWXy6GZW8xKQrNc6gOyeZ
t38F06HxtFshvOSGdLfu6H4LHLzasSyYm7KKCsQNYrP6FtEUX8ygYgIL1bpM
Zb35oABsT6lV0wUeUFN1lc5KXkHZDnNWujEqoHwhWmvvAQxAz1vD/EutyMsS
H9Qnrwg/mnnNWrX5wTLu29zjyj/o6aPtESUR0sAgY3l/FBFhdn1xVeBZIhTH
tn9mTnPD0PzXTJ4TkwiXEiIlmEwBZaSg0TWpyHmPDfGKCyeWBSGKseV8JkMe
qgVGZqOcG9DeCbDcGE0E1/q8y1kZa37OHjiuqTWFdly6X1eGH0HXPPO3axDF
obr3PCHGnxdq1a+Lyk2soH3e/6rWGanB8O2H1WkMLKi+p5VcObymP9fMa2Zf
y/3Vn+nLfMfO8QAjVa64J4QKPvHZKUVeoyh7TnN3XPsweoEfZsaoykDYt9J9
oSt8cFpcvysveBxp0ZSV7Z8qQ685lUV8SoScVodDbcmC0GzXK1fvxoAgC4Nv
m0rSETVnq9YXH0HoOVqsbycpAjU2c+2yAg3oqLrpBDeLAGoa/lO7e2SBJ3fZ
PUZyCkniZT/6r9XzmRHEUg3XtfpBcPpjf80kMow9Tg5eqxeGOoZiw4IY0OgZ
ekml6TdKY15/nnIKAwKGsVfWizOgUu6Ov2UmFuZ5NLdstpxAtG0pW2ZTFcBE
PP18XyMXSCt5xuxOYSFyeERvx7g2bNmXzaYIEOFn5rhv4TIV/lG6JDX0/q+P
OB28Nh3S9Au5pR7BOlZTgJGf3Fuuxw9X+04Ze1rNoaDBH5Uih8Tg2YX/gpML
8TCyz3088CcOuJLiNQOTGKDqmHmnwGUBaeb+Vvca5wbT5m500UcFergXlVxS
Jzh58clYi/1sjzy8z6B7NuaQodUr/437OAlcr7y1flgqC1RBkIye6ka+S9e9
xRGbs85Bn/i04gcB4OORAUuxdrTju7dZ8S0V0P8md7Vfhx98xY0pTsMEuOMZ
+DCLIg+JWtTo705zyCh4vv7zaV7I2vZnJ3GvEjC+Sl/1MxxHkVwWCXlVBAiP
fNOSc5QCkUnsXGe5v+fFMVl/jMjyQJ8/mJwbLgLOz/6wuK5joGD0hQw/TQHy
Dyh+LmvFgXXTc3NzTVHQ7C0Q0zsuz+EziZl1XMhiBP0hXSwdTNCELL+AuBhz
PrAVPdV66QgBAmxzJ/MvKIGAQ49TF2Ye5V/I6wh4MYBiF9uYessKEFLDsKpd
5OHsd1Mm6ovZIQ2grdPx5KKTwTuue/Lxw2kkn2Zd6z88iLq+bDLAOnKDy+FH
ubI3UhD+wtGDiSISkFMyL53OEILjFbz/eIYKQndR9JvZCAVgnQ77ukvoK2Jm
zpEKVf+gkzPrBI5NyEJZW8sjt3dE6PBU+e6Lm0YT/JsZN49LwvtJ97FMHJGD
555N7sv2aUnYBNIHBtwp0FUhTCse5gH7uo9qJhOC8NyIJkxyZHH4zGMNV/Xe
0ICTHjZ3VKKEYb7RQAsvNoMKaaTJ+qA1HbehizlPEsC1X6UlbHgZbfzJoqqe
w8PrN6TMVWMMVLXplvZVccHr0PhnE6ZKILpHVCdBZRq9+sW+4n1sCJlhqZ2H
VVTgqlqexIo9CcYMp6td8INo4qSJZsI+ChhsMpMciOaH2t9RWzVbP6KgDR97
pW/2ovrD+SpKgmTo0NxmpCfMQtKMyp77wcsoqrLwdoAXEe6sXrQzWJlDqbjS
tIU+eWgz62m0O00AhsFuvTqeBsTszNBWWlKAHUy98IUxfmAz2k8ed+ABanB6
lq2fFsjn9DWqyLJQyIxKqu4DFnKzdkrL2i4DbiIrUKvBAydSU0viqYtIb3tN
EjNRBAo3M/Mw9hjo0u21frLShvaGXDEUUGNAfXvDVaMnfFC8zmv9iPkQks5n
/JP5kganBF801fHygfL0catTYiyk9cmL9E1WFrLxzl9qnnFz3sv+bme82GYN
WB+6sz7nnDD8D8uJzjY=
           "]]}, {}, {}}, {}}, 
       {RGBColor[1, 0, 0], 
        Arrow3DBox[{{0, 0, 0}, {4.012835926643039, 
          0.8824237205740015, -3.9346929842850056`}}], 
        Arrow3DBox[{{0, 0, 0}, {-0.3667289814990837, 11.965200911595222`, 
          0.4906688863099071}}]}},
      Axes->True,
      AxesLabel->{None, None, None},
      BoxRatios->{1, 1, 1},
      DisplayFunction->Identity,
      FaceGrids->{{0, 0, -1}, {0, 1, 0}, {-1, 0, 0}},
      FaceGridsStyle->Automatic,
      Lighting->{{"Ambient", 
         GrayLevel[0.5]}, {"Directional", 
         GrayLevel[0.5], 
         ImageScaled[{0, 2, 2}]}, {"Directional", 
         GrayLevel[0.5], 
         ImageScaled[{2, 2, 2}]}, {"Directional", 
         GrayLevel[0.5], 
         ImageScaled[{2, 0, 2}]}},
      PlotLabel->FormBox["\"ICA\"", TraditionalForm],
      PlotRange->{{12, -12}, {12, -12}, {12, -12}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.02]}, {0, 0}},
      Ticks->{Automatic, Automatic, Automatic},
      ViewPoint->{-1.1, -2.43, 2.09}], 
     Graphics3DBox[{{{
         {RGBColor[0.3315753, 0.4561011, 0.6388182], PointSize[
           NCache[
            Rational[1, 72], 0.013888888888888888`]], 
          Point3DBox[CompressedData["
1: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
WB+6sz7nnDD8D8uJzjY=
           "]]}, {}, {}}, {}}, 
       {RGBColor[1, 0, 0], 
        Arrow3DBox[{{0, 0, 0}, {4.034561085784508, 7.925690328866802, 0.}}], 
        Arrow3DBox[{{0, 0, 0}, {0., 8.189286606313903, 
          3.4684052853821976`}}]}},
      Axes->True,
      AxesLabel->{None, None, None},
      BoxRatios->{1, 1, 1},
      DisplayFunction->Identity,
      FaceGrids->{{0, 0, -1}, {0, 1, 0}, {-1, 0, 0}},
      FaceGridsStyle->Automatic,
      Lighting->{{"Ambient", 
         GrayLevel[0.5]}, {"Directional", 
         GrayLevel[0.5], 
         ImageScaled[{0, 2, 2}]}, {"Directional", 
         GrayLevel[0.5], 
         ImageScaled[{2, 2, 2}]}, {"Directional", 
         GrayLevel[0.5], 
         ImageScaled[{2, 0, 2}]}},
      PlotLabel->FormBox["\"NNMF\"", TraditionalForm],
      PlotRange->{{12, -12}, {12, -12}, {12, -12}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.02]}, {0, 0}},
      Ticks->{Automatic, Automatic, Automatic},
      ViewPoint->{-1.1, -2.43, 2.09}]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.785677063733468*^9, 3.785677108880271*^9, 
  3.785711157222066*^9, 3.787313867319154*^9, 3.787314003321414*^9, 
  3.893537664992413*^9},
 CellLabel->"Out[17]=",
 CellID->1576175726,ExpressionUUID->"6ffe9192-effc-48b2-a75c-9dea4d888a21"]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 InterpretationBox[Cell[
  "Possible Issues", "ExampleSection",ExpressionUUID->
   "f6daa52c-d573-423f-ab49-ca86062ebc7f"],
  $Line = 0; Null]], "ExampleSection",
 CellID->945518344,ExpressionUUID->"7f0149ea-6a0d-4062-85cd-c6cf7e9c5490"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Interactive Examples", "ExampleSection",ExpressionUUID->
   "78485dcf-bb8b-4e9f-8119-fc5f003f0d3f"],
  $Line = 0; Null]], "ExampleSection",
 CellID->2095303455,ExpressionUUID->"6b9f3a72-fd02-4125-bbd5-a26ad041cd0c"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Neat Examples", "ExampleSection",ExpressionUUID->
   "6a2e4310-7940-4583-bcde-e381de5dff14"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1328324679,ExpressionUUID->"16104f58-ef8e-4d05-939c-9b1deed9dcee"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Metadata", "MetadataSection",
 CellID->2060369388,ExpressionUUID->"20294928-6cab-4f21-b1d0-793cc617f503"],

Cell[TextData[{
 "New in: ",
 Cell["1.0.0", "HistoryData",
  CellTags->"New",ExpressionUUID->"9c494a67-00bd-40a0-aa7b-1e1cc9beaaa0"],
 " | Modified in: ",
 Cell[" ", "HistoryData",
  CellTags->"Modified",ExpressionUUID->"93b78875-55ad-48e6-9b0b-5bc5bb347ad7"],
 " | Obsolete in: ",
 Cell[" ", "HistoryData",
  CellTags->"Obsolete",ExpressionUUID->
  "96ae800a-46eb-4ae9-a3cf-3f9b8b4499fe"]
}], "History",
 CellChangeTimes->{{3.864923683926749*^9, 3.864923685610183*^9}, {
  3.8935375966393843`*^9, 3.893537597741683*^9}},
 CellID->454496241,ExpressionUUID->"44a52597-39e5-4e6b-8b7d-b4b6e6cb0d8e"],

Cell[CellGroupData[{

Cell[TextData[{
 "Categorization",
 Cell[BoxData[
  TemplateBox[{"Metadata", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Metadata such as page URI, context, and type of documentation page.", 
        "MoreInfoText"], BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "22b847d7-8913-4bae-84b5-9da20fdac4c9"]
}], "CategorizationSection",
 CellID->118990108,ExpressionUUID->"e7915efe-a084-4a51-af11-df180baa6ba6"],

Cell["Symbol", "Categorization",
 CellLabel->"Entity Type",
 CellID->559469799,ExpressionUUID->"01de0226-503a-41b6-b63f-7304fd2e82df"],

Cell["AntonAntonov/DimensionReducers", "Categorization",
 CellLabel->"Paclet Name",
 CellID->131630541,ExpressionUUID->"56490425-0878-4d4c-bde5-7f61b47365d8"],

Cell["AntonAntonov`DimensionReducers`", "Categorization",
 CellLabel->"Context",
 CellID->406346177,ExpressionUUID->"f162a99e-537c-42c7-9bce-43358d40be8e"],

Cell["\<\
AntonAntonov/DimensionReducers/ref/NonNegativeMatrixFactorization\
\>", "Categorization",
 CellLabel->"URI",
 CellID->462199379,ExpressionUUID->"ced3c5d2-53ec-4850-a4c2-5d1c27960c55"]
}, Closed]],

Cell[CellGroupData[{

Cell["Keywords", "KeywordsSection",
 CellID->254553383,ExpressionUUID->"ed1f9e77-7ec1-43e2-8432-c9c142922305"],

Cell["Non-negative matrix factorization", "Keywords",
 CellChangeTimes->{{3.893537601475849*^9, 3.8935376121073236`*^9}},
 CellID->491283257,ExpressionUUID->"3f571fe0-71a8-4880-a32f-37c5bd9e04af"],

Cell["Matrix factorization", "Keywords",
 CellChangeTimes->{{3.893537617982235*^9, 3.893537623840661*^9}},
 CellID->203633153,ExpressionUUID->"02e44d1b-2ca4-454c-8541-3f5cc157843c"],

Cell["Constrained least squares", "Keywords",
 CellChangeTimes->{{3.8935376266538973`*^9, 3.893537633507827*^9}},
 CellID->52181205,ExpressionUUID->"3ac5e4ee-b047-43b1-a4bf-166e7e5056c5"],

Cell["Latent semantic analysis", "Keywords",
 CellChangeTimes->{{3.8935376266538973`*^9, 3.893537643046506*^9}},
 CellID->328105085,ExpressionUUID->"a106ee28-d9af-4dbf-998a-03f684d16ce4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Syntax Templates", "TemplatesSection",
 CellID->2070561331,ExpressionUUID->"3186036c-8d00-4161-b727-d9436b34bd05"],

Cell[BoxData[""], "Template",
 CellLabel->"Additional Function Template",
 CellID->2099274129,ExpressionUUID->"bd0a742e-d900-4c44-b302-14e8a57bd366"],

Cell[BoxData[""], "Template",
 CellLabel->"Arguments Pattern",
 CellID->1491449540,ExpressionUUID->"2544b697-5a0a-47d5-b563-8133a618a232"],

Cell[BoxData[""], "Template",
 CellLabel->"Local Variables",
 CellID->1363290996,ExpressionUUID->"f8624346-ad92-44b3-99a4-63659174de78"],

Cell[BoxData[""], "Template",
 CellLabel->"Color Equal Signs",
 CellID->1328739929,ExpressionUUID->"eb47ff10-8891-402c-9f4d-a93ae3b1cc31"]
}, Closed]]
}, Open  ]]
},
WindowSize->{1404, 1270},
WindowMargins->{{Automatic, 830}, {Automatic, 57}},
TaggingRules-><|"Paclet" -> "AntonAntonov/DimensionReducers"|>,
CellContext->"Global`",
Magnification:>1.25 Inherited,
FrontEndVersion->"13.2 for Mac OS X ARM (64-bit) (January 30, 2023)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "FunctionPageStylesExt.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"805251ce-571a-4865-a88d-969ebbded11f"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ExtendedExamples"->{
  Cell[24216, 626, 487, 13, 72, "ExtendedExamplesSection",ExpressionUUID->"a9ad61dd-857d-40c1-97e7-4dbaeb8fde1d",
   CellTags->"ExtendedExamples",
   CellID->396031745]},
 "TabNext"->{
  Cell[1481, 46, 248, 5, 56, "Notes",ExpressionUUID->"a8cdb857-7913-4413-8841-52d0cde6d1d3",
   CellTags->"TabNext",
   CellID->862193358]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ExtendedExamples", 744958, 14853},
 {"TabNext", 745143, 14857}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 127, 1, 92, "ObjectName",ExpressionUUID->"d781e8bb-212c-462d-8275-60ad547863c4",
 CellID->541242335],
Cell[710, 25, 768, 19, 99, "Usage",ExpressionUUID->"5dd83c5d-32f7-4ccb-9aaf-872a94a80322",
 CellID->2066679300],
Cell[1481, 46, 248, 5, 56, "Notes",ExpressionUUID->"a8cdb857-7913-4413-8841-52d0cde6d1d3",
 CellTags->"TabNext",
 CellID->862193358],
Cell[1732, 53, 245, 4, 56, "Notes",ExpressionUUID->"69d3fa52-e489-4f80-bbf7-8af3fc53ff15",
 CellID->683651850],
Cell[1980, 59, 131, 1, 33, "Notes",ExpressionUUID->"84d149b8-57b9-4569-be48-28050d17546d",
 CellID->337801479],
Cell[2114, 62, 201, 4, 33, "Notes",ExpressionUUID->"77074ba0-f028-479b-adc2-32c82e034b54",
 CellID->653278578],
Cell[2318, 68, 262, 5, 56, "Notes",ExpressionUUID->"ebf1dbca-353d-4ab4-b520-338e305bb012",
 CellID->226064937],
Cell[2583, 75, 244, 4, 56, "Notes",ExpressionUUID->"2fc6abba-bb2c-4eee-add8-6ec2f33af21a",
 CellID->54481016],
Cell[2830, 81, 129, 1, 33, "Notes",ExpressionUUID->"0c6cc42f-4b56-4c3f-95ab-2cc8569b586e",
 CellID->1278488522],
Cell[2962, 84, 2120, 43, 205, "3ColumnTableMod",ExpressionUUID->"1a754613-c59e-49f9-a81c-db1f1bc3cbdf",
 CellID->229782499]
}, Open  ]],
Cell[CellGroupData[{
Cell[5119, 132, 435, 12, 51, "TechNotesSection",ExpressionUUID->"6c594320-3c82-4d5b-ae04-d65bf0bea572",
 CellID->752275834],
Cell[5557, 146, 101, 1, 24, "Tutorials",ExpressionUUID->"89fa44bb-e12a-47a5-959c-6b5ee1c0eb76",
 CellID->1263712149]
}, Open  ]],
Cell[CellGroupData[{
Cell[5695, 152, 472, 13, 50, "RelatedLinksSection",ExpressionUUID->"20b2e9ba-5b1a-49fd-9c5c-82e0cc49d328",
 CellID->596819413],
Cell[6170, 167, 104, 1, 24, "RelatedLinks",ExpressionUUID->"a11de47f-c357-4fc4-b750-d6f1e288e00c",
 CellID->1995242801]
}, Open  ]],
Cell[CellGroupData[{
Cell[6311, 173, 459, 13, 50, "SeeAlsoSection",ExpressionUUID->"9ca7ce0b-e230-44cb-8688-ebd9bc5a10e1",
 CellID->1088608502],
Cell[6773, 188, 2502, 60, 52, "SeeAlso",ExpressionUUID->"6efedd2b-aa3f-4af7-94aa-6a7b06775f29",
 CellID->1829904321]
}, Open  ]],
Cell[CellGroupData[{
Cell[9312, 253, 184, 2, 50, "MoreAboutSection",ExpressionUUID->"2965c4e6-40da-4489-ae8d-7547865a59f1",
 CellID->1088614360],
Cell[9499, 257, 326, 6, 24, "MoreAbout",ExpressionUUID->"c486ab48-16ac-4046-8f7e-38bb868b6e77",
 CellID->1928359727]
}, Open  ]],
Cell[CellGroupData[{
Cell[9862, 268, 530, 14, 87, "ExamplesInitializationSection",ExpressionUUID->"e4ada36f-973d-4586-ac2b-2be2ac19583c",
 CellID->118731165],
Cell[10395, 284, 190, 3, 57, "ExampleInitialization",ExpressionUUID->"c28e3f0c-88f5-43e8-8f40-635e2f87dfaa",
 CellID->502382092]
}, Open  ]],
Cell[CellGroupData[{
Cell[10622, 292, 443, 12, 90, "PrimaryExamplesSection",ExpressionUUID->"9d9f9cee-f9d1-4088-b1ca-559d46324ebd",
 CellID->1777603887],
Cell[11068, 306, 263, 4, 30, "ExampleText",ExpressionUUID->"e5d31287-c44b-4a47-8e2e-049c9772db07",
 CellID->13078159],
Cell[CellGroupData[{
Cell[11356, 314, 513, 13, 82, "Input",ExpressionUUID->"9bd5f083-68b1-40ce-a664-ce5dc6493b13",
 CellID->443871870],
Cell[11872, 329, 5217, 102, 65, "Output",ExpressionUUID->"33669560-97ff-4403-a351-1aa18bc139bb",
 CellID->1283838566],
Cell[17092, 433, 952, 25, 90, "Output",ExpressionUUID->"6a6bcaf7-4dcd-472c-aa58-91d94e5d069d",
 CellID->1706577353]
}, Open  ]],
Cell[18059, 461, 337, 5, 30, "ExampleText",ExpressionUUID->"a0d66d3b-f5be-4d2f-a8cb-2327ea6fff7d",
 CellID->140624930],
Cell[CellGroupData[{
Cell[18421, 470, 644, 17, 58, "Input",ExpressionUUID->"d8ebb24d-794a-456e-89db-b85e49df10df",
 CellID->2122564449],
Cell[19068, 489, 1382, 29, 90, "Output",ExpressionUUID->"5a0ece85-ca39-4950-ba78-16339fe0ad2a",
 CellID->653982539]
}, Open  ]],
Cell[20465, 521, 211, 3, 30, "ExampleText",ExpressionUUID->"d90dfa5c-b943-44d4-aa8f-669e05148eea",
 CellID->1795349161],
Cell[CellGroupData[{
Cell[20701, 528, 289, 6, 33, "Input",ExpressionUUID->"0416c90d-67fe-483b-b092-b4afd0ff9b05",
 CellID->500433151],
Cell[20993, 536, 1130, 25, 90, "Output",ExpressionUUID->"26d57678-a359-429a-b693-8ed159e1639e",
 CellID->663227627]
}, Open  ]],
Cell[22138, 564, 426, 8, 30, "ExampleText",ExpressionUUID->"067330c8-3131-4a9b-ac8c-28ec579bfb79",
 CellID->870453125],
Cell[CellGroupData[{
Cell[22589, 576, 490, 13, 33, "Input",ExpressionUUID->"eb2f3bbd-5f5a-432e-9fa1-791d4f20986d",
 CellID->211435835],
Cell[23082, 591, 1085, 29, 90, "Output",ExpressionUUID->"2524b657-cc1b-45f4-aa1b-e3acad0d934c",
 CellID->1426599059]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[24216, 626, 487, 13, 72, "ExtendedExamplesSection",ExpressionUUID->"a9ad61dd-857d-40c1-97e7-4dbaeb8fde1d",
 CellTags->"ExtendedExamples",
 CellID->396031745],
Cell[CellGroupData[{
Cell[24728, 643, 242, 5, 43, "ExampleSection",ExpressionUUID->"415ffd9c-dae4-4cf8-99ac-b9088baa969a",
 CellID->1053716162],
Cell[24973, 650, 287, 6, 30, "ExampleText",ExpressionUUID->"522965f8-4655-40a3-b937-b254ef8e03be",
 CellID->649685796],
Cell[CellGroupData[{
Cell[25285, 660, 1576, 45, 154, "Input",ExpressionUUID->"ab5ada2e-73ad-477a-920d-96e3e90f73ed",
 CellID->1611850593],
Cell[26864, 707, 6860, 155, 295, "Output",ExpressionUUID->"077adb24-03c8-47da-8c27-c2fa2f8cb9bc",
 CellID->195465858]
}, Open  ]],
Cell[33739, 865, 286, 4, 30, "ExampleText",ExpressionUUID->"a1571ef8-fc8e-40df-ae88-38e59ca9db5a",
 CellID->1913315032],
Cell[34028, 871, 702, 17, 82, "Input",ExpressionUUID->"57d06b15-6afc-419e-9940-b9c27287cef2",
 CellID->1189226501],
Cell[34733, 890, 320, 6, 30, "ExampleText",ExpressionUUID->"d9d66be8-656a-403f-9fb7-1fabe7733fc0",
 CellID->2088764746],
Cell[CellGroupData[{
Cell[35078, 900, 366, 9, 33, "Input",ExpressionUUID->"e1f06157-cb88-4970-9bcf-5702c9b302a3",
 CellID->1727024597],
Cell[35447, 911, 444, 7, 32, "Output",ExpressionUUID->"66852875-586e-403c-9dff-41acb63007ed",
 CellID->1692179143]
}, Open  ]],
Cell[35906, 921, 213, 3, 30, "ExampleText",ExpressionUUID->"18aadcc2-3809-44e6-a130-b4fcd285441d",
 CellID->465474160],
Cell[CellGroupData[{
Cell[36144, 928, 732, 23, 33, "Input",ExpressionUUID->"23065be5-8290-4e3e-ac76-a4ad08025bb8",
 CellID->1987455777],
Cell[36879, 953, 441, 7, 32, "Output",ExpressionUUID->"79be2059-dc71-4584-874b-c35a80eeb593",
 CellID->1328919180]
}, Open  ]],
Cell[37335, 963, 185, 3, 30, "ExampleText",ExpressionUUID->"b6d4b342-bf96-409e-8a39-6a1991f60226",
 CellID->806276390],
Cell[CellGroupData[{
Cell[37545, 970, 1038, 27, 82, "Input",ExpressionUUID->"23b1b59c-5e62-4365-a6d1-d1b84d64561e",
 CellID->1412543245],
Cell[38586, 999, 15505, 347, 232, "Output",ExpressionUUID->"b6167b9b-7d90-41c8-b7f0-22cb91dbf2cc",
 CellID->1314729460]
}, Open  ]]
}, Open  ]],
Cell[54118, 1350, 265, 5, 43, "ExampleSection",ExpressionUUID->"93a9d81c-30da-40bd-b767-db72cc493e48",
 CellID->1657381572],
Cell[CellGroupData[{
Cell[54408, 1359, 243, 5, 27, "ExampleSection",ExpressionUUID->"04fbd262-c5c3-4c6c-843e-ea7b6662bd5d",
 CellID->449541550],
Cell[CellGroupData[{
Cell[54676, 1368, 259, 5, 32, "ExampleSubsection",ExpressionUUID->"bc55b132-9fb1-410f-a9fe-555e96e26fbf",
 CellID->456494623],
Cell[54938, 1375, 910, 19, 73, "ExampleText",ExpressionUUID->"2dbdf6e2-c39a-4cb2-bea4-a99ae67383bf",
 CellID->770586524],
Cell[CellGroupData[{
Cell[55873, 1398, 3257, 74, 442, "Input",ExpressionUUID->"4716273a-b279-4223-a39b-1cba9e849f11",
 CellID->1769929472],
Cell[59133, 1474, 24837, 557, 550, "Output",ExpressionUUID->"e217586b-1322-425b-9f7d-32f8f1d7fef8",
 CellID->1198790237]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[84019, 2037, 270, 5, 32, "ExampleSubsection",ExpressionUUID->"e2180ac4-4ac4-4a0e-9095-03c9530bad3c",
 CellID->1486520877],
Cell[84292, 2044, 777, 13, 73, "ExampleText",ExpressionUUID->"f183d3b3-a73f-4ab2-84c7-caa506dc7e7b",
 CellID->1623621730],
Cell[85072, 2059, 1429, 30, 82, "Input",ExpressionUUID->"bc7aa2d9-5798-44d5-82d2-154ed9353cf1",
 CellID->627374914],
Cell[86504, 2091, 255, 4, 30, "ExampleText",ExpressionUUID->"6e752d4a-d6a8-446b-acee-0a58676c3e12",
 CellID->1322204138],
Cell[CellGroupData[{
Cell[86784, 2099, 894, 24, 130, "Input",ExpressionUUID->"2fc2f2c1-badf-4ff4-b8d2-3b8a69d3f921",
 CellID->1212020367],
Cell[87681, 2125, 11076, 250, 424, "Output",ExpressionUUID->"0a919244-4b69-41da-860a-ac73f5e5bd3c",
 CellID->375937105]
}, Open  ]],
Cell[98772, 2378, 220, 3, 30, "ExampleText",ExpressionUUID->"ac79f906-364b-4d63-8696-8914869f1356",
 CellID->891070526],
Cell[CellGroupData[{
Cell[99017, 2385, 452, 12, 33, "Input",ExpressionUUID->"addd4726-2d13-469f-9c31-a03db587736e",
 CellID->266721192],
Cell[99472, 2399, 688, 13, 32, "Output",ExpressionUUID->"d692b3f1-41e0-414b-bd04-40e39074b1b1",
 CellID->478034261]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[100221, 2419, 249, 5, 43, "ExampleSection",ExpressionUUID->"3ad2d85e-6e3f-4887-b0f7-19186bf3b6fb",
 CellID->1385757804],
Cell[100473, 2426, 587, 10, 73, "ExampleText",ExpressionUUID->"03ee4c75-dea0-454e-9977-c0a15fd0dc1e",
 CellID->1225356771],
Cell[101063, 2438, 318, 5, 30, "ExampleText",ExpressionUUID->"92b45b8e-ac1e-4c6c-8f1c-b7768aa6113d",
 CellID->804840354],
Cell[CellGroupData[{
Cell[101406, 2447, 726, 15, 58, "Input",ExpressionUUID->"83c58ede-4a23-4d62-a722-d6a0d02aeb37",
 CellID->1502290288],
Cell[102135, 2464, 597, 11, 32, "Output",ExpressionUUID->"712011ee-4f90-4238-af62-dadcfbe0f144",
 CellID->585501200]
}, Open  ]],
Cell[102747, 2478, 472, 8, 30, "ExampleText",ExpressionUUID->"f7fbe81c-5807-45d0-9da2-17aae6cfb7a7",
 CellID->2113275814],
Cell[103222, 2488, 566, 14, 33, "Input",ExpressionUUID->"651acfcb-1228-4977-8985-473b01a2983d",
 CellID->1166177100],
Cell[103791, 2504, 918, 24, 30, "ExampleText",ExpressionUUID->"be8beb92-1ac7-4241-a526-a6e703cc16b7",
 CellID->470174977],
Cell[CellGroupData[{
Cell[104734, 2532, 957, 22, 106, "Input",ExpressionUUID->"783d46c8-3ebf-4604-8b0f-21990ea75418",
 CellID->1283147187],
Cell[105694, 2556, 774, 17, 129, "Output",ExpressionUUID->"c957e447-6e88-4be7-8df6-a8f70e47a893",
 CellID->748597846]
}, Open  ]],
Cell[106483, 2576, 255, 4, 30, "ExampleText",ExpressionUUID->"0aa39b1a-592a-4b45-8f52-02b2efd652dd",
 CellID->1430442702],
Cell[CellGroupData[{
Cell[106763, 2584, 627, 17, 58, "Input",ExpressionUUID->"507683fc-272c-40a6-a11c-27e912bdc408",
 CellID->931105148],
Cell[107393, 2603, 885, 17, 105, "Output",ExpressionUUID->"b13c9601-6dd6-44f2-bd60-2db700c42484",
 CellID->1724793596]
}, Open  ]],
Cell[108293, 2623, 259, 4, 30, "ExampleText",ExpressionUUID->"e5830fbb-4112-467d-9fed-75636059daec",
 CellID->327190803],
Cell[108555, 2629, 748, 19, 82, "Input",ExpressionUUID->"ba234a65-f6cd-4daa-befe-7f36aafe1a53",
 CellID->1671851718],
Cell[109306, 2650, 371, 7, 30, "ExampleText",ExpressionUUID->"62b92c4c-960e-406b-8776-7e4cd0441ecc",
 CellID->54083485],
Cell[CellGroupData[{
Cell[109702, 2661, 738, 19, 106, "Input",ExpressionUUID->"4352ec80-578f-4fea-b60f-c7ede2a00988",
 CellID->997263385],
Cell[110443, 2682, 751, 17, 32, "Output",ExpressionUUID->"45b15616-48b7-47e8-bf1e-7faca11f0d7a",
 CellID->1871700766]
}, Open  ]],
Cell[111209, 2702, 224, 3, 30, "ExampleText",ExpressionUUID->"e08072ec-5c66-459a-978b-304e2c31642f",
 CellID->1930105902],
Cell[CellGroupData[{
Cell[111458, 2709, 1288, 32, 154, "Input",ExpressionUUID->"1cee4445-9f16-42da-8256-c466e2bf16ae",
 CellID->1623420469],
Cell[112749, 2743, 315, 7, 32, "Output",ExpressionUUID->"e8a4f95f-311a-4ec7-a3c3-457a1e7de944",
 CellID->530688487]
}, Open  ]],
Cell[113079, 2753, 572, 12, 52, "ExampleText",ExpressionUUID->"f179d5bd-8e42-44d1-ba86-43963f6b23f1",
 CellID->1888711604],
Cell[CellGroupData[{
Cell[113676, 2769, 1000, 24, 82, "Input",ExpressionUUID->"3b3cfd1b-6621-4342-9217-4410223d30f6",
 CellID->943257372],
Cell[114679, 2795, 778, 12, 32, "Output",ExpressionUUID->"83a88ab2-4424-4566-83d8-22eb5d8be9b6",
 CellID->781815018]
}, Open  ]],
Cell[115472, 2810, 374, 8, 30, "ExampleText",ExpressionUUID->"4b2dda61-91c6-481c-a4ee-e5efe53db23b",
 CellID->251185901],
Cell[115849, 2820, 900, 23, 58, "Input",ExpressionUUID->"06546a3b-2963-4a02-8a70-fd372a0cb0ef",
 CellID->985271493],
Cell[116752, 2845, 297, 4, 30, "ExampleText",ExpressionUUID->"c30e8c57-ff59-48f8-b767-1bfce3b0a5fc",
 CellID->1477660171],
Cell[117052, 2851, 674, 14, 33, "Input",ExpressionUUID->"0ea8ebe0-935c-4152-9e81-d96b5bbd731f",
 CellID->1833359859],
Cell[117729, 2867, 340, 5, 30, "ExampleText",ExpressionUUID->"dd7b86b1-18dc-472d-9c9e-ee62ef4d96dd",
 CellID->1281284094],
Cell[CellGroupData[{
Cell[118094, 2876, 754, 15, 58, "Input",ExpressionUUID->"45e57e56-bcbe-4423-9850-9465f6d82614",
 CellID->1469924403],
Cell[118851, 2893, 143405, 2917, 532, "Output",ExpressionUUID->"ab3780fb-54c9-4608-8e43-eb94854dd871",
 CellID->439868436]
}, Open  ]],
Cell[262271, 5813, 268, 4, 30, "ExampleText",ExpressionUUID->"07fdc012-dd53-40c2-b7f1-d7797723acad",
 CellID->1410481053],
Cell[CellGroupData[{
Cell[262564, 5821, 1352, 35, 130, "Input",ExpressionUUID->"3eeef7f7-fda3-4013-9894-f0d034fabf95",
 CellID->280650785],
Cell[263919, 5858, 20877, 350, 438, "Output",ExpressionUUID->"c6e5cdf1-0830-4331-857b-080008dd7caa",
 CellID->1230090878]
}, Open  ]],
Cell[284811, 6211, 219, 3, 30, "ExampleText",ExpressionUUID->"e3be7783-9f65-468f-838f-7e1663800d07",
 CellID->1189621914],
Cell[285033, 6216, 333, 9, 33, "Input",ExpressionUUID->"d6db2850-462f-4b4a-9067-07e17c8e2e01",
 CellID->1859484820],
Cell[285369, 6227, 761, 16, 52, "ExampleText",ExpressionUUID->"7ac25a7d-9984-4707-a219-8576233b5d5d",
 CellID->992223951],
Cell[CellGroupData[{
Cell[286155, 6247, 465, 11, 33, "Input",ExpressionUUID->"783d4151-765b-446a-9040-b250994f0ccb",
 CellID->1675385653],
Cell[286623, 6260, 16344, 308, 223, "Output",ExpressionUUID->"e2b1b74e-ded6-4501-84e7-1630467ee5a3",
 CellID->659718471]
}, Open  ]],
Cell[302982, 6571, 479, 9, 30, "ExampleText",ExpressionUUID->"d2d4095a-51cd-4a38-a198-d3ddfd374f24",
 CellID->980101237],
Cell[303464, 6582, 785, 20, 106, "Input",ExpressionUUID->"fb794686-4d84-40b2-a108-162dd8ad0d62",
 CellID->1406600015],
Cell[304252, 6604, 373, 5, 30, "ExampleText",ExpressionUUID->"2613e7f8-5663-4442-a6a7-9dbf67a8a36d",
 CellID->749224462],
Cell[304628, 6611, 608, 15, 33, "Input",ExpressionUUID->"75ae3288-07cc-46ee-a5ac-9b01c62878ab",
 CellID->828817858],
Cell[305239, 6628, 306, 6, 30, "ExampleText",ExpressionUUID->"12313137-b6ba-4aa6-b49a-0cb1193c2109",
 CellID->1334964649],
Cell[CellGroupData[{
Cell[305570, 6638, 959, 19, 58, "Input",ExpressionUUID->"dd0c373a-c6d7-4bc8-849a-6264d832666b",
 CellID->1248346983],
Cell[306532, 6659, 5367, 102, 65, "Output",ExpressionUUID->"fd933ac8-205b-402f-80f0-1420e62cad92",
 CellID->430272636],
Cell[311902, 6763, 327222, 5407, 66, "Output",ExpressionUUID->"3c010477-54a3-4914-bca0-f021bddef71d",
 CellID->1014753803]
}, Open  ]],
Cell[639139, 12173, 624, 11, 30, "ExampleText",ExpressionUUID->"3382de11-eb97-4a3a-8e04-6a5f5db4f217",
 CellID->409204664],
Cell[CellGroupData[{
Cell[639788, 12188, 1221, 23, 130, "Input",ExpressionUUID->"acfbe5de-4246-46aa-92dd-d49819b1b153",
 CellID->159268430],
Cell[641012, 12213, 1275, 21, 32, "Output",ExpressionUUID->"a806b606-f3ab-4aa0-87c2-b504e968fcff",
 CellID->1022266702]
}, Open  ]],
Cell[642302, 12237, 513, 12, 30, "ExampleText",ExpressionUUID->"bd0afded-7411-4ff5-a531-6999ec2e440e",
 CellID->824804201],
Cell[CellGroupData[{
Cell[642840, 12253, 1572, 35, 202, "Input",ExpressionUUID->"3d1e016a-64e2-41fd-9bf8-cb563c837674",
 CellID->457183656],
Cell[644415, 12290, 30649, 893, 720, "Output",ExpressionUUID->"a360887d-f26f-4f5a-9e65-1fa0d90bb58f",
 CellID->1367284514]
}, Open  ]],
Cell[675079, 13186, 587, 10, 52, "ExampleText",ExpressionUUID->"83080cae-fd5b-4171-b24e-a91724a27f9d",
 CellID->492869140],
Cell[CellGroupData[{
Cell[675691, 13200, 3291, 80, 418, "Input",ExpressionUUID->"2654894b-2528-49fa-9a25-c7c9fd17ecb1",
 CellID->1879382821],
Cell[678985, 13282, 22611, 636, 578, "Output",ExpressionUUID->"26c6debf-316c-4fee-bf2c-995504d6c08a",
 CellID->1875803898]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[701645, 13924, 258, 5, 43, "ExampleSection",ExpressionUUID->"9b9e517f-ca29-4674-a6d4-f8404359a263",
 CellID->971260113],
Cell[701906, 13931, 427, 8, 52, "ExampleText",ExpressionUUID->"cc6343ed-3bb1-41ef-b0e7-118367938c77",
 CellID->1985772125],
Cell[702336, 13941, 300, 5, 30, "ExampleText",ExpressionUUID->"52dbd8b6-5c50-4b54-abaf-8b3dccc6ad9c",
 CellID->627721842],
Cell[702639, 13948, 3315, 93, 298, "Input",ExpressionUUID->"1c7d46ef-59da-4780-8536-f4cb691aeaea",
 CellID->670285794],
Cell[705957, 14043, 479, 8, 52, "ExampleText",ExpressionUUID->"29cb2d64-5d3a-40ff-a1ca-4265ed78fce0",
 CellID->1116080190],
Cell[CellGroupData[{
Cell[706461, 14055, 4152, 116, 442, "Input",ExpressionUUID->"b013e34b-54b7-4613-8e2e-d5d2b56b9b06",
 CellID->1323367178],
Cell[710616, 14173, 29420, 537, 322, "Output",ExpressionUUID->"6ffe9192-effc-48b2-a75c-9dea4d888a21",
 CellID->1576175726]
}, Open  ]]
}, Open  ]],
Cell[740063, 14714, 251, 5, 43, "ExampleSection",ExpressionUUID->"7f0149ea-6a0d-4062-85cd-c6cf7e9c5490",
 CellID->945518344],
Cell[740317, 14721, 257, 5, 27, "ExampleSection",ExpressionUUID->"6b9f3a72-fd02-4125-bbd5-a26ad041cd0c",
 CellID->2095303455],
Cell[740577, 14728, 250, 5, 27, "ExampleSection",ExpressionUUID->"16104f58-ef8e-4d05-939c-9b1deed9dcee",
 CellID->1328324679]
}, Open  ]],
Cell[CellGroupData[{
Cell[740864, 14738, 111, 1, 90, "MetadataSection",ExpressionUUID->"20294928-6cab-4f21-b1d0-793cc617f503",
 CellID->2060369388],
Cell[740978, 14741, 596, 14, 33, "History",ExpressionUUID->"44a52597-39e5-4e6b-8b7d-b4b6e6cb0d8e",
 CellID->454496241],
Cell[CellGroupData[{
Cell[741599, 14759, 484, 13, 27, "CategorizationSection",ExpressionUUID->"e7915efe-a084-4a51-af11-df180baa6ba6",
 CellID->118990108],
Cell[742086, 14774, 134, 2, 43, "Categorization",ExpressionUUID->"01de0226-503a-41b6-b63f-7304fd2e82df",
 CellID->559469799],
Cell[742223, 14778, 158, 2, 43, "Categorization",ExpressionUUID->"56490425-0878-4d4c-bde5-7f61b47365d8",
 CellID->131630541],
Cell[742384, 14782, 155, 2, 43, "Categorization",ExpressionUUID->"f162a99e-537c-42c7-9bce-43358d40be8e",
 CellID->406346177],
Cell[742542, 14786, 193, 4, 43, "Categorization",ExpressionUUID->"ced3c5d2-53ec-4850-a4c2-5d1c27960c55",
 CellID->462199379]
}, Closed]],
Cell[CellGroupData[{
Cell[742772, 14795, 110, 1, 26, "KeywordsSection",ExpressionUUID->"ed1f9e77-7ec1-43e2-8432-c9c142922305",
 CellID->254553383],
Cell[742885, 14798, 196, 2, 27, "Keywords",ExpressionUUID->"3f571fe0-71a8-4880-a32f-37c5bd9e04af",
 CellID->491283257],
Cell[743084, 14802, 181, 2, 27, "Keywords",ExpressionUUID->"02e44d1b-2ca4-454c-8541-3f5cc157843c",
 CellID->203633153],
Cell[743268, 14806, 187, 2, 27, "Keywords",ExpressionUUID->"3ac5e4ee-b047-43b1-a4bf-166e7e5056c5",
 CellID->52181205],
Cell[743458, 14810, 187, 2, 27, "Keywords",ExpressionUUID->"a106ee28-d9af-4dbf-998a-03f684d16ce4",
 CellID->328105085]
}, Open  ]],
Cell[CellGroupData[{
Cell[743682, 14817, 120, 1, 39, "TemplatesSection",ExpressionUUID->"3186036c-8d00-4161-b727-d9436b34bd05",
 CellID->2070561331],
Cell[743805, 14820, 149, 2, 87, "Template",ExpressionUUID->"bd0a742e-d900-4c44-b302-14e8a57bd366",
 CellID->2099274129],
Cell[743957, 14824, 138, 2, 87, "Template",ExpressionUUID->"2544b697-5a0a-47d5-b563-8133a618a232",
 CellID->1491449540],
Cell[744098, 14828, 136, 2, 87, "Template",ExpressionUUID->"f8624346-ad92-44b3-99a4-63659174de78",
 CellID->1363290996],
Cell[744237, 14832, 138, 2, 87, "Template",ExpressionUUID->"eb47ff10-8891-402c-9f4d-a93ae3b1cc31",
 CellID->1328739929]
}, Closed]]
}, Open  ]]
}
]
*)

